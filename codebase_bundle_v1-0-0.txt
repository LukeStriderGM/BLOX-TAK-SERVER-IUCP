Project Bundle: BLOX-TAK-SERVER-IUCP
Generated on: 2025-07-10 13:20:09
========================================

--- START FILE: .gitignore ---
# Project exclude paths
/.venv/
--- END FILE: .gitignore ---

--- START FILE: BLOX-TAK-SERVER-IPPU_REJESTRACJA.csv ---
Sygnatura Czasowa:,Imię:,Nazwisko:,Adres E-Mail:,Nazwa Użytkownika:,Numer Telefonu:,Województwo:,Kod Pocztowy:,Miejscowość:

--- END FILE: BLOX-TAK-SERVER-IPPU_REJESTRACJA.csv ---

--- START FILE: BLOX-TAK-SERVER-IUCP_REGISTRATION.csv ---
Timestamp:,First Name:,Last Name:,E-Mail Address:,Username:,Phone Number:,Voivodeship:,Zip Code:,Place:

--- END FILE: BLOX-TAK-SERVER-IUCP_REGISTRATION.csv ---

--- START FILE: BLOX-TAK.svg ---
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 width="100%" viewBox="0 0 400 400" enable-background="new 0 0 400 400" xml:space="preserve">
<path fill="#161C2A" opacity="1.000000" stroke="none" 
	d="
M232.000000,401.000000 
	C154.666672,401.000000 77.833336,401.000000 1.000000,401.000000 
	C1.000000,267.666656 1.000000,134.333328 1.000000,1.000000 
	C134.333328,1.000000 267.666656,1.000000 401.000000,1.000000 
	C401.000000,134.333328 401.000000,267.666656 401.000000,401.000000 
	C344.833344,401.000000 288.666656,401.000000 232.000000,401.000000 
M61.488411,204.011642 
	C52.661346,233.474167 44.096497,263.019348 34.850719,292.349884 
	C32.000885,301.390442 39.411896,310.431854 48.160023,310.211151 
	C72.310295,309.601807 96.486107,310.033478 120.651459,309.949921 
	C123.107918,309.941406 124.531952,310.689514 126.256348,312.586365 
	C136.556854,323.916992 146.521896,335.671204 157.816696,345.945129 
	C168.600418,355.754150 180.670868,364.208923 192.577179,372.695770 
	C197.824020,376.435699 203.897202,378.244720 210.173157,373.469147 
	C221.303970,364.999298 233.269089,357.526215 243.775970,348.364105 
	C254.279297,339.205017 263.348480,328.412903 273.203064,318.492310 
	C276.881165,314.789551 278.745514,309.522278 286.186981,309.740784 
	C309.998749,310.439972 333.843994,310.007660 357.676300,309.995972 
	C364.791870,309.992462 370.821198,304.632385 369.785248,297.638397 
	C368.496124,288.935120 365.851379,280.401184 363.398254,271.907867 
	C357.007080,249.780243 350.495300,227.686066 343.808624,205.646194 
	C342.293945,200.653687 341.151520,195.110336 335.156830,192.890778 
	C334.484924,192.642014 333.955200,190.710037 334.124512,189.684952 
	C336.341522,176.259964 339.148804,162.916000 340.884613,149.432816 
	C342.497986,136.900818 343.156982,124.235786 343.934753,111.610764 
	C344.307037,105.567329 340.095428,100.007072 333.724060,98.900299 
	C324.989227,97.382957 315.976318,96.217644 307.792358,93.061226 
	C294.469482,87.922836 281.423828,81.856064 268.798492,75.166946 
	C248.870499,64.608757 231.181900,50.687550 214.397781,35.734974 
	C204.924652,27.295578 199.850891,26.526188 190.425354,35.180542 
	C173.655624,50.578167 155.403381,63.979706 135.769638,75.352852 
	C116.539429,86.492256 96.566597,96.057579 73.863358,98.045670 
	C65.111320,98.812065 59.539707,105.048874 60.044739,113.256943 
	C60.518478,120.956367 61.470875,128.626007 61.962864,136.324692 
	C63.075405,153.733841 65.456589,170.926422 69.883003,187.828751 
	C70.468987,190.066299 70.086929,192.083298 67.761993,194.135056 
	C65.150101,196.440063 63.831341,200.210373 61.488411,204.011642 
z"/>
<path fill="#FFFFFF" opacity="1.000000" stroke="none" 
	d="
M61.719208,203.677429 
	C63.831341,200.210373 65.150101,196.440063 67.761993,194.135056 
	C70.086929,192.083298 70.468987,190.066299 69.883003,187.828751 
	C65.456589,170.926422 63.075405,153.733841 61.962864,136.324692 
	C61.470875,128.626007 60.518478,120.956367 60.044739,113.256943 
	C59.539707,105.048874 65.111320,98.812065 73.863358,98.045670 
	C96.566597,96.057579 116.539429,86.492256 135.769638,75.352852 
	C155.403381,63.979706 173.655624,50.578167 190.425354,35.180542 
	C199.850891,26.526188 204.924652,27.295578 214.397781,35.734974 
	C231.181900,50.687550 248.870499,64.608757 268.798492,75.166946 
	C281.423828,81.856064 294.469482,87.922836 307.792358,93.061226 
	C315.976318,96.217644 324.989227,97.382957 333.724060,98.900299 
	C340.095428,100.007072 344.307037,105.567329 343.934753,111.610764 
	C343.156982,124.235786 342.497986,136.900818 340.884613,149.432816 
	C339.148804,162.916000 336.341522,176.259964 334.124512,189.684952 
	C333.955200,190.710037 334.484924,192.642014 335.156830,192.890778 
	C341.151520,195.110336 342.293945,200.653687 343.808624,205.646194 
	C350.495300,227.686066 357.007080,249.780243 363.398254,271.907867 
	C365.851379,280.401184 368.496124,288.935120 369.785248,297.638397 
	C370.821198,304.632385 364.791870,309.992462 357.676300,309.995972 
	C333.843994,310.007660 309.998749,310.439972 286.186981,309.740784 
	C278.745514,309.522278 276.881165,314.789551 273.203064,318.492310 
	C263.348480,328.412903 254.279297,339.205017 243.775970,348.364105 
	C233.269089,357.526215 221.303970,364.999298 210.173157,373.469147 
	C203.897202,378.244720 197.824020,376.435699 192.577179,372.695770 
	C180.670868,364.208923 168.600418,355.754150 157.816696,345.945129 
	C146.521896,335.671204 136.556854,323.916992 126.256348,312.586365 
	C124.531952,310.689514 123.107918,309.941406 120.651459,309.949921 
	C96.486107,310.033478 72.310295,309.601807 48.160023,310.211151 
	C39.411896,310.431854 32.000885,301.390442 34.850719,292.349884 
	C44.096497,263.019348 52.661346,233.474167 61.719208,203.677429 
M77.061356,171.223145 
	C79.364243,181.322449 81.667122,191.421768 84.021294,201.746033 
	C82.669212,201.840408 81.529175,201.973038 80.387337,201.990936 
	C73.482956,202.099197 72.881805,202.817032 70.983353,209.279236 
	C62.849461,236.966614 54.609814,264.623291 46.294304,292.256714 
	C44.280956,298.947327 44.897411,299.997833 52.054977,299.998840 
	C76.888237,300.002350 101.721764,300.054565 126.554382,299.928589 
	C129.518448,299.913544 131.191666,300.721405 132.947754,303.234314 
	C136.695328,308.597137 140.724152,313.843445 145.213150,318.593750 
	C161.315491,335.633362 178.219421,351.794220 198.883438,363.350861 
	C200.628220,364.326660 203.747574,364.582703 205.395706,363.669830 
	C210.497742,360.844025 215.299988,357.433044 220.035156,353.996429 
	C239.627991,339.776703 256.983246,323.288788 271.296570,303.646912 
	C272.671631,301.759949 275.836304,300.178467 278.187195,300.154999 
	C303.184601,299.905609 328.185516,300.015717 353.185394,299.988617 
	C358.983978,299.982330 360.051544,298.373230 358.330658,292.738922 
	C356.293579,286.069458 354.284790,279.390930 352.318390,272.700317 
	C346.833740,254.038879 341.294128,235.392975 335.936890,216.694916 
	C331.873962,202.514313 331.983490,202.486038 320.949463,201.890732 
	C320.696960,201.877106 320.460205,201.571640 320.778320,201.792297 
	C323.241669,189.071060 326.228180,176.716644 327.913513,164.187210 
	C330.142273,147.617630 331.330597,130.908829 333.017090,114.265030 
	C333.389954,110.585007 332.461151,108.685760 328.180847,108.877487 
	C325.152527,109.013130 322.051727,108.118111 319.020355,107.501076 
	C302.808533,104.201149 287.816315,97.782471 273.222443,90.103973 
	C251.863129,78.865898 232.203323,65.247917 213.973526,49.486950 
	C210.059662,46.103130 206.011978,42.874073 202.286194,39.789207 
	C195.361877,45.527382 189.337448,51.214943 182.632629,55.936291 
	C167.055222,66.905464 151.505722,77.989044 135.280579,87.943436 
	C117.698242,98.730492 98.381805,105.649239 77.930145,108.936951 
	C70.912849,110.065025 69.625870,111.553970 71.255951,118.603294 
	C71.476845,119.558533 71.865883,120.490730 71.966537,121.455551 
	C73.666641,137.751144 75.333366,154.050217 77.061356,171.223145 
z"/>
<path fill="#DC143C" opacity="1.000000" stroke="none" 
	d="
M77.034416,170.785828 
	C75.333366,154.050217 73.666641,137.751144 71.966537,121.455551 
	C71.865883,120.490730 71.476845,119.558533 71.255951,118.603294 
	C69.625870,111.553970 70.912849,110.065025 77.930145,108.936951 
	C98.381805,105.649239 117.698242,98.730492 135.280579,87.943436 
	C151.505722,77.989044 167.055222,66.905464 182.632629,55.936291 
	C189.337448,51.214943 195.361877,45.527382 202.286194,39.789207 
	C206.011978,42.874073 210.059662,46.103130 213.973526,49.486950 
	C232.203323,65.247917 251.863129,78.865898 273.222443,90.103973 
	C287.816315,97.782471 302.808533,104.201149 319.020355,107.501076 
	C322.051727,108.118111 325.152527,109.013130 328.180847,108.877487 
	C332.461151,108.685760 333.389954,110.585007 333.017090,114.265030 
	C331.330597,130.908829 330.142273,147.617630 327.913513,164.187210 
	C326.228180,176.716644 323.241669,189.071060 320.778320,201.792297 
	C320.460205,201.571640 320.696960,201.877106 320.949463,201.890732 
	C331.983490,202.486038 331.873962,202.514313 335.936890,216.694916 
	C341.294128,235.392975 346.833740,254.038879 352.318390,272.700317 
	C354.284790,279.390930 356.293579,286.069458 358.330658,292.738922 
	C360.051544,298.373230 358.983978,299.982330 353.185394,299.988617 
	C328.185516,300.015717 303.184601,299.905609 278.187195,300.154999 
	C275.836304,300.178467 272.671631,301.759949 271.296570,303.646912 
	C256.983246,323.288788 239.627991,339.776703 220.035156,353.996429 
	C215.299988,357.433044 210.497742,360.844025 205.395706,363.669830 
	C203.747574,364.582703 200.628220,364.326660 198.883438,363.350861 
	C178.219421,351.794220 161.315491,335.633362 145.213150,318.593750 
	C140.724152,313.843445 136.695328,308.597137 132.947754,303.234314 
	C131.191666,300.721405 129.518448,299.913544 126.554382,299.928589 
	C101.721764,300.054565 76.888237,300.002350 52.054977,299.998840 
	C44.897411,299.997833 44.280956,298.947327 46.294304,292.256714 
	C54.609814,264.623291 62.849461,236.966614 70.983353,209.279236 
	C72.881805,202.817032 73.482956,202.099197 80.387337,201.990936 
	C81.529175,201.973038 82.669212,201.840408 84.021294,201.746033 
	C81.667122,191.421768 79.364243,181.322449 77.034416,170.785828 
M150.909424,92.853920 
	C151.290894,94.115112 151.672363,95.376305 152.114182,96.836960 
	C149.257843,96.836960 147.131210,96.836960 146.402161,96.836960 
	C144.011505,99.124092 142.484451,100.585045 140.276138,102.243919 
	C123.210396,111.075874 105.593330,118.285538 86.186142,120.178749 
	C86.104324,121.218460 85.961143,121.873260 86.016029,122.511009 
	C87.351990,138.033936 88.300117,153.605804 90.217117,169.057297 
	C91.350159,178.189911 94.214935,187.095352 95.919884,196.174515 
	C96.772133,200.712891 98.706696,202.340302 103.459602,202.123352 
	C112.592422,201.706467 121.758293,201.941910 130.909409,202.023743 
	C136.700668,202.075546 142.490005,202.338852 148.477676,202.751678 
	C148.477676,202.751678 148.804657,202.799545 148.804657,202.799545 
	C148.804657,202.799545 149.106110,202.662857 149.777893,203.113068 
	C150.151566,204.788116 150.409821,206.500473 150.935410,208.126404 
	C151.355515,209.426025 151.817719,210.931580 152.764221,211.793167 
	C154.441147,213.319626 156.462189,214.487900 158.411850,215.688126 
	C159.799194,216.542191 161.305664,217.202789 163.183350,218.167831 
	C162.710022,212.478729 164.431244,208.417908 168.637863,206.438705 
	C169.713150,205.932785 172.474380,209.010162 174.084610,210.170090 
	C175.969009,209.393051 177.996841,208.556870 180.058701,208.500183 
	C180.168549,209.505096 180.401550,210.514709 180.363312,211.513947 
	C180.276459,213.783707 179.073822,217.213669 180.093811,218.073563 
	C182.246780,219.888657 185.583725,221.274658 188.342453,221.125565 
	C191.183304,220.972046 193.914246,218.784363 196.590378,217.534790 
	C196.986221,219.553024 197.418350,221.756241 196.947495,223.984344 
	C194.120575,223.990753 191.257355,223.736191 188.483170,224.121918 
	C187.236282,224.295288 185.336441,225.594116 185.141678,226.643677 
	C182.002686,243.559860 179.090866,260.518188 176.080093,277.738098 
	C182.260391,277.738098 188.344986,277.738098 194.748398,277.738098 
	C195.307892,274.617889 195.871902,271.472473 196.443420,268.285278 
	C198.932388,268.285278 201.336288,268.285278 203.526566,268.285278 
	C204.181534,271.715637 204.778000,274.839600 205.345886,277.813843 
	C211.810059,277.813843 217.768112,277.813843 223.741592,277.813843 
	C220.076965,259.758698 216.449554,241.886948 212.802658,223.919205 
	C209.706009,223.919205 207.219223,223.919205 204.779160,223.023666 
	C204.836029,220.888077 204.892899,218.752472 205.709854,216.503311 
	C208.078201,217.963684 210.286285,219.893677 212.853958,220.770050 
	C216.361450,221.967209 219.769882,221.229645 222.089767,217.851273 
	C224.465439,214.391663 222.366257,211.960724 220.300140,209.764191 
	C220.936386,208.088211 221.513062,206.569183 222.798798,205.048584 
	C224.710098,206.846756 226.621414,208.644913 228.229446,210.157776 
	C229.596054,208.063644 230.228470,206.042267 231.181686,205.877563 
	C232.656433,205.622742 235.028961,206.137405 235.817276,207.210175 
	C237.766846,209.863266 239.033585,213.018127 240.635742,216.088257 
	C244.593842,214.965271 245.197311,211.981247 245.088074,207.909363 
	C245.231964,207.753586 245.375854,207.597824 245.962128,207.951172 
	C246.726959,209.071136 247.491791,210.191101 248.268005,211.327744 
	C252.378052,207.088974 252.396255,205.159927 248.415955,202.582565 
	C249.561172,202.055115 250.693634,201.533554 252.316574,201.752274 
	C270.410461,201.752274 288.504333,201.752274 306.738708,201.752274 
	C314.389801,175.125061 317.837494,147.945618 318.658356,121.490410 
	C307.660370,118.316002 296.868134,115.915092 286.630371,112.046799 
	C276.223419,108.114548 266.363037,102.735832 255.841110,97.315605 
	C252.808884,96.786140 250.116302,95.942070 250.475037,91.959335 
	C250.490570,91.786835 249.508133,91.524452 248.291000,91.141846 
	C247.340790,91.161774 246.390564,91.181702 245.001694,90.590912 
	C230.437027,79.907471 215.872345,69.224022 202.111206,59.129978 
	C187.914032,69.726974 173.522400,80.469116 158.572983,91.148460 
	C158.394745,91.204117 158.216492,91.259781 157.374237,91.101692 
	C156.914520,91.083603 156.454788,91.065514 155.540009,90.809387 
	C155.372910,90.846504 155.205795,90.883629 154.470306,90.577614 
	C150.808533,89.844841 150.808533,89.844841 150.909424,92.853920 
M239.018372,319.474731 
	C245.086212,313.396851 251.154037,307.319000 258.035583,300.426086 
	C220.272659,300.426086 184.207474,300.426086 147.500153,300.426086 
	C150.707947,304.214417 153.284332,307.595520 156.204620,310.647614 
	C169.302856,324.337006 183.731903,336.433289 199.949921,346.285828 
	C201.022751,346.937622 203.334061,346.887756 204.312241,346.154449 
	C215.797119,337.544403 227.137085,328.741028 239.018372,319.474731 
M255.999496,260.806396 
	C255.999496,259.121948 255.999496,257.437500 255.999496,255.753067 
	C256.324127,255.719131 256.648773,255.685196 256.973419,255.651260 
	C259.489197,263.073059 262.004974,270.494843 264.414398,277.602844 
	C270.803558,277.602844 276.830811,277.602844 283.503723,277.602844 
	C280.630676,270.617157 278.254883,264.068359 275.272003,257.808929 
	C272.394958,251.771667 271.319946,246.159409 274.910950,239.928986 
	C277.716248,235.061829 279.683594,229.711716 282.285553,224.000519 
	C277.908112,224.000519 274.066711,224.415863 270.357361,223.893402 
	C265.907257,223.266602 264.316650,225.588028 262.996521,229.102203 
	C261.156464,234.000397 259.038666,238.794250 257.039734,243.632751 
	C256.686432,243.556702 256.333160,243.480652 255.979858,243.404602 
	C255.979858,237.060226 255.979858,230.715851 255.979858,224.307343 
	C249.747742,224.307343 244.024338,224.307343 238.346954,224.307343 
	C238.346954,242.337296 238.346954,260.058258 238.346954,277.608490 
	C244.428207,277.608490 250.156494,277.608490 255.999496,277.608490 
	C255.999496,272.056671 255.999496,266.895111 255.999496,260.806396 
M143.456421,277.999542 
	C145.881393,277.999542 148.306366,277.999542 151.182510,277.999542 
	C151.182510,262.992371 151.182510,248.618149 151.182510,233.771912 
	C155.040359,233.771912 158.436844,233.771912 161.783234,233.771912 
	C161.783234,230.345245 161.783234,227.406372 161.783234,224.238342 
	C148.196060,224.238342 134.824860,224.238342 121.261543,224.238342 
	C121.261543,227.513443 121.261543,230.567322 121.261543,233.390717 
	C125.211586,233.982910 130.589783,233.293167 132.103622,235.391449 
	C134.035233,238.068771 132.846024,242.998291 132.998810,246.957169 
	C133.011627,247.289169 133.000519,247.622070 133.000519,247.954559 
	C133.000519,257.866058 133.000504,267.777557 133.000504,277.999542 
	C136.554794,277.999542 139.521133,277.999542 143.456421,277.999542 
z"/>
<path fill="#189DD5" opacity="1.000000" stroke="none" 
	d="
M256.263306,97.990540 
	C266.363037,102.735832 276.223419,108.114548 286.630371,112.046799 
	C296.868134,115.915092 307.660370,118.316002 318.658356,121.490410 
	C317.837494,147.945618 314.389801,175.125061 306.738708,201.752274 
	C288.504333,201.752274 270.410461,201.752274 252.166473,200.991547 
	C251.522034,195.424347 250.052292,194.769470 245.801605,195.983582 
	C242.579544,196.903885 239.018051,196.635818 235.674042,196.676178 
	C235.627914,196.105881 235.388992,195.952026 234.815109,195.755051 
	C233.963577,194.982758 233.320648,194.449631 232.687164,193.712311 
	C232.537323,193.245102 232.304642,193.128571 231.825089,192.880157 
	C231.001099,191.730469 230.350555,190.859100 229.679657,189.693436 
	C228.840744,188.877808 228.022217,188.356476 227.175446,187.868500 
	C227.147217,187.901855 227.229919,187.930115 227.197662,187.591873 
	C226.765686,186.524963 226.365952,185.796295 225.970490,185.033890 
	C225.974792,185.000153 225.912643,185.027786 225.812500,184.828430 
	C225.525558,184.374039 225.275482,184.225616 224.961166,184.108734 
	C224.960205,184.033676 224.810318,184.042694 224.735107,183.844696 
	C224.493347,183.395218 224.260864,183.247406 223.964294,183.131653 
	C223.966125,183.060028 223.822983,183.066223 223.690308,182.816315 
	C223.048218,182.340363 222.538788,182.114304 222.187622,181.578918 
	C223.567123,180.825012 224.853592,180.494629 225.965973,179.859390 
	C226.261826,179.690430 226.023636,178.586288 225.852097,177.660126 
	C225.493027,177.310440 225.312485,177.212173 225.163086,176.729980 
	C225.430405,175.893951 225.666550,175.441833 226.198730,174.726929 
	C227.671234,174.296707 228.847717,174.129288 230.321106,174.147034 
	C232.722031,177.679260 234.826019,181.026337 237.202576,184.546051 
	C238.056412,183.098770 238.840485,181.519745 239.177078,179.850494 
	C239.897079,176.279938 240.385605,172.662689 241.061646,169.394043 
	C242.351746,171.510605 243.264450,173.618790 244.821976,174.999664 
	C246.582886,176.560837 248.922867,177.468857 251.211853,178.602356 
	C251.694672,178.463791 251.915665,178.300949 252.069214,178.047638 
	C252.062775,178.039993 252.083511,178.070038 252.392899,178.072601 
	C252.543091,177.220657 252.590500,176.250641 252.188644,175.531784 
	C250.522232,172.550781 248.720139,169.645645 247.298035,166.830948 
	C250.426331,168.970230 253.224426,170.991196 256.289185,173.272461 
	C257.343109,172.640549 258.952728,171.542572 258.789032,170.888321 
	C257.322754,165.028580 255.544281,159.246979 254.216309,153.636856 
	C256.279785,154.441635 257.996094,155.575623 259.686707,155.538605 
	C262.177917,155.484085 264.650879,154.595139 267.097534,154.044937 
	C267.063446,154.028275 267.052338,154.103333 267.279175,154.005295 
	C267.334412,153.623795 267.162872,153.340317 266.716125,152.832031 
	C263.252319,151.110855 260.063690,149.614502 256.972504,148.022034 
	C257.069916,147.925919 257.263916,147.732834 257.696350,147.712585 
	C261.709351,147.087585 265.289917,146.482819 268.906097,145.536591 
	C266.126434,142.459167 263.311127,139.723190 260.904419,136.945465 
	C263.287292,136.112518 265.374176,135.507111 267.168915,134.419571 
	C267.724548,134.082886 267.485870,132.435333 267.610840,131.387955 
	C267.068146,131.558121 266.525482,131.728271 265.664856,131.946930 
	C264.918640,131.982361 264.490356,131.969284 263.998108,131.630463 
	C263.969574,130.865005 264.004944,130.425293 264.362671,129.850281 
	C265.920166,128.721817 267.155365,127.728622 269.031769,126.219826 
	C266.078308,124.720345 263.796783,123.562004 261.877380,122.587517 
	C263.374359,120.534531 264.957275,118.363747 267.256287,115.210854 
	C264.198853,115.578407 262.810944,115.745262 261.213806,115.937263 
	C262.366516,114.010162 263.347748,112.369774 264.697174,110.113800 
	C261.850311,109.579292 259.644073,109.165062 257.188904,108.704094 
	C257.681152,107.305977 258.614868,105.888985 258.494293,104.568260 
	C258.411987,103.666824 256.857330,102.899834 255.692093,101.723038 
	C255.703247,100.245750 255.983261,99.118141 256.263306,97.990540 
z"/>
<path fill="#189DD5" opacity="1.000000" stroke="none" 
	d="
M148.280212,202.507294 
	C142.490005,202.338852 136.700668,202.075546 130.909409,202.023743 
	C121.758293,201.941910 112.592422,201.706467 103.459602,202.123352 
	C98.706696,202.340302 96.772133,200.712891 95.919884,196.174515 
	C94.214935,187.095352 91.350159,178.189911 90.217117,169.057297 
	C88.300117,153.605804 87.351990,138.033936 86.016029,122.511009 
	C85.961143,121.873260 86.104324,121.218460 86.186142,120.178749 
	C105.593330,118.285538 123.210396,111.075874 140.698410,102.539856 
	C141.507416,104.498306 141.894150,106.160835 142.339539,108.075493 
	C140.289825,108.420708 138.462830,108.493637 136.858948,109.129402 
	C136.317825,109.343895 136.342484,110.985695 136.175995,112.211899 
	C136.435074,112.739227 136.701279,112.920197 137.116241,113.224861 
	C137.393066,113.744705 137.669281,113.901909 138.010254,113.960434 
	C138.001389,113.991081 138.061813,113.970612 138.165909,114.266197 
	C138.512634,115.117653 138.755264,115.673515 139.245438,116.796463 
	C137.263443,115.746162 135.805954,114.973801 134.348450,114.201439 
	C134.002991,114.488388 133.657547,114.775337 133.312088,115.062286 
	C134.503479,116.776024 135.694855,118.489769 136.856598,120.547516 
	C134.839264,122.105362 132.851593,123.319199 130.249695,124.908127 
	C133.037903,127.041023 135.321915,128.788239 138.093979,130.908783 
	C135.709549,130.908783 133.951736,130.908783 131.772781,130.908783 
	C132.893326,136.593185 137.544006,135.449234 141.069702,136.172668 
	C137.490417,139.345184 134.048080,142.396332 130.605743,145.447464 
	C130.890854,146.098297 131.175964,146.749130 131.461060,147.399963 
	C134.969040,147.207092 138.477020,147.014221 142.223755,146.889984 
	C142.462524,146.958588 142.955933,147.020416 142.901245,147.360901 
	C139.897598,149.463867 136.948639,151.226349 133.666229,152.945099 
	C132.938492,153.594177 132.544205,154.287018 132.149918,154.979843 
	C134.132126,155.442581 136.135757,156.349380 138.091095,156.255035 
	C140.503769,156.138611 142.876282,155.189392 144.904358,154.826324 
	C141.623428,160.885376 137.595200,166.409851 139.489258,174.866013 
	C144.298630,171.522995 148.566010,168.556717 152.833374,165.590439 
	C153.181732,165.804977 153.530090,166.019501 153.878448,166.234039 
	C151.782318,170.024780 149.686203,173.815506 147.780029,177.705566 
	C147.969971,177.804871 147.608109,177.574936 147.418900,177.639648 
	C147.229691,177.704376 147.015625,178.042191 146.718872,178.138336 
	C145.815216,178.878555 145.208313,179.522629 144.054565,180.746994 
	C152.205307,181.085098 154.730835,174.844528 159.652893,170.811920 
	C159.652893,175.726318 159.652893,180.640717 159.652893,185.555115 
	C160.173798,185.727173 160.694702,185.899231 161.215607,186.071289 
	C162.987396,183.647385 164.759186,181.223465 166.673721,178.629456 
	C166.816467,178.459351 166.941574,178.033188 166.979004,178.035614 
	C167.016418,178.038025 167.028152,177.963943 167.308289,177.860184 
	C167.712524,177.181168 167.836609,176.605896 167.988739,176.031067 
	C168.016800,176.031494 168.019348,175.975433 168.301422,175.868317 
	C168.723724,175.183823 168.863968,174.606461 169.008057,174.020508 
	C169.011887,174.011902 169.029709,174.005890 169.301605,173.935425 
	C170.040146,173.600784 170.506790,173.336609 170.981140,173.436798 
	C170.939026,174.523849 170.889206,175.246521 170.636627,176.231476 
	C171.942337,177.004654 173.450790,177.515549 174.981232,178.016663 
	C175.003204,178.006866 174.964890,178.038940 174.927246,178.254333 
	C174.889618,178.469727 174.926132,178.905426 174.875656,179.151535 
	C174.797104,179.562759 174.769028,179.727890 174.543304,179.941238 
	C174.082443,180.102997 173.895111,180.291824 173.535446,180.718964 
	C173.520935,181.270737 173.754639,181.659470 174.253296,182.271500 
	C175.644135,182.694290 176.770035,182.893753 177.814636,183.423126 
	C173.479294,188.922195 169.225220,194.091370 164.582581,199.169281 
	C162.098450,198.729828 159.937454,198.598114 157.921005,197.988327 
	C153.741364,196.724396 150.963867,198.103256 149.154587,202.008713 
	C149.053909,202.025513 149.014984,202.225937 148.808960,202.237915 
	C148.602921,202.249908 148.280212,202.507278 148.280212,202.507294 
z"/>
<path fill="#169DD5" opacity="1.000000" stroke="none" 
	d="
M238.766815,319.731689 
	C227.137085,328.741028 215.797119,337.544403 204.312241,346.154449 
	C203.334061,346.887756 201.022751,346.937622 199.949921,346.285828 
	C183.731903,336.433289 169.302856,324.337006 156.204620,310.647614 
	C153.284332,307.595520 150.707947,304.214417 147.500153,300.426086 
	C184.207474,300.426086 220.272659,300.426086 258.035583,300.426086 
	C251.154037,307.319000 245.086212,313.396851 238.766815,319.731689 
z"/>
<path fill="#1C9ED5" opacity="1.000000" stroke="none" 
	d="
M159.130783,91.211258 
	C173.522400,80.469116 187.914032,69.726974 202.111206,59.129978 
	C215.872345,69.224022 230.437027,79.907471 244.878387,91.108574 
	C243.762436,91.996925 242.769806,92.367615 241.633804,92.676071 
	C241.262177,92.655106 241.107895,92.784668 240.655151,93.014572 
	C235.530518,95.766258 230.778351,98.505875 225.818390,101.288086 
	C225.338318,101.478645 225.188568,101.706963 224.856339,102.168762 
	C222.380142,105.300705 220.208939,108.279526 217.902191,111.294327 
	C217.570663,111.466537 217.546463,111.628342 217.448608,112.103485 
	C216.790833,113.566681 216.378464,114.742126 215.763214,116.112518 
	C215.478836,116.848206 215.397324,117.388947 215.218628,118.315857 
	C215.190674,119.489075 215.259933,120.276138 215.289566,121.340881 
	C215.487335,122.105965 215.724731,122.593361 215.996613,123.415215 
	C217.317749,124.847702 218.604431,125.945724 220.121399,127.226730 
	C220.925537,127.537659 221.499374,127.665596 222.083099,128.182999 
	C222.044205,129.349564 221.995392,130.126663 221.640305,131.115295 
	C219.373596,132.071243 217.413147,132.815674 215.549301,133.523422 
	C214.546524,130.387863 213.833435,128.158066 212.976074,125.583801 
	C213.067993,120.335472 213.479019,115.431892 213.486923,110.527657 
	C213.493668,106.342361 213.037186,102.156326 212.854630,97.608955 
	C211.355545,94.807434 209.787445,92.367577 208.286743,89.587814 
	C209.674545,85.858841 210.994965,82.469780 212.315369,79.080719 
	C206.941818,82.447952 203.931595,78.586349 200.511307,75.605530 
	C197.807144,79.734261 194.613556,81.894821 189.308441,78.619698 
	C190.812317,83.026840 191.968948,86.416374 192.896423,90.041809 
	C191.793533,91.449326 190.919815,92.620949 189.692688,93.892441 
	C185.378082,95.277672 185.731720,97.958885 186.776215,101.109268 
	C185.476486,101.695961 184.484741,102.136620 183.462021,102.591042 
	C186.650253,106.550133 190.413040,104.635368 194.354736,104.017242 
	C195.112244,104.179565 195.553589,104.237152 196.268402,104.502792 
	C201.087708,107.858864 201.366653,110.846046 197.587402,114.634415 
	C196.622253,115.601875 195.994827,116.896790 195.113495,117.959366 
	C193.369263,120.062340 191.504532,122.066849 189.797638,124.198563 
	C189.141098,125.018494 188.779083,126.074257 188.266037,127.292618 
	C188.158157,128.096451 188.067139,128.630249 187.832733,129.223114 
	C187.489639,129.447647 187.470749,129.631683 187.426971,130.172348 
	C187.133026,131.292007 187.044815,132.073624 186.650101,132.953247 
	C185.932739,133.173676 185.521866,133.296097 184.745453,133.279572 
	C178.514679,131.211319 177.778259,129.741364 181.284576,126.581711 
	C181.763504,126.501022 181.940720,126.306343 182.011169,126.011803 
	C182.003769,126.002449 182.026611,126.017464 182.372833,125.920143 
	C186.711090,121.352966 187.154175,116.797371 183.746124,110.873428 
	C178.209702,101.249939 169.873764,95.104874 159.260315,91.720207 
	C159.209991,91.552460 159.130783,91.211266 159.130783,91.211258 
z"/>
<path fill="#169DD5" opacity="1.000000" stroke="none" 
	d="
M255.999496,261.269958 
	C255.999496,266.895111 255.999496,272.056671 255.999496,277.608490 
	C250.156494,277.608490 244.428207,277.608490 238.346954,277.608490 
	C238.346954,260.058258 238.346954,242.337296 238.346954,224.307343 
	C244.024338,224.307343 249.747742,224.307343 255.979858,224.307343 
	C255.979858,230.715851 255.979858,237.060226 255.979858,243.404602 
	C256.333160,243.480652 256.686432,243.556702 257.039734,243.632751 
	C259.038666,238.794250 261.156464,234.000397 262.996521,229.102203 
	C264.316650,225.588028 265.907257,223.266602 270.357361,223.893402 
	C274.066711,224.415863 277.908112,224.000519 282.285553,224.000519 
	C279.683594,229.711716 277.716248,235.061829 274.910950,239.928986 
	C271.319946,246.159409 272.394958,251.771667 275.272003,257.808929 
	C278.254883,264.068359 280.630676,270.617157 283.503723,277.602844 
	C276.830811,277.602844 270.803558,277.602844 264.414398,277.602844 
	C262.004974,270.494843 259.489197,263.073059 256.973419,255.651260 
	C256.648773,255.685196 256.324127,255.719131 255.999496,255.753067 
	C255.999496,257.437500 255.999496,259.121948 255.999496,261.269958 
z"/>
<path fill="#169DD5" opacity="1.000000" stroke="none" 
	d="
M204.732437,223.919205 
	C207.219223,223.919205 209.706009,223.919205 212.802658,223.919205 
	C216.449554,241.886948 220.076965,259.758698 223.741592,277.813843 
	C217.768112,277.813843 211.810059,277.813843 205.345886,277.813843 
	C204.778000,274.839600 204.181534,271.715637 203.526566,268.285278 
	C201.336288,268.285278 198.932388,268.285278 196.443420,268.285278 
	C195.871902,271.472473 195.307892,274.617889 194.748398,277.738098 
	C188.344986,277.738098 182.260391,277.738098 176.080093,277.738098 
	C179.090866,260.518188 182.002686,243.559860 185.141678,226.643677 
	C185.336441,225.594116 187.236282,224.295288 188.483170,224.121918 
	C191.257355,223.736191 194.120575,223.990753 197.559158,224.264648 
	C198.798996,225.693481 199.427185,226.841995 200.111389,228.283600 
	C202.571304,229.144150 202.609467,229.103012 203.761917,224.652908 
	C203.881271,224.475464 203.997452,224.063843 204.189758,224.070343 
	C204.382050,224.076843 204.732437,223.919205 204.732437,223.919205 
M199.006577,242.969894 
	C198.311371,247.874359 197.616150,252.778824 196.921844,257.676849 
	C199.261292,257.676849 200.935196,257.676849 202.380188,257.676849 
	C201.899384,253.177017 201.547318,248.950104 200.924454,244.763474 
	C200.783676,243.817184 199.700867,243.011032 199.006577,242.969894 
z"/>
<path fill="#169DD5" opacity="1.000000" stroke="none" 
	d="
M142.971954,277.999542 
	C139.521133,277.999542 136.554794,277.999542 133.000504,277.999542 
	C133.000504,267.777557 133.000519,257.866058 133.000519,247.954559 
	C133.000519,247.622070 133.011627,247.289169 132.998810,246.957169 
	C132.846024,242.998291 134.035233,238.068771 132.103622,235.391449 
	C130.589783,233.293167 125.211586,233.982910 121.261543,233.390717 
	C121.261543,230.567322 121.261543,227.513443 121.261543,224.238342 
	C134.824860,224.238342 148.196060,224.238342 161.783234,224.238342 
	C161.783234,227.406372 161.783234,230.345245 161.783234,233.771912 
	C158.436844,233.771912 155.040359,233.771912 151.182510,233.771912 
	C151.182510,248.618149 151.182510,262.992371 151.182510,277.999542 
	C148.306366,277.999542 145.881393,277.999542 142.971954,277.999542 
z"/>
<path fill="#F8F8FA" opacity="1.000000" stroke="none" 
	d="
M159.310654,91.887955 
	C169.873764,95.104874 178.209702,101.249939 183.746124,110.873428 
	C187.154175,116.797371 186.711090,121.352966 182.180908,125.689400 
	C181.084763,125.365631 180.526764,125.175278 179.981934,124.571640 
	C180.688934,119.146317 177.073608,116.156166 174.388031,112.862541 
	C173.825363,112.172447 171.544250,112.406174 170.290970,112.862396 
	C168.117203,113.653702 166.127655,114.951057 164.060837,116.036194 
	C163.865082,115.692062 163.669327,115.347939 163.473572,115.003807 
	C162.979202,116.001953 162.484848,117.000107 161.737305,117.995766 
	C161.315369,117.991043 161.146606,117.988800 160.863953,117.783409 
	C160.555756,117.328697 160.312714,117.139824 159.726273,116.979431 
	C158.954193,116.629608 158.476791,116.314011 157.999435,115.625481 
	C157.999863,114.507195 158.000229,113.761833 158.071075,112.692238 
	C160.196518,112.075363 162.251495,111.782722 164.306473,111.490082 
	C164.547531,111.031517 164.788589,110.572952 165.029663,110.114380 
	C157.346405,108.923653 148.917053,108.814880 146.476242,98.439148 
	C149.682022,98.658157 152.333328,98.839294 155.040070,99.130089 
	C155.095520,99.239754 155.409897,99.244850 155.409897,99.244850 
	C155.409897,99.244850 155.021973,98.983070 154.974884,98.626572 
	C155.283539,95.862526 155.639313,93.454971 155.995071,91.047424 
	C156.454788,91.065514 156.914520,91.083603 157.878555,91.378159 
	C158.665985,91.836342 158.975235,91.914116 159.310654,91.887955 
M181.623734,112.259476 
	C181.282471,111.447914 180.941193,110.636360 180.599915,109.824799 
	C180.267487,110.158783 179.935059,110.492775 179.602631,110.826767 
	C180.661758,114.560234 181.720886,118.293709 182.780014,122.027184 
	C183.263809,121.916153 183.747589,121.805122 184.231369,121.694092 
	C183.470215,118.763298 182.709061,115.832512 181.623734,112.259476 
M177.513474,107.435989 
	C177.513474,107.435989 177.560577,107.523987 177.513474,107.435989 
M161.496368,113.566994 
	C161.496368,113.566994 161.444550,113.475533 161.496368,113.566994 
z"/>
<path fill="#EEE9E8" opacity="1.000000" stroke="none" 
	d="
M232.677719,193.916519 
	C233.320648,194.449631 233.963577,194.982758 234.874039,195.928314 
	C235.248535,196.566589 235.403885,196.751862 235.607605,196.896576 
	C239.018051,196.635818 242.579544,196.903885 245.801605,195.983582 
	C250.052292,194.769470 251.522034,195.424347 251.921219,200.621399 
	C250.693634,201.533554 249.561172,202.055115 248.415955,202.582565 
	C252.396255,205.159927 252.378052,207.088974 248.268005,211.327744 
	C247.491791,210.191101 246.726959,209.071136 245.586319,207.501526 
	C244.965118,206.801926 244.667480,206.668640 244.069855,206.441620 
	C243.043396,206.272964 242.264664,206.314728 241.485916,206.356491 
	C241.478516,206.539948 241.471100,206.723419 241.463699,206.906876 
	C242.192917,207.041443 242.922150,207.175995 243.725616,207.559204 
	C244.082184,207.994415 244.364502,208.181015 244.646820,208.367615 
	C245.197311,211.981247 244.593842,214.965271 240.635742,216.088257 
	C239.033585,213.018127 237.766846,209.863266 235.817276,207.210175 
	C235.028961,206.137405 232.656433,205.622742 231.181686,205.877563 
	C230.228470,206.042267 229.596054,208.063644 228.229446,210.157776 
	C226.621414,208.644913 224.710098,206.846756 222.174133,204.767044 
	C221.465881,203.468704 221.382309,202.451904 221.650024,201.614288 
	C224.436905,201.566269 226.872513,201.339081 229.734512,201.072113 
	C225.439606,195.636185 221.698227,190.900833 217.856354,185.907074 
	C217.505508,185.378464 217.255173,185.108261 216.944672,184.472992 
	C216.526810,182.147736 216.169098,180.187576 215.678391,177.498520 
	C217.291290,178.710342 218.152847,179.357666 219.300293,179.974075 
	C220.052750,179.644287 220.519302,179.345398 221.376999,179.037903 
	C223.188965,178.656693 224.609802,178.284103 226.030624,177.911514 
	C226.023636,178.586288 226.261826,179.690430 225.965973,179.859390 
	C224.853592,180.494629 223.567123,180.825012 222.331558,181.821838 
	C222.819153,182.604797 223.321075,182.835510 223.822983,183.066223 
	C223.822983,183.066223 223.966125,183.060028 224.080322,183.295502 
	C224.369995,183.737396 224.575256,183.907974 224.810318,184.042694 
	C224.810318,184.042694 224.960205,184.033676 225.089417,184.281067 
	C225.415253,184.743179 225.646576,184.909622 225.912643,185.027786 
	C225.912643,185.027786 225.974792,185.000153 225.984863,185.371155 
	C226.406601,186.471481 226.818268,187.200790 227.229919,187.930115 
	C227.229919,187.930115 227.147217,187.901855 226.996399,188.100693 
	C225.954773,190.014511 225.954773,190.014511 229.700027,189.987747 
	C230.350555,190.859100 231.001099,191.730469 231.909103,193.030823 
	C232.300537,193.652802 232.470917,193.805038 232.677719,193.916519 
z"/>
<path fill="#FAFAFB" opacity="1.000000" stroke="none" 
	d="
M226.026199,101.245491 
	C230.778351,98.505875 235.530518,95.766258 240.787109,92.990631 
	C241.464355,92.907021 241.626221,92.834908 241.777161,92.738297 
	C242.769806,92.367615 243.762436,91.996925 245.097717,91.413933 
	C246.390564,91.181702 247.340790,91.161774 248.626709,91.576828 
	C247.966629,94.668510 246.970840,97.325211 245.771759,100.106888 
	C245.314041,100.434021 245.119263,100.682877 244.777771,101.102242 
	C244.315048,101.430122 244.119797,101.681610 243.873138,102.034439 
	C243.760605,102.088341 243.753860,102.406418 243.753860,102.406418 
	C243.753860,102.406418 244.018478,102.013420 244.224472,101.889450 
	C244.689301,101.564156 244.885986,101.313972 245.224487,100.890900 
	C245.683426,100.565712 245.879822,100.318054 246.381042,99.967896 
	C248.860901,99.251854 250.977295,98.591827 254.082230,97.623520 
	C252.158371,100.127464 251.089127,101.519119 249.799347,103.047203 
	C249.379547,103.460030 249.180283,103.736420 248.991928,104.007690 
	C249.002823,104.002571 249.012512,103.980545 248.782532,104.084641 
	C248.364334,104.460693 248.176117,104.732651 247.995178,105.003418 
	C248.002441,105.002228 248.004410,104.987701 247.774567,105.085464 
	C247.255478,105.381630 247.071777,105.651802 246.996826,105.996872 
	C247.000000,106.000000 246.994598,105.991714 246.689240,106.005417 
	C245.912369,106.373642 245.440887,106.728165 244.971451,107.377640 
	C244.972427,108.065849 244.971329,108.459114 244.923294,109.136330 
	C244.829865,109.605431 244.783386,109.790581 244.410522,109.988297 
	C243.057770,110.657150 242.031403,111.313454 240.680222,112.130386 
	C237.324478,112.995239 234.446777,113.397820 233.880768,108.836349 
	C233.602768,108.347679 233.367218,108.140785 232.752136,108.146042 
	C231.295441,108.561104 230.161057,108.829170 229.016663,108.702515 
	C228.832306,106.992462 228.657944,105.677147 228.404144,103.762512 
	C222.917252,107.420723 220.957825,112.306816 219.438492,117.354706 
	C218.270767,121.234390 219.482666,123.881790 224.401764,123.939697 
	C225.394867,123.403351 226.436325,122.986534 226.638809,122.316269 
	C227.564758,119.250999 228.255524,116.114693 229.127350,113.230507 
	C229.401337,113.755676 229.657471,113.951103 229.985687,114.017105 
	C229.979065,113.990822 229.939682,114.028061 229.941498,114.397736 
	C230.640640,116.829514 231.337982,118.891617 231.886063,121.263962 
	C229.961487,124.683357 228.045792,127.623550 223.755905,127.891777 
	C223.037384,127.529655 222.564056,127.276978 221.723938,126.997055 
	C220.868469,126.994453 220.379791,127.019104 219.891098,127.043747 
	C218.604431,125.945724 217.317749,124.847702 215.998566,123.140816 
	C215.753754,122.042374 215.541473,121.552788 215.329193,121.063202 
	C215.259933,120.276138 215.190674,119.489075 215.393921,118.106064 
	C215.766312,116.979279 215.866211,116.448425 215.966095,115.917580 
	C216.378464,114.742126 216.790833,113.566681 217.515640,112.018738 
	C217.828079,111.646248 218.037735,111.258354 218.037735,111.258354 
	C220.208939,108.279526 222.380142,105.300705 225.027588,102.073486 
	C225.720306,101.670090 225.894440,101.476898 226.026199,101.245491 
M240.770142,104.094383 
	C240.770142,104.094383 240.758865,104.401047 240.758865,104.401047 
	C240.758865,104.401047 241.008347,104.006271 241.229645,103.903755 
	C241.229645,103.903755 241.242477,103.600883 241.242477,103.600883 
	C241.242477,103.600883 240.993759,103.991745 240.770142,104.094383 
M238.380127,101.270081 
	C237.321182,102.136612 236.262238,103.003151 235.203293,103.869690 
	C235.795364,104.307632 236.387451,104.745575 236.979523,105.183525 
	C237.659592,103.793922 238.339645,102.404327 239.238495,100.905731 
	C239.238495,100.905731 239.246429,100.595703 239.246429,100.595703 
	C239.246429,100.595703 238.985672,100.981033 238.380127,101.270081 
M240.488907,108.551491 
	C240.488907,108.551491 240.454071,108.481583 240.488907,108.551491 
M234.445572,106.490112 
	C234.445572,106.490112 234.519928,106.452271 234.445572,106.490112 
z"/>
<path fill="#F0E9E9" opacity="1.000000" stroke="none" 
	d="
M164.971146,199.260544 
	C169.225220,194.091370 173.479294,188.922195 177.836243,183.375183 
	C177.939148,182.997360 178.027298,182.940079 178.389557,182.952271 
	C182.963974,181.348007 183.559402,184.263702 183.940674,187.519928 
	C179.933884,192.436340 176.094070,197.071320 171.888412,202.147888 
	C174.322815,203.117813 175.660446,203.650742 177.062592,204.477615 
	C178.092957,205.754593 179.058807,206.737625 180.024658,207.720673 
	C177.996841,208.556870 175.969009,209.393051 174.084610,210.170090 
	C172.474380,209.010162 169.713150,205.932785 168.637863,206.438705 
	C164.431244,208.417908 162.710022,212.478729 163.183350,218.167831 
	C161.305664,217.202789 159.799194,216.542191 158.411850,215.688126 
	C156.462189,214.487900 154.441147,213.319626 152.764221,211.793167 
	C151.817719,210.931580 151.355515,209.426025 150.935410,208.126404 
	C150.409821,206.500473 150.151566,204.788116 149.436523,202.775055 
	C149.095139,202.437042 149.014984,202.225937 149.014984,202.225937 
	C149.014984,202.225937 149.053909,202.025513 149.493866,202.037292 
	C155.230377,202.651642 160.453461,202.858063 164.971146,199.260544 
z"/>
<path fill="#F6F1F3" opacity="1.000000" stroke="none" 
	d="
M180.041687,208.110428 
	C179.058807,206.737625 178.092957,205.754593 177.390015,204.319000 
	C179.680771,202.987991 182.767319,200.810760 183.555420,201.453201 
	C187.199890,204.423981 190.410583,202.751129 193.864700,202.008072 
	C193.938370,202.934311 193.966751,203.464706 193.593262,204.009735 
	C191.249268,204.354126 189.306732,204.964066 187.365051,204.961273 
	C181.459885,204.952789 180.979614,205.626999 183.419098,211.812164 
	C186.210220,216.088623 188.566147,215.780045 192.454193,210.931839 
	C193.534256,209.594315 194.267120,208.297150 195.250244,207.000214 
	C195.667297,207.000320 195.834122,207.000183 196.352493,207.046494 
	C198.513565,208.763107 200.323105,210.433258 202.107132,212.421951 
	C202.720230,216.514938 203.358841,220.289383 203.997452,224.063843 
	C203.997452,224.063843 203.881271,224.475464 203.474075,224.754608 
	C202.063034,226.019333 201.059204,227.004913 200.055359,227.990509 
	C199.427185,226.841995 198.798996,225.693481 198.010651,224.252213 
	C197.418350,221.756241 196.986221,219.553024 196.590378,217.534790 
	C193.914246,218.784363 191.183304,220.972046 188.342453,221.125565 
	C185.583725,221.274658 182.246780,219.888657 180.093811,218.073563 
	C179.073822,217.213669 180.276459,213.783707 180.363312,211.513947 
	C180.401550,210.514709 180.168549,209.505096 180.041687,208.110428 
M201.755020,218.874466 
	C201.635574,218.578125 201.516129,218.281784 201.396683,217.985443 
	C201.417328,218.352661 201.437988,218.719879 201.755020,218.874466 
z"/>
<path fill="#F4E9EB" opacity="1.000000" stroke="none" 
	d="
M221.298737,201.435104 
	C221.382309,202.451904 221.465881,203.468704 221.819580,204.767822 
	C221.513062,206.569183 220.936386,208.088211 220.300140,209.764191 
	C222.366257,211.960724 224.465439,214.391663 222.089767,217.851273 
	C219.769882,221.229645 216.361450,221.967209 212.853958,220.770050 
	C210.286285,219.893677 208.078201,217.963684 205.410095,216.151520 
	C205.381744,211.568863 205.653168,207.338013 206.150436,202.845032 
	C207.012619,202.349640 207.648972,202.116364 208.671661,201.927948 
	C213.316605,204.411728 216.583588,203.291168 218.979828,198.502274 
	C219.988525,199.778000 220.643631,200.606552 221.298737,201.435104 
M210.903595,205.772018 
	C210.903595,205.772018 210.602219,205.759628 210.602219,205.759628 
	C210.602219,205.759628 210.992310,206.005829 211.339844,206.426575 
	C211.828659,206.472443 212.317474,206.518326 212.806274,206.564194 
	C212.810486,206.413559 212.814682,206.262924 212.818893,206.112289 
	C212.214478,206.072327 211.610077,206.032379 210.903595,205.772018 
z"/>
<path fill="#EDEFF4" opacity="1.000000" stroke="none" 
	d="
M155.767548,90.928406 
	C155.639313,93.454971 155.283539,95.862526 154.964401,98.634872 
	C155.001022,98.999672 154.984634,99.020424 154.984634,99.020424 
	C152.333328,98.839294 149.682022,98.658157 146.476242,98.439148 
	C148.917053,108.814880 157.346405,108.923653 165.029663,110.114380 
	C164.788589,110.572952 164.547531,111.031517 164.306473,111.490082 
	C162.251495,111.782722 160.196518,112.075363 157.678680,112.688217 
	C156.097061,112.805634 154.670959,112.973488 153.908325,112.341148 
	C148.018768,107.457916 142.058929,110.721756 136.108551,111.975174 
	C136.342484,110.985695 136.317825,109.343895 136.858948,109.129402 
	C138.462830,108.493637 140.289825,108.420708 142.339539,108.075493 
	C141.894150,106.160835 141.507416,104.498306 141.039032,102.440887 
	C142.484451,100.585045 144.011505,99.124092 146.402161,96.836960 
	C147.131210,96.836960 149.257843,96.836960 152.114182,96.836960 
	C151.672363,95.376305 151.290894,94.115112 151.267899,92.438751 
	C152.763809,91.655968 153.901245,91.288361 155.038681,90.920761 
	C155.205795,90.883629 155.372910,90.846504 155.767548,90.928406 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M244.970245,108.852379 
	C244.971329,108.459114 244.972427,108.065849 245.275604,107.340088 
	C246.049988,106.668968 246.522293,106.330338 246.994598,105.991714 
	C246.994598,105.991714 247.000000,106.000000 247.220856,105.892303 
	C247.717300,105.581139 247.904861,105.315498 248.004410,104.987701 
	C248.004410,104.987701 248.002441,105.002228 248.217575,104.890366 
	C248.707718,104.571938 248.900986,104.305946 249.012512,103.980545 
	C249.012512,103.980545 249.002823,104.002571 249.215958,103.877640 
	C249.626022,103.472061 249.822952,103.191414 250.019882,102.910767 
	C251.089127,101.519119 252.158371,100.127464 254.082230,97.623520 
	C250.977295,98.591827 248.860901,99.251854 246.371765,99.956055 
	C245.999023,100.000221 245.975037,99.981911 245.975037,99.981911 
	C246.970840,97.325211 247.966629,94.668510 248.976501,91.657883 
	C249.508133,91.524452 250.490570,91.786835 250.475037,91.959335 
	C250.116302,95.942070 252.808884,96.786140 256.052216,97.653076 
	C255.983261,99.118141 255.703247,100.245750 255.716843,101.702316 
	C256.010468,102.031281 256.050262,101.980225 255.778839,101.721039 
	C255.013672,101.966591 254.519913,102.471329 253.729889,103.141212 
	C250.990128,105.197502 248.546616,107.088654 245.819977,108.942963 
	C245.347977,108.888206 245.159119,108.870293 244.970245,108.852379 
z"/>
<path fill="#D6D1DA" opacity="1.000000" stroke="none" 
	d="
M205.924591,203.107162 
	C205.653168,207.338013 205.381744,211.568863 205.030060,216.208298 
	C204.892899,218.752472 204.836029,220.888077 204.755798,223.471436 
	C204.732437,223.919205 204.382050,224.076843 204.189758,224.070343 
	C203.358841,220.289383 202.720230,216.514938 202.363342,212.136414 
	C203.073502,207.362076 203.501938,203.191803 203.917328,198.699890 
	C203.264404,197.583160 202.624557,196.788101 201.972473,195.588684 
	C202.596130,192.384079 203.227570,189.582703 203.915024,186.795135 
	C203.924301,186.757553 204.641846,186.894623 205.019012,187.348663 
	C205.004013,188.801361 204.998825,189.855560 204.726593,191.195602 
	C204.947906,195.356689 205.436249,199.231918 205.924591,203.107162 
z"/>
<path fill="#F8F8FA" opacity="1.000000" stroke="none" 
	d="
M154.754486,90.749191 
	C153.901245,91.288361 152.763809,91.655968 151.247253,92.037056 
	C150.808533,89.844841 150.808533,89.844841 154.754486,90.749191 
z"/>
<path fill="#DCD9E0" opacity="1.000000" stroke="none" 
	d="
M148.808960,202.237915 
	C149.014984,202.225937 149.095139,202.437042 149.100616,202.549957 
	C149.106110,202.662857 148.804657,202.799545 148.804657,202.799545 
	C148.804657,202.799545 148.477676,202.751678 148.378937,202.629486 
	C148.280212,202.507278 148.602921,202.249908 148.808960,202.237915 
z"/>
<path fill="#EDEFF4" opacity="1.000000" stroke="none" 
	d="
M159.260315,91.720207 
	C158.975235,91.914116 158.665985,91.836342 158.210556,91.485031 
	C158.216492,91.259781 158.394745,91.204117 158.851883,91.179863 
	C159.130783,91.211266 159.209991,91.552460 159.260315,91.720207 
z"/>
<path fill="#FBFBFC" opacity="1.000000" stroke="none" 
	d="
M225.852097,177.660126 
	C224.609802,178.284103 223.188965,178.656693 221.143005,178.939209 
	C220.016724,179.234406 219.515564,179.619690 219.014404,180.004974 
	C218.152847,179.357666 217.291290,178.710342 215.678391,177.498520 
	C216.169098,180.187576 216.526810,182.147736 216.930481,184.509796 
	C216.976471,184.911697 216.998550,184.986343 216.695770,185.003067 
	C215.712631,185.397064 215.032288,185.774338 214.070297,186.026886 
	C213.252579,185.611465 212.716522,185.320755 212.122391,184.711578 
	C211.994125,183.967285 211.923950,183.541458 212.206345,183.017090 
	C213.419754,181.309586 214.280609,179.700623 215.141464,178.091644 
	C214.592834,177.862518 214.044205,177.633377 213.495575,177.404236 
	C212.959488,179.315048 212.423401,181.225845 211.591003,183.236816 
	C209.510666,179.595718 207.726639,175.854462 205.930573,171.739136 
	C205.596283,169.920166 205.274017,168.475266 205.228210,166.724243 
	C206.047928,162.585632 206.591202,158.753143 207.453461,154.857010 
	C208.565689,153.514984 209.358917,152.236588 210.320511,150.852081 
	C210.698303,150.574371 210.857864,150.364807 211.299530,150.097809 
	C212.404510,149.952621 213.177536,149.826889 214.369675,149.633011 
	C212.897522,148.893219 211.957153,148.420670 211.012421,147.715530 
	C211.008041,147.482956 211.006012,147.017731 210.802246,146.774994 
	C209.710114,147.020752 208.821716,147.509216 207.546844,148.011215 
	C203.578522,148.477402 199.980179,148.832870 196.423996,149.436676 
	C195.217728,149.641495 194.117905,150.473221 192.602448,151.018143 
	C191.501556,151.018829 190.767670,151.019867 189.684296,151.014221 
	C188.868774,150.999619 188.402756,150.991669 187.686188,150.716156 
	C184.963654,149.957916 182.491653,149.467239 180.012634,148.984528 
	C180.005600,148.992493 180.012131,148.984177 179.762054,148.706772 
	C178.012955,148.276718 176.513931,148.124069 175.004318,147.981018 
	C174.993713,147.990616 175.021042,147.996536 174.915710,147.767654 
	C174.538132,147.348694 174.265884,147.158630 173.994537,146.988907 
	C173.995407,147.009262 174.033234,146.994110 173.871277,146.704865 
	C172.453735,146.275955 171.198135,146.136261 169.709137,145.992676 
	C169.475739,145.988770 169.009018,145.999359 168.966736,145.660049 
	C166.384445,144.154480 166.384445,144.154480 164.783554,149.006241 
	C164.364548,149.024399 164.196915,149.031174 163.790344,148.830536 
	C163.017670,147.746063 162.483948,146.869034 162.009766,145.649887 
	C162.394394,144.201950 162.719498,143.096115 163.242920,141.873947 
	C163.688400,141.564240 163.873596,141.323227 164.368210,140.932449 
	C164.995087,138.894913 165.296143,136.964127 165.493469,135.022797 
	C165.697861,133.011765 165.801697,130.990494 166.298126,129.022476 
	C167.766815,129.382111 168.886902,129.692963 170.006317,130.335999 
	C169.999298,131.111069 169.992996,131.553925 169.706024,132.046997 
	C169.127762,132.412399 168.830124,132.727585 168.532501,133.042786 
	C169.015579,133.363251 169.498642,133.683701 169.986420,134.376953 
	C169.998520,135.495346 170.005905,136.240967 169.847122,137.220764 
	C169.637100,138.216705 169.346008,139.545624 169.588211,139.651199 
	C171.671143,140.559235 173.850388,141.246323 176.344452,142.154297 
	C181.554459,143.663574 186.366165,146.271484 192.713684,143.514542 
	C188.576355,142.440384 185.789185,141.716766 182.964813,140.675659 
	C182.277740,139.576263 181.627869,138.794342 180.595428,138.001144 
	C176.140991,137.121078 172.151871,136.185730 171.571167,130.957001 
	C171.530060,130.586853 170.548004,130.321228 170.002045,129.648071 
	C170.118668,127.791664 170.236725,126.294182 170.650726,124.901169 
	C172.022766,126.202568 173.098877,127.399490 174.346069,128.786713 
	C174.953613,127.146225 175.394577,125.955528 176.247101,124.816109 
	C177.762024,124.906563 178.865402,124.945740 179.968781,124.984924 
	C180.526764,125.175278 181.084763,125.365631 181.834686,125.786720 
	C182.026611,126.017464 182.003769,126.002449 181.834137,126.061127 
	C181.432419,126.215492 181.238342,126.361626 181.082260,126.558212 
	C177.778259,129.741364 178.514679,131.211319 184.944305,133.413574 
	C185.991333,133.409439 186.473969,133.132339 186.956604,132.855240 
	C187.044815,132.073624 187.133026,131.292007 187.503723,130.072113 
	C187.878693,129.489044 187.941986,129.332443 187.976105,129.164032 
	C188.067139,128.630249 188.158157,128.096451 188.605682,127.405685 
	C189.644699,128.184723 190.327225,129.120728 191.039322,130.341522 
	C191.380081,131.084442 191.691254,131.542557 192.045166,132.343140 
	C193.059418,133.790405 194.030930,134.895203 195.250153,136.000671 
	C195.497864,136.001328 195.993286,136.002396 196.307053,136.032379 
	C197.286057,135.477707 198.389282,134.973068 198.514099,134.289719 
	C198.702438,133.258667 198.207794,132.102844 198.313477,131.002289 
	C199.036850,131.012527 199.450165,131.020554 200.191406,131.009506 
	C201.484406,130.576614 202.449478,130.162796 203.388763,129.760040 
	C203.973129,130.618439 204.486877,131.373108 204.995071,132.515030 
	C205.838684,134.391006 202.981354,138.566528 208.006851,137.400742 
	C209.016052,138.507889 210.007721,139.254868 211.008820,140.333664 
	C211.378479,141.239716 211.738724,141.813950 212.098969,142.388168 
	C212.399307,141.592316 212.699646,140.796463 213.000824,139.753601 
	C213.001663,139.506577 213.002121,139.012543 213.388947,138.949860 
	C214.397202,138.684692 215.004730,138.397858 215.642227,138.292755 
	C222.686829,137.131256 229.601578,135.829041 231.521881,127.250389 
	C231.632812,126.754784 232.477295,126.423378 233.002609,126.446609 
	C233.857758,131.376297 232.256470,134.987442 228.607849,138.040176 
	C225.168564,139.066864 222.096222,140.039291 218.665955,141.015808 
	C217.277054,141.536301 216.246094,142.052704 215.215134,142.569107 
	C215.382538,142.996078 215.549957,143.423065 215.717361,143.850037 
	C216.818024,143.562210 217.918686,143.274399 219.417175,142.983475 
	C223.215317,141.669891 226.615601,140.359390 230.345337,138.966736 
	C232.455002,137.929947 234.235214,136.975327 236.058411,136.409424 
	C235.728348,138.534119 235.355286,140.270126 234.992065,142.004364 
	C235.001907,142.002594 235.009644,141.984070 234.651031,142.028137 
	C232.856323,143.051270 231.420258,144.030334 229.993286,145.006058 
	C230.002411,145.002716 230.008102,144.984116 229.687958,145.000732 
	C228.587601,145.361343 227.807388,145.705353 226.620605,146.039612 
	C220.075714,146.595184 219.055847,147.824142 219.845245,153.454178 
	C220.052002,154.928696 219.966766,156.444153 220.068329,158.271118 
	C220.783096,159.117813 221.445160,159.634186 222.119995,160.492310 
	C221.423462,161.892319 220.714172,162.950546 219.959167,163.659363 
	C219.103699,161.637512 218.293930,159.965073 217.484161,158.292648 
	C217.004395,158.519073 216.524612,158.745499 216.044846,158.971924 
	C217.056107,160.993011 218.067383,163.014114 219.142700,165.350861 
	C219.733002,166.328003 220.259277,166.989471 220.375687,167.726837 
	C217.616470,168.080521 215.267105,168.358307 213.223160,168.599976 
	C215.310272,173.878036 219.051193,177.181046 225.131943,177.113892 
	C225.312485,177.212173 225.493027,177.310440 225.852097,177.660126 
M216.881714,153.227737 
	C215.855148,153.243332 214.828598,153.258942 213.802032,153.274536 
	C214.260803,154.308731 214.719589,155.342911 215.178375,156.377106 
	C215.773468,155.541840 216.368561,154.706573 216.881714,153.227737 
M197.288834,140.539444 
	C197.183929,141.522903 197.079025,142.506378 196.974121,143.489838 
	C197.505112,143.450638 198.036118,143.411438 198.567108,143.372238 
	C198.306305,142.544556 198.045517,141.716873 197.288834,140.539444 
M211.738403,165.489182 
	C211.938614,165.201889 212.138824,164.914612 212.339050,164.627350 
	C212.041321,164.811874 211.743591,164.996399 211.738403,165.489182 
M202.631180,143.691864 
	C202.706314,143.999039 202.781433,144.306213 202.856552,144.613388 
	C202.902939,144.331116 202.949341,144.048843 202.631180,143.691864 
M202.142212,134.712601 
	C202.054565,134.712646 201.966919,134.712692 202.142212,134.712601 
M215.551865,147.510849 
	C215.551865,147.510849 215.481552,147.545914 215.551865,147.510849 
M200.447021,144.489029 
	C200.447021,144.489029 200.518463,144.453217 200.447021,144.489029 
M192.552841,139.510681 
	C192.552841,139.510681 192.482193,139.545868 192.552841,139.510681 
z"/>
<path fill="#F3F5F7" opacity="1.000000" stroke="none" 
	d="
M246.103119,108.979797 
	C248.546616,107.088654 250.990128,105.197502 254.054047,103.149712 
	C255.133057,102.655457 255.591660,102.317841 256.050262,101.980225 
	C256.050262,101.980225 256.010468,102.031281 255.985718,102.052002 
	C256.857330,102.899834 258.411987,103.666824 258.494293,104.568260 
	C258.614868,105.888985 257.681152,107.305977 257.188904,108.704094 
	C259.644073,109.165062 261.850311,109.579292 264.697174,110.113800 
	C263.347748,112.369774 262.366516,114.010162 261.213806,115.937263 
	C262.810944,115.745262 264.198853,115.578407 267.256287,115.210854 
	C264.957275,118.363747 263.374359,120.534531 261.877380,122.587517 
	C263.796783,123.562004 266.078308,124.720345 269.031769,126.219826 
	C267.155365,127.728622 265.920166,128.721817 263.931885,129.825653 
	C258.818817,131.428635 253.254913,129.023209 249.988373,134.007629 
	C250.000931,134.000702 250.024857,133.984879 249.572998,133.982483 
	C246.240967,132.988068 240.987274,136.888351 240.998169,129.681046 
	C242.366852,127.902962 243.695557,126.463585 245.321106,124.998825 
	C246.097137,124.656509 246.576294,124.339584 247.261826,123.908600 
	C247.727493,123.600868 247.919495,123.354691 248.260361,122.939552 
	C248.746017,122.619659 248.938492,122.359291 249.260651,121.923279 
	C249.726135,121.605331 249.917419,121.354607 250.340622,120.995010 
	C251.050629,120.294250 251.461197,119.650864 251.871780,119.007469 
	C251.612656,118.863739 251.353516,118.720009 251.094391,118.576271 
	C250.714188,119.372246 250.333969,120.168213 249.749054,121.085609 
	C249.288162,121.406784 249.094101,121.655113 248.749481,122.071945 
	C248.271347,122.395134 248.075974,122.651741 247.747559,123.081787 
	C247.286057,123.396523 247.096848,123.644073 246.684235,123.979767 
	C245.923080,124.336555 245.454559,124.658112 244.634109,124.907394 
	C241.892807,122.244110 241.097107,119.700348 243.706543,116.589943 
	C244.638199,115.479401 244.594284,113.550415 244.997818,111.997498 
	C244.999954,112.000000 244.995041,111.997810 245.265442,111.795731 
	C245.724930,110.722374 245.914017,109.851089 246.103119,108.979797 
M252.589584,116.525833 
	C252.589584,116.525833 252.477280,116.591995 252.589584,116.525833 
M254.566269,115.512634 
	C254.566269,115.512634 254.476883,115.558556 254.566269,115.512634 
z"/>
<path fill="#F9F9FB" opacity="1.000000" stroke="none" 
	d="
M256.022522,173.012161 
	C253.224426,170.991196 250.426331,168.970230 247.131165,166.548767 
	C244.735748,162.473862 242.837433,158.799454 240.955093,154.840820 
	C240.979446,154.367004 240.987808,154.177399 241.005157,153.590454 
	C241.330673,151.477066 241.647217,149.761047 242.070587,148.261002 
	C242.367493,148.751083 242.619904,148.943420 242.998871,149.192200 
	C243.164017,149.368713 243.264923,149.407013 243.365845,149.445328 
	C243.261749,149.275101 243.157654,149.104874 242.942657,148.720032 
	C242.639923,148.227219 242.381027,148.043549 242.052582,147.593140 
	C240.694382,146.071060 239.338669,144.910187 237.956299,143.494049 
	C237.647797,142.832458 237.365967,142.426163 237.101624,141.667831 
	C237.765121,139.560120 238.411118,137.804428 239.349884,135.914032 
	C242.094131,136.860428 244.545593,137.941544 246.999786,139.008026 
	C247.002502,138.993408 246.977844,138.976761 246.992798,139.283661 
	C247.341934,140.070328 247.676117,140.550110 248.008316,141.013275 
	C248.006332,140.996658 247.978836,140.977570 247.967926,141.332458 
	C248.305679,143.810791 248.654327,145.934265 248.996216,148.280670 
	C248.989456,148.503632 248.984085,148.949707 249.088715,149.190094 
	C249.470337,149.630432 249.747345,149.830383 250.017639,150.011230 
	C250.010956,149.992111 249.976120,149.971420 249.996338,150.276260 
	C250.348663,151.065140 250.680756,151.549179 251.009750,152.015091 
	C251.006653,151.996964 250.971741,151.985367 251.025177,152.337463 
	C252.894440,156.504471 255.216721,160.176270 256.349091,164.184265 
	C257.110931,166.880890 256.190399,170.052856 256.022522,173.012161 
M246.106323,154.235184 
	C246.181000,154.278290 246.255676,154.321411 246.330353,154.364517 
	C246.217194,154.245392 246.104019,154.126251 245.958832,153.413574 
	C245.640198,152.941162 245.321548,152.468750 244.903992,151.742798 
	C244.825165,151.698105 244.746323,151.653412 244.667496,151.608719 
	C244.776993,151.740189 244.886505,151.871658 245.040451,152.592255 
	C245.362366,153.058731 245.684280,153.525192 246.106323,154.235184 
z"/>
<path fill="#F8F8FA" opacity="1.000000" stroke="none" 
	d="
M240.996185,153.987808 
	C240.987808,154.177399 240.979446,154.367004 240.559418,154.804794 
	C237.799591,154.861130 237.147247,155.740158 237.181854,158.240707 
	C237.302353,166.948776 237.044189,175.662079 236.930008,184.373398 
	C234.826019,181.026337 232.722031,177.679260 230.321762,173.773773 
	C230.003128,167.125549 227.068771,161.006760 230.455002,154.963577 
	C231.038025,154.980820 231.373459,154.982925 231.819031,155.246918 
	C232.295044,154.910797 232.660889,154.312775 233.017029,153.441345 
	C233.011139,152.804276 233.014984,152.440613 232.860748,151.763611 
	C231.804474,149.294876 230.906296,147.139496 230.008118,144.984116 
	C230.008102,144.984116 230.002411,145.002716 230.348587,144.956573 
	C232.133057,143.934982 233.571350,142.959534 235.009644,141.984070 
	C235.009644,141.984070 235.001907,142.002594 235.341125,142.037415 
	C236.148285,142.054779 236.616211,142.037308 237.084137,142.019836 
	C237.365967,142.426163 237.647797,142.832458 237.992859,143.917999 
	C239.036133,147.727417 240.016159,150.857620 240.996185,153.987808 
M233.516968,158.994843 
	C233.348541,159.962326 233.180099,160.929825 233.011673,161.897308 
	C233.299957,161.920609 233.588226,161.943924 233.876511,161.967224 
	C233.876511,161.114395 233.876511,160.261581 233.516968,158.994843 
z"/>
<path fill="#F3F4F6" opacity="1.000000" stroke="none" 
	d="
M260.495819,136.987213 
	C263.311127,139.723190 266.126434,142.459167 268.510193,145.551178 
	C260.714050,146.974060 253.790695,146.241806 247.978836,140.977570 
	C247.978836,140.977570 248.006332,140.996658 247.976807,140.713455 
	C247.624146,139.945755 247.300995,139.461258 246.977844,138.976761 
	C246.977844,138.976761 247.002502,138.993408 247.203613,138.746582 
	C248.262039,138.344284 249.119385,138.188828 250.101044,138.219421 
	C250.557541,138.389542 250.889740,138.373596 251.221924,138.357666 
	C250.826462,138.226547 250.431015,138.095428 249.864899,137.721130 
	C248.984116,136.921875 248.273972,136.365814 247.487549,135.750000 
	C248.513519,135.036270 249.269196,134.510574 250.024857,133.984894 
	C250.024857,133.984879 250.000931,134.000702 250.391632,134.010101 
	C251.856369,134.015594 252.930435,134.011688 254.001984,134.003632 
	C253.999496,133.999451 253.990891,133.990784 254.223328,134.233063 
	C256.469116,135.312637 258.482483,136.149918 260.495819,136.987213 
M254.136795,139.315582 
	C254.059601,139.445267 253.982391,139.574951 253.905167,139.704636 
	C254.032715,139.650436 254.160248,139.596222 254.136795,139.315582 
z"/>
<path fill="#D4D5DF" opacity="1.000000" stroke="none" 
	d="
M237.202576,184.546051 
	C237.044189,175.662079 237.302353,166.948776 237.181854,158.240707 
	C237.147247,155.740158 237.799591,154.861130 240.543442,155.089020 
	C242.837433,158.799454 244.735748,162.473862 246.800964,166.430450 
	C248.720139,169.645645 250.522232,172.550781 252.188644,175.531784 
	C252.590500,176.250641 252.543091,177.220657 252.193298,177.794754 
	C247.547791,172.053696 243.411285,166.593033 239.274765,161.132370 
	C239.014557,161.205185 238.754349,161.277985 238.494141,161.350784 
	C239.319077,163.922043 240.143997,166.493317 240.968933,169.064575 
	C240.385605,172.662689 239.897079,176.279938 239.177078,179.850494 
	C238.840485,181.519745 238.056412,183.098770 237.202576,184.546051 
z"/>
<path fill="#D3D2DC" opacity="1.000000" stroke="none" 
	d="
M230.207413,154.948441 
	C227.068771,161.006760 230.003128,167.125549 230.024841,173.588593 
	C228.847717,174.129288 227.671234,174.296707 226.228455,174.724731 
	C225.962158,174.985306 225.961090,175.045349 226.222855,174.713058 
	C224.822006,170.855515 226.171585,165.277573 219.990814,164.630554 
	C220.000244,164.423431 220.004883,164.008774 220.004883,164.008774 
	C220.714172,162.950546 221.423462,161.892319 222.109283,160.471893 
	C222.085815,160.109695 222.078690,160.069839 222.435883,160.037750 
	C225.264511,158.319916 227.735962,156.634186 230.207413,154.948441 
z"/>
<path fill="#CFD0DA" opacity="1.000000" stroke="none" 
	d="
M247.967926,141.332458 
	C253.790695,146.241806 260.714050,146.974060 268.474548,145.892639 
	C265.289917,146.482819 261.709351,147.087585 257.544220,147.502716 
	C256.715698,147.341736 256.471771,147.370361 256.227844,147.399002 
	C256.443604,147.638718 256.659332,147.878448 256.875092,148.118164 
	C260.063690,149.614502 263.252319,151.110855 266.726746,153.093903 
	C267.025818,153.754837 267.039062,153.929092 267.052338,154.103333 
	C267.052338,154.103333 267.063446,154.028275 266.669891,154.007355 
	C262.184143,152.518250 258.099701,151.027908 253.995926,149.592819 
	C252.353531,149.018463 250.668564,148.565796 249.002975,148.057724 
	C248.654327,145.934265 248.305679,143.810791 247.967926,141.332458 
z"/>
<path fill="#CFD0DA" opacity="1.000000" stroke="none" 
	d="
M260.904419,136.945465 
	C258.482483,136.149918 256.469116,135.312637 254.633606,134.246979 
	C256.485352,134.018631 258.159271,134.018631 259.833221,134.018631 
	C259.795319,133.589020 259.757446,133.159409 259.719574,132.729797 
	C257.814545,133.155792 255.909515,133.581802 254.004486,134.007797 
	C252.930435,134.011688 251.856369,134.015594 250.379059,134.017029 
	C253.254913,129.023209 258.818817,131.428635 263.609528,129.960922 
	C264.004944,130.425293 263.969574,130.865005 263.780060,131.834244 
	C263.837738,132.848099 264.049561,133.332443 264.261383,133.816772 
	C264.835175,133.177322 265.408966,132.537872 265.982788,131.898438 
	C266.525482,131.728271 267.068146,131.558121 267.610840,131.387955 
	C267.485870,132.435333 267.724548,134.082886 267.168915,134.419571 
	C265.374176,135.507111 263.287292,136.112518 260.904419,136.945465 
z"/>
<path fill="#F3F5F7" opacity="1.000000" stroke="none" 
	d="
M241.061646,169.394043 
	C240.143997,166.493317 239.319077,163.922043 238.494141,161.350784 
	C238.754349,161.277985 239.014557,161.205185 239.274765,161.132370 
	C243.411285,166.593033 247.547791,172.053696 251.883911,177.792191 
	C252.083511,178.070038 252.062775,178.039993 251.849274,178.059006 
	C251.337021,178.175308 251.128769,178.369598 251.011047,178.660889 
	C248.922867,177.468857 246.582886,176.560837 244.821976,174.999664 
	C243.264450,173.618790 242.351746,171.510605 241.061646,169.394043 
z"/>
<path fill="#EBEBF0" opacity="1.000000" stroke="none" 
	d="
M225.163086,176.729980 
	C219.051193,177.181046 215.310272,173.878036 213.223160,168.599976 
	C215.267105,168.358307 217.616470,168.080521 220.656769,167.912506 
	C222.885483,170.363297 224.423294,172.704315 225.961090,175.045349 
	C225.961090,175.045349 225.962158,174.985306 225.932434,174.987503 
	C225.666550,175.441833 225.430405,175.893951 225.163086,176.729980 
M220.433807,170.493683 
	C220.433807,170.493683 220.511612,170.453888 220.433807,170.493683 
z"/>
<path fill="#F3F4F6" opacity="1.000000" stroke="none" 
	d="
M248.996216,148.280670 
	C250.668564,148.565796 252.353531,149.018463 253.995926,149.592819 
	C258.099701,151.027908 262.184143,152.518250 266.703979,154.024017 
	C264.650879,154.595139 262.177917,155.484085 259.686707,155.538605 
	C257.996094,155.575623 256.279785,154.441635 254.058731,153.414398 
	C252.685562,152.660110 251.828659,152.322739 250.971741,151.985367 
	C250.971741,151.985367 251.006653,151.996964 250.983093,151.712326 
	C250.631729,150.942261 250.303925,150.456848 249.976120,149.971420 
	C249.976120,149.971420 250.010956,149.992111 249.900040,149.782898 
	C249.520782,149.365677 249.252426,149.157700 248.984085,148.949707 
	C248.984085,148.949707 248.989456,148.503632 248.996216,148.280670 
z"/>
<path fill="#BCC4D5" opacity="1.000000" stroke="none" 
	d="
M251.025177,152.337463 
	C251.828659,152.322739 252.685562,152.660110 253.700043,153.219940 
	C255.544281,159.246979 257.322754,165.028580 258.789032,170.888321 
	C258.952728,171.542572 257.343109,172.640549 256.289185,173.272461 
	C256.190399,170.052856 257.110931,166.880890 256.349091,164.184265 
	C255.216721,160.176270 252.894440,156.504471 251.025177,152.337463 
z"/>
<path fill="#E8ECF2" opacity="1.000000" stroke="none" 
	d="
M229.679657,189.693436 
	C225.954773,190.014511 225.954773,190.014511 227.024628,188.067352 
	C228.022217,188.356476 228.840744,188.877808 229.679657,189.693436 
z"/>
<path fill="#F3F4F6" opacity="1.000000" stroke="none" 
	d="
M265.664856,131.946930 
	C265.408966,132.537872 264.835175,133.177322 264.261383,133.816772 
	C264.049561,133.332443 263.837738,132.848099 263.843994,132.159973 
	C264.490356,131.969284 264.918640,131.982361 265.664856,131.946930 
z"/>
<path fill="#E8ECF2" opacity="1.000000" stroke="none" 
	d="
M227.197662,187.591873 
	C226.818268,187.200790 226.406601,186.471481 225.980560,185.404907 
	C226.365952,185.796295 226.765686,186.524963 227.197662,187.591873 
z"/>
<path fill="#E8ECF2" opacity="1.000000" stroke="none" 
	d="
M223.690308,182.816315 
	C223.321075,182.835510 222.819153,182.604797 222.173309,182.131165 
	C222.538788,182.114304 223.048218,182.340363 223.690308,182.816315 
z"/>
<path fill="#E8ECF2" opacity="1.000000" stroke="none" 
	d="
M224.735107,183.844696 
	C224.575256,183.907974 224.369995,183.737396 224.078491,183.367111 
	C224.260864,183.247406 224.493347,183.395218 224.735107,183.844696 
z"/>
<path fill="#E8ECF2" opacity="1.000000" stroke="none" 
	d="
M225.812500,184.828430 
	C225.646576,184.909622 225.415253,184.743179 225.090393,184.356140 
	C225.275482,184.225616 225.525558,184.374039 225.812500,184.828430 
z"/>
<path fill="#E8ECF2" opacity="1.000000" stroke="none" 
	d="
M235.674042,196.676178 
	C235.403885,196.751862 235.248535,196.566589 235.082642,196.167480 
	C235.388992,195.952026 235.627914,196.105881 235.674042,196.676178 
z"/>
<path fill="#E8ECF2" opacity="1.000000" stroke="none" 
	d="
M232.687164,193.712311 
	C232.470917,193.805038 232.300537,193.652802 232.082565,193.309143 
	C232.304642,193.128571 232.537323,193.245102 232.687164,193.712311 
z"/>
<path fill="#D4D5DF" opacity="1.000000" stroke="none" 
	d="
M251.211853,178.602356 
	C251.128769,178.369598 251.337021,178.175308 251.855728,178.066650 
	C251.915665,178.300949 251.694672,178.463791 251.211853,178.602356 
z"/>
<path fill="#F3F4F6" opacity="1.000000" stroke="none" 
	d="
M267.279175,154.005295 
	C267.039062,153.929092 267.025818,153.754837 267.001923,153.318726 
	C267.162872,153.340317 267.334412,153.623795 267.279175,154.005295 
z"/>
<path fill="#F9F9FB" opacity="1.000000" stroke="none" 
	d="
M187.936737,150.983719 
	C188.402756,150.991669 188.868774,150.999619 189.614319,151.327789 
	C188.976044,152.186981 188.058228,152.725952 187.140411,153.264923 
	C187.400116,153.687881 187.659821,154.110825 187.919525,154.533783 
	C190.360809,154.533783 192.802094,154.533783 195.546371,154.533783 
	C194.551483,153.176620 193.760468,152.097549 192.969437,151.018478 
	C194.117905,150.473221 195.217728,149.641495 196.423996,149.436676 
	C199.980179,148.832870 203.578522,148.477402 207.435455,148.318542 
	C207.249741,150.690567 204.159027,152.528625 207.134476,154.920639 
	C206.591202,158.753143 206.047928,162.585632 204.986389,167.004974 
	C204.044922,171.532852 201.037094,175.770187 205.875687,179.411377 
	C206.018127,180.108322 206.074341,180.511810 205.884033,181.109940 
	C206.398560,182.562241 207.159622,183.819870 208.020111,185.213043 
	C208.119568,185.348572 208.227112,185.667099 208.159180,186.015152 
	C208.039719,186.831741 207.988174,187.300293 207.621246,187.813721 
	C206.890274,187.932022 206.474686,188.005417 205.953125,187.839645 
	C205.574371,187.383713 205.301590,187.166946 205.028824,186.950180 
	C204.641846,186.894623 203.924301,186.757553 203.915024,186.795135 
	C203.227570,189.582703 202.596130,192.384079 201.984268,195.592010 
	C202.008301,195.999649 202.012817,195.976120 201.804123,196.079300 
	C201.348053,196.386978 201.184616,196.644699 200.856476,197.174011 
	C200.515732,198.362823 200.423630,199.333252 200.301178,200.623489 
	C201.907028,199.914673 202.918701,199.468109 203.930389,199.021545 
	C203.501938,203.191803 203.073502,207.362076 202.388855,211.817871 
	C200.323105,210.433258 198.513565,208.763107 196.352692,206.797058 
	C196.001343,206.501160 196.013184,206.002472 196.006104,206.001160 
	C195.999023,205.999863 196.001846,206.011765 196.222733,205.905457 
	C196.720459,205.600922 196.906830,205.338455 197.002838,205.006714 
	C197.002899,205.001663 197.013626,204.999985 197.274841,204.761566 
	C197.685867,203.353607 197.835663,202.184097 198.164246,200.891418 
	C198.407715,200.498474 198.472397,200.228668 198.537094,199.958893 
	C198.355194,200.311401 198.173279,200.663910 197.730637,201.139740 
	C196.982635,201.841797 196.495377,202.420547 195.751083,203.111877 
	C194.997009,203.483963 194.499954,203.743469 194.001404,204.001465 
	C193.999924,203.999924 193.995117,203.995117 193.995117,203.995117 
	C193.966751,203.464706 193.938370,202.934311 193.927444,201.713272 
	C194.083115,200.644867 194.221329,200.267090 194.581375,199.768814 
	C195.202026,199.105804 195.600861,198.563293 196.002151,198.013062 
	C196.004623,198.005325 196.019226,197.998535 196.235962,197.885651 
	C196.721375,197.573929 196.924423,197.322144 197.278839,196.824738 
	C197.663651,196.086349 197.831467,195.540634 198.281403,194.838913 
	C200.744781,192.219284 199.498993,190.896912 197.006622,189.752197 
	C197.012009,189.512924 197.020462,189.034332 197.241180,188.821640 
	C197.535385,187.729401 197.608887,186.849838 197.682388,185.970291 
	C197.116791,186.306091 196.551193,186.641891 195.735443,187.012360 
	C195.155334,187.103088 194.825348,187.159149 194.085815,187.134216 
	C193.401901,187.012299 193.127579,186.971405 192.876160,186.611664 
	C193.268875,185.531845 193.638687,184.770874 194.339478,183.961395 
	C195.452148,182.970581 196.233826,182.028275 197.374435,181.033539 
	C198.385544,179.841782 199.785278,178.518860 199.558487,177.595352 
	C198.650574,173.898117 197.237823,170.324860 195.582397,165.438141 
	C194.931641,168.843536 194.512726,171.035660 194.038177,173.418854 
	C193.982529,173.609924 193.730209,173.917740 193.386841,173.911270 
	C190.580826,174.406647 188.118210,174.908508 185.655579,175.410355 
	C187.354324,180.119537 182.678009,179.232132 180.859283,180.839279 
	C179.981735,181.614746 178.975357,182.244400 178.027298,182.940079 
	C178.027298,182.940079 177.939148,182.997360 177.917542,183.045288 
	C176.770035,182.893753 175.644135,182.694290 174.213608,181.896820 
	C173.867218,181.051208 173.825455,180.803558 173.783676,180.555923 
	C173.895111,180.291824 174.082443,180.102997 174.935486,179.968689 
	C177.014389,179.672226 178.503494,179.396561 179.992599,179.120880 
	C179.950836,178.805984 179.909073,178.491089 179.867310,178.176193 
	C178.472855,178.176193 177.078384,178.176193 175.505768,178.133545 
	C175.327591,178.090897 174.964890,178.038940 174.964890,178.038940 
	C174.964890,178.038940 175.003204,178.006866 175.130432,177.697388 
	C176.856171,174.230698 178.454712,171.073471 180.267639,167.694061 
	C182.026840,165.040070 183.571609,162.608261 185.116394,160.176453 
	C184.835205,159.973648 184.554016,159.770859 184.272827,159.568054 
	C183.106842,160.212082 181.940872,160.856110 180.375946,161.720505 
	C180.619934,160.108704 180.784210,159.023529 181.007385,157.551117 
	C181.631851,153.186584 182.657852,149.721207 187.936737,150.983719 
M184.492645,157.805008 
	C184.768875,157.408875 185.045105,157.012726 185.321320,156.616592 
	C184.913696,156.511459 184.506088,156.406311 184.098465,156.301178 
	C184.048096,156.762665 183.997726,157.224167 184.492645,157.805008 
M183.860489,152.291870 
	C183.947144,152.291580 184.033813,152.291290 183.860489,152.291870 
z"/>
<path fill="#F7F7F9" opacity="1.000000" stroke="none" 
	d="
M163.996811,141.034576 
	C163.873596,141.323227 163.688400,141.564240 162.826385,141.887268 
	C159.132172,142.341888 156.052811,142.666840 152.738113,142.993347 
	C152.502777,142.994888 152.032120,142.997620 151.782440,142.838486 
	C148.350159,144.060028 145.167587,145.440689 141.985001,146.821365 
	C138.477020,147.014221 134.969040,147.207092 131.461060,147.399963 
	C131.175964,146.749130 130.890854,146.098297 130.605743,145.447464 
	C134.048080,142.396332 137.490417,139.345184 141.069702,136.172668 
	C137.544006,135.449234 132.893326,136.593185 131.772781,130.908783 
	C133.951736,130.908783 135.709549,130.908783 138.093979,130.908783 
	C135.321915,128.788239 133.037903,127.041023 130.249695,124.908127 
	C132.851593,123.319199 134.839264,122.105362 137.072601,120.292664 
	C138.877197,119.798676 140.436142,119.903557 142.282471,120.269791 
	C145.380096,120.353790 148.190353,120.176437 151.049469,120.110809 
	C151.098312,120.222534 151.395889,120.238235 151.395889,120.238235 
	C151.395889,120.238235 150.998932,120.000717 150.999435,119.667114 
	C151.000641,118.888710 151.001328,118.443893 151.334900,117.994293 
	C152.443954,117.662155 153.220139,117.334808 154.251740,117.006058 
	C154.677414,117.003082 154.847687,117.001495 155.333313,116.965225 
	C156.432220,116.619835 157.215805,116.309120 157.999390,115.998413 
	C158.476791,116.314011 158.954193,116.629608 159.841095,117.181625 
	C160.444122,117.670097 160.686523,117.859604 160.977829,117.986565 
	C161.146606,117.988800 161.315369,117.991043 161.741333,118.391113 
	C162.309448,121.945351 160.254990,122.090775 157.805603,121.744217 
	C157.147964,121.503082 156.660034,121.467239 156.172104,121.431389 
	C156.168808,121.582367 156.165512,121.733345 156.162231,121.884323 
	C156.755615,121.923355 157.348999,121.962379 158.139404,122.260628 
	C159.290558,125.484642 160.017059,128.549286 161.261490,131.386780 
	C162.563675,134.356018 163.035309,136.886703 159.828232,139.023773 
	C159.821396,139.078705 159.934082,139.068497 160.390030,139.065170 
	C161.821121,139.726212 162.908966,140.380402 163.996811,141.034576 
M157.520462,140.441116 
	C157.520462,140.441116 157.565781,140.522461 157.520462,140.441116 
z"/>
<path fill="#EDEDF1" opacity="1.000000" stroke="none" 
	d="
M169.009018,145.999359 
	C169.009018,145.999359 169.475739,145.988770 170.041748,146.123642 
	C171.749588,146.503708 172.891418,146.748917 174.033234,146.994110 
	C174.033234,146.994110 173.995407,147.009262 174.103439,147.215897 
	C174.481323,147.613876 174.751175,147.805206 175.021042,147.996536 
	C175.021042,147.996536 174.993713,147.990616 174.990021,148.337830 
	C175.051346,149.740921 175.116364,150.796768 175.141525,151.205429 
	C176.827240,150.436646 178.419678,149.710403 180.012131,148.984161 
	C180.012131,148.984177 180.005600,148.992493 179.986725,149.370148 
	C179.646164,151.507996 179.324493,153.268158 179.000275,155.010406 
	C178.997726,154.992493 179.032135,154.988419 178.763184,155.113327 
	C178.314621,156.128662 178.135010,157.019104 177.963943,158.299850 
	C177.653580,160.127411 177.334702,161.564651 176.637283,163.109161 
	C175.876831,166.198868 175.494934,169.181305 175.083313,172.411255 
	C175.053604,172.658737 174.788071,173.080688 174.610123,173.236267 
	C174.229126,173.653137 174.124191,173.949265 174.071152,174.592712 
	C172.963089,175.259888 171.901245,175.614548 170.839386,175.969208 
	C170.889206,175.246521 170.939026,174.523849 170.937286,173.135132 
	C170.430954,172.223724 169.976151,171.978333 169.521362,171.732941 
	C169.357468,172.490585 169.193588,173.248245 169.029709,174.005890 
	C169.029709,174.005890 169.011887,174.011902 168.777908,174.191574 
	C168.369064,174.905975 168.194214,175.440704 168.019348,175.975433 
	C168.019348,175.975433 168.016800,176.031494 167.767670,176.204987 
	C167.355087,176.906967 167.191620,177.435455 167.028152,177.963943 
	C167.028152,177.963943 167.016418,178.038025 166.847717,178.080002 
	C166.403473,178.300308 166.354126,178.526169 166.530975,178.799561 
	C164.759186,181.223465 162.987396,183.647385 161.215607,186.071289 
	C160.694702,185.899231 160.173798,185.727173 159.652893,185.555115 
	C159.652893,180.640717 159.652893,175.726318 159.652893,170.811920 
	C154.730835,174.844528 152.205307,181.085098 144.054565,180.746994 
	C145.208313,179.522629 145.815216,178.878555 146.847565,178.260223 
	C147.384705,178.048950 147.496399,177.811935 147.608109,177.574936 
	C147.608109,177.574936 147.969971,177.804871 148.155060,177.789932 
	C151.228165,174.006927 154.408218,170.422241 156.921829,166.419083 
	C159.419403,162.441422 160.711502,157.621292 163.572113,153.989731 
	C165.245056,151.865921 164.600143,150.744186 164.029297,149.037964 
	C164.196915,149.031174 164.364548,149.024399 165.106735,148.966949 
	C166.790543,147.943970 167.899780,146.971664 169.009018,145.999359 
M173.795959,161.691193 
	C173.465652,161.498688 173.216873,161.596573 172.653442,162.313034 
	C172.697556,162.691940 172.741669,163.070847 172.785782,163.449753 
	C173.184036,162.955673 173.582275,162.461578 173.795959,161.691193 
M171.669830,166.393341 
	C171.714706,166.686691 171.759583,166.980042 171.804459,167.273392 
	C171.884552,166.963593 171.964630,166.653809 171.669830,166.393341 
M170.510818,169.447937 
	C170.510818,169.447937 170.545502,169.518021 170.510818,169.447937 
M174.594955,159.526871 
	C174.594955,159.526871 174.492523,159.587753 174.594955,159.526871 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M163.790344,148.830536 
	C164.600143,150.744186 165.245056,151.865921 163.572113,153.989731 
	C160.711502,157.621292 159.419403,162.441422 156.921829,166.419083 
	C154.408218,170.422241 151.228165,174.006927 147.965118,177.690613 
	C149.686203,173.815506 151.782318,170.024780 153.878448,166.234039 
	C153.530090,166.019501 153.181732,165.804977 152.833374,165.590439 
	C148.566010,168.556717 144.298630,171.522995 139.489258,174.866013 
	C137.595200,166.409851 141.623428,160.885376 145.104294,154.705872 
	C146.383713,153.140671 147.101395,151.922165 147.572128,151.122971 
	C142.761871,151.784256 138.380783,152.386536 133.999680,152.988831 
	C136.948639,151.226349 139.897598,149.463867 143.281265,147.351929 
	C146.488022,145.667511 149.260071,144.332565 152.032120,142.997620 
	C152.032120,142.997620 152.502777,142.994888 152.821320,143.348770 
	C154.581894,144.031815 156.102036,144.178833 157.439331,144.752274 
	C158.376877,145.154297 159.064957,146.138062 159.572601,146.953247 
	C158.829498,147.678650 158.378235,148.312790 157.705414,149.135788 
	C157.303787,149.868011 157.123703,150.411392 156.729797,151.063950 
	C156.253433,151.373703 156.064758,151.628891 155.735992,152.055511 
	C155.263870,152.384460 155.080444,152.648544 154.847382,153.025940 
	C154.828293,153.068451 154.933563,153.049530 155.257050,152.922745 
	C155.747208,152.617538 155.941315,152.361221 156.266556,151.929169 
	C156.734421,151.609726 156.921860,151.354568 157.267181,150.868866 
	C157.695374,150.157028 157.894241,149.623230 158.394577,149.024658 
	C159.166794,148.342743 159.637543,147.725616 160.344620,146.976974 
	C161.037369,146.560974 161.493805,146.276474 161.950226,145.991989 
	C162.483948,146.869034 163.017670,147.746063 163.790344,148.830536 
M160.462967,152.172897 
	C160.807449,152.106262 161.151947,152.039627 161.496429,151.972992 
	C161.153946,151.895569 160.811462,151.818130 160.462967,152.172897 
M153.510620,155.397369 
	C153.510620,155.397369 153.576050,155.510712 153.510620,155.397369 
M149.479691,148.557907 
	C149.479691,148.557907 149.436172,148.477539 149.479691,148.557907 
z"/>
<path fill="#FBFBFC" opacity="1.000000" stroke="none" 
	d="
M157.999435,115.625473 
	C157.215805,116.309120 156.432220,116.619835 155.304840,116.736023 
	C154.804626,116.306267 154.648209,116.071030 154.491806,115.835793 
	C154.326645,116.226349 154.161484,116.616905 153.996338,117.007462 
	C153.220139,117.334808 152.443954,117.662155 150.999634,117.997940 
	C149.551682,118.337112 148.771835,118.667847 147.661743,118.998779 
	C146.891037,118.999901 146.450607,119.000839 145.886658,118.788834 
	C145.555603,118.309883 145.294556,118.115852 144.739136,117.994843 
	C144.498260,117.995872 144.016525,117.999870 143.961914,117.650803 
	C141.958801,116.191360 140.010315,115.080986 138.061813,113.970612 
	C138.061813,113.970612 138.001389,113.991081 137.898560,113.755981 
	C137.599335,113.266380 137.348099,113.089928 137.042023,112.991539 
	C136.701279,112.920197 136.435074,112.739227 136.175980,112.211899 
	C142.058929,110.721756 148.018768,107.457916 153.908325,112.341148 
	C154.670959,112.973488 156.097061,112.805634 157.608215,113.012459 
	C158.000229,113.761833 157.999863,114.507195 157.999435,115.625473 
z"/>
<path fill="#DCD9E0" opacity="1.000000" stroke="none" 
	d="
M164.582581,199.169281 
	C160.453461,202.858063 155.230377,202.651642 149.594543,202.020493 
	C150.963867,198.103256 153.741364,196.724396 157.921005,197.988327 
	C159.937454,198.598114 162.098450,198.729828 164.582581,199.169281 
z"/>
<path fill="#D1D7E3" opacity="1.000000" stroke="none" 
	d="
M133.666229,152.945099 
	C138.380783,152.386536 142.761871,151.784256 147.572128,151.122971 
	C147.101395,151.922165 146.383713,153.140671 145.466095,154.479614 
	C142.876282,155.189392 140.503769,156.138611 138.091095,156.255035 
	C136.135757,156.349380 134.132126,155.442581 132.149918,154.979843 
	C132.544205,154.287018 132.938492,153.594177 133.666229,152.945099 
z"/>
<path fill="#EDEFF4" opacity="1.000000" stroke="none" 
	d="
M138.165909,114.266197 
	C140.010315,115.080986 141.958801,116.191360 143.648987,117.704887 
	C142.930664,118.735374 142.470657,119.362717 142.006409,119.994003 
	C142.002167,119.997963 141.995102,120.008438 141.995102,120.008438 
	C140.436142,119.903557 138.877197,119.798676 137.102234,119.948654 
	C135.694855,118.489769 134.503479,116.776024 133.312088,115.062286 
	C133.657547,114.775337 134.002991,114.488388 134.348450,114.201439 
	C135.805954,114.973801 137.263443,115.746162 139.245438,116.796463 
	C138.755264,115.673515 138.512634,115.117653 138.165909,114.266197 
z"/>
<path fill="#58A7D5" opacity="1.000000" stroke="none" 
	d="
M170.636627,176.231476 
	C171.901245,175.614548 172.963089,175.259888 174.260178,174.439301 
	C174.725861,173.719299 174.823410,173.421738 174.788071,173.080688 
	C174.788071,173.080688 175.053604,172.658737 175.325714,172.155762 
	C177.082947,170.407272 178.568085,169.161758 180.053223,167.916245 
	C178.454712,171.073471 176.856171,174.230698 175.108459,177.707184 
	C173.450790,177.515549 171.942337,177.004654 170.636627,176.231476 
z"/>
<path fill="#DBD8DF" opacity="1.000000" stroke="none" 
	d="
M151.782440,142.838486 
	C149.260071,144.332565 146.488022,145.667511 143.335938,147.011429 
	C142.955933,147.020416 142.462524,146.958588 142.223755,146.889984 
	C145.167587,145.440689 148.350159,144.060028 151.782440,142.838486 
z"/>
<path fill="#E0E1E9" opacity="1.000000" stroke="none" 
	d="
M175.683929,178.176193 
	C177.078384,178.176193 178.472855,178.176193 179.867310,178.176193 
	C179.909073,178.491089 179.950836,178.805984 179.992599,179.120880 
	C178.503494,179.396561 177.014389,179.672226 175.133118,179.920441 
	C174.769028,179.727890 174.797104,179.562759 175.059174,179.100540 
	C175.519516,178.654205 175.649780,178.445114 175.683929,178.176193 
z"/>
<path fill="#EBEBF0" opacity="1.000000" stroke="none" 
	d="
M169.301605,173.935425 
	C169.193588,173.248245 169.357468,172.490585 169.521362,171.732941 
	C169.976151,171.978333 170.430954,172.223724 170.929596,172.770782 
	C170.506790,173.336609 170.040146,173.600784 169.301605,173.935425 
z"/>
<path fill="#EBEBF0" opacity="1.000000" stroke="none" 
	d="
M168.301422,175.868317 
	C168.194214,175.440704 168.369064,174.905975 168.774078,174.200165 
	C168.863968,174.606461 168.723724,175.183823 168.301422,175.868317 
z"/>
<path fill="#EBEBF0" opacity="1.000000" stroke="none" 
	d="
M167.308289,177.860184 
	C167.191620,177.435455 167.355087,176.906967 167.739624,176.204559 
	C167.836609,176.605896 167.712524,177.181168 167.308289,177.860184 
z"/>
<path fill="#58A7D5" opacity="1.000000" stroke="none" 
	d="
M175.505768,178.133545 
	C175.649780,178.445114 175.519516,178.654205 175.109650,178.854431 
	C174.926132,178.905426 174.889618,178.469727 174.927246,178.254333 
	C174.964890,178.038940 175.327591,178.090897 175.505768,178.133545 
z"/>
<path fill="#E0E1E9" opacity="1.000000" stroke="none" 
	d="
M173.535446,180.718964 
	C173.825455,180.803558 173.867218,181.051208 173.948669,181.673523 
	C173.754639,181.659470 173.520935,181.270737 173.535446,180.718964 
z"/>
<path fill="#EDEFF4" opacity="1.000000" stroke="none" 
	d="
M137.116241,113.224861 
	C137.348099,113.089928 137.599335,113.266380 137.907425,113.725342 
	C137.669281,113.901909 137.393066,113.744705 137.116241,113.224861 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M147.418900,177.639648 
	C147.496399,177.811935 147.384705,178.048950 147.144318,178.164062 
	C147.015625,178.042191 147.229691,177.704376 147.418900,177.639648 
z"/>
<path fill="#EBEBF0" opacity="1.000000" stroke="none" 
	d="
M166.673721,178.629456 
	C166.354126,178.526169 166.403473,178.300308 166.810287,178.077576 
	C166.941574,178.033188 166.816467,178.459351 166.673721,178.629456 
z"/>
<path fill="#F1F0F2" opacity="1.000000" stroke="none" 
	d="
M207.989319,137.040558 
	C202.981354,138.566528 205.838684,134.391006 204.999466,132.100159 
	C204.365692,128.767670 206.486832,124.479988 200.833313,124.813293 
	C200.098206,125.072182 199.546997,125.534729 198.687622,126.163437 
	C195.922882,127.571976 193.466324,128.814362 191.009750,130.056747 
	C190.327225,129.120728 189.644699,128.184723 188.622528,127.135635 
	C188.779083,126.074257 189.141098,125.018494 189.797638,124.198563 
	C191.504532,122.066849 193.369263,120.062340 195.113495,117.959366 
	C195.994827,116.896790 196.622253,115.601875 197.587402,114.634415 
	C201.366653,110.846046 201.087708,107.858864 196.660370,104.406097 
	C197.587875,104.143990 198.400894,104.258728 199.205109,104.214386 
	C200.937790,104.118874 202.665939,103.941559 204.395950,103.797729 
	C203.050522,102.213936 201.867126,100.432060 200.284866,99.137794 
	C199.591949,98.570999 198.084213,99.000298 196.795456,98.961403 
	C196.644424,98.945526 196.340088,98.946869 196.163544,98.639351 
	C195.559509,97.245705 195.132019,96.159576 195.031769,95.048515 
	C199.787155,94.119141 194.414047,91.718445 196.466797,90.365356 
	C200.651306,90.202888 204.435333,90.065308 208.219360,89.927719 
	C209.787445,92.367577 211.355545,94.807434 212.507385,97.725014 
	C211.805389,99.557648 211.048096,101.016769 211.320251,102.248413 
	C212.225098,106.343285 212.601334,110.104149 208.530487,112.852577 
	C208.101990,113.141884 207.862320,113.905762 207.781128,114.484009 
	C207.088379,119.417923 205.521515,124.421341 209.788971,128.770340 
	C210.689285,129.687881 210.647705,131.529648 211.023926,132.962860 
	C211.007751,132.980164 210.974838,133.014252 210.645386,133.084518 
	C209.540390,134.450043 208.764862,135.745300 207.989319,137.040558 
z"/>
<path fill="#ECC95D" opacity="1.000000" stroke="none" 
	d="
M208.286743,89.587814 
	C204.435333,90.065308 200.651306,90.202888 196.106094,90.260605 
	C194.605133,90.055794 193.865356,89.930855 193.125580,89.805916 
	C191.968948,86.416374 190.812317,83.026840 189.308441,78.619698 
	C194.613556,81.894821 197.807144,79.734261 200.511307,75.605530 
	C203.931595,78.586349 206.941818,82.447952 212.315369,79.080719 
	C210.994965,82.469780 209.674545,85.858841 208.286743,89.587814 
z"/>
<path fill="#EBEBF0" opacity="1.000000" stroke="none" 
	d="
M232.980377,126.015564 
	C232.477295,126.423378 231.632812,126.754784 231.521881,127.250389 
	C229.601578,135.829041 222.686829,137.131256 215.642227,138.292755 
	C215.004730,138.397858 214.397202,138.684692 213.118866,138.715378 
	C211.966263,136.700485 211.470551,134.857361 210.974838,133.014252 
	C210.974838,133.014252 211.007751,132.980164 211.275345,132.688293 
	C212.068726,130.240372 212.594528,128.084320 213.120331,125.928261 
	C213.833435,128.158066 214.546524,130.387863 215.549301,133.523422 
	C217.413147,132.815674 219.373596,132.071243 221.831757,131.343506 
	C225.616730,131.599167 224.797226,129.794373 224.001083,128.001221 
	C228.045792,127.623550 229.961487,124.683357 232.087906,121.393143 
	C232.695969,121.415894 232.884064,121.670578 233.004349,122.354843 
	C233.003616,123.490120 233.001801,124.246674 232.997131,125.256348 
	C232.989624,125.678177 232.985001,125.846878 232.980377,126.015564 
z"/>
<path fill="#D4D5DF" opacity="1.000000" stroke="none" 
	d="
M212.976074,125.583801 
	C212.594528,128.084320 212.068726,130.240372 211.291534,132.670990 
	C210.647705,131.529648 210.689285,129.687881 209.788971,128.770340 
	C205.521515,124.421341 207.088379,119.417923 207.781128,114.484009 
	C207.862320,113.905762 208.101990,113.141884 208.530487,112.852577 
	C212.601334,110.104149 212.225098,106.343285 211.320251,102.248413 
	C211.048096,101.016769 211.805389,99.557648 212.438354,98.086678 
	C213.037186,102.156326 213.493668,106.342361 213.486923,110.527657 
	C213.479019,115.431892 213.067993,120.335472 212.976074,125.583801 
z"/>
<path fill="#F2CA54" opacity="1.000000" stroke="none" 
	d="
M194.704529,95.073441 
	C195.132019,96.159576 195.559509,97.245705 195.909424,98.912834 
	C194.865540,99.685844 193.899216,99.877853 192.643204,99.912674 
	C190.597061,100.158058 188.840637,100.560646 187.084198,100.963226 
	C185.731720,97.958885 185.378082,95.277672 190.023804,93.986923 
	C192.040405,94.345520 193.372467,94.709480 194.704529,95.073441 
z"/>
<path fill="#EDC765" opacity="1.000000" stroke="none" 
	d="
M196.946487,98.977280 
	C198.084213,99.000298 199.591949,98.570999 200.284866,99.137794 
	C201.867126,100.432060 203.050522,102.213936 204.395950,103.797729 
	C202.665939,103.941559 200.937790,104.118874 199.205109,104.214386 
	C198.400894,104.258728 197.587875,104.143990 196.386902,104.198059 
	C195.553589,104.237152 195.112244,104.179565 194.365036,103.797165 
	C194.059174,103.472343 194.121521,103.036087 194.404724,102.878418 
	C195.440796,101.472923 196.193634,100.225105 196.946487,98.977280 
z"/>
<path fill="#D1D7E3" opacity="1.000000" stroke="none" 
	d="
M194.121521,103.036087 
	C194.121521,103.036087 194.059174,103.472343 194.048859,103.692421 
	C190.413040,104.635368 186.650253,106.550133 183.462021,102.591042 
	C184.484741,102.136620 185.476486,101.695961 186.776215,101.109268 
	C188.840637,100.560646 190.597061,100.158058 192.663666,100.249924 
	C193.356400,101.508270 193.738953,102.272179 194.121521,103.036087 
z"/>
<path fill="#E8E1D9" opacity="1.000000" stroke="none" 
	d="
M195.031769,95.048515 
	C193.372467,94.709480 192.040405,94.345520 190.377213,93.887062 
	C190.919815,92.620949 191.793533,91.449326 192.896408,90.041809 
	C193.865356,89.930855 194.605133,90.055794 195.705612,90.285484 
	C194.414047,91.718445 199.787155,94.119141 195.031769,95.048515 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M223.755905,127.891777 
	C224.797226,129.794373 225.616730,131.599167 222.138031,131.131973 
	C221.995392,130.126663 222.044205,129.349564 222.086990,127.990715 
	C222.080963,127.408966 222.090714,127.024292 222.090714,127.024292 
	C222.564056,127.276978 223.037384,127.529655 223.755905,127.891777 
z"/>
<path fill="#F8F8FA" opacity="1.000000" stroke="none" 
	d="
M186.650101,132.953247 
	C186.473969,133.132339 185.991333,133.409439 185.309845,133.552536 
	C185.521866,133.296097 185.932739,133.173676 186.650101,132.953247 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M215.289581,121.340881 
	C215.541473,121.552788 215.753754,122.042374 215.964081,122.806351 
	C215.724731,122.593361 215.487335,122.105965 215.289581,121.340881 
z"/>
<path fill="#EBEBF0" opacity="1.000000" stroke="none" 
	d="
M221.723938,126.997047 
	C222.090714,127.024292 222.080963,127.408966 222.077087,127.601250 
	C221.499374,127.665596 220.925537,127.537659 220.121399,127.226730 
	C220.379791,127.019104 220.868469,126.994453 221.723938,126.997047 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M215.763214,116.112518 
	C215.866211,116.448425 215.766312,116.979279 215.491119,117.719910 
	C215.397324,117.388947 215.478836,116.848206 215.763214,116.112518 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M217.902191,111.294327 
	C218.037735,111.258354 217.828079,111.646248 217.761047,111.730988 
	C217.546463,111.628342 217.570663,111.466537 217.902191,111.294327 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M225.818390,101.288086 
	C225.894440,101.476898 225.720306,101.670090 225.332550,101.920357 
	C225.188568,101.706963 225.338318,101.478645 225.818390,101.288086 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M241.633804,92.676064 
	C241.626221,92.834908 241.464355,92.907021 241.159607,92.978569 
	C241.107895,92.784668 241.262177,92.655106 241.633804,92.676064 
z"/>
<path fill="#F8F8FA" opacity="1.000000" stroke="none" 
	d="
M187.832733,129.223114 
	C187.941986,129.332443 187.878693,129.489044 187.709473,129.734070 
	C187.470749,129.631683 187.489639,129.447647 187.832733,129.223114 
z"/>
<path fill="#F8F8FA" opacity="1.000000" stroke="none" 
	d="
M181.284576,126.581711 
	C181.238342,126.361626 181.432419,126.215492 181.841522,126.070480 
	C181.940720,126.306343 181.763504,126.501022 181.284576,126.581711 
z"/>
<path fill="#DC143C" opacity="1.000000" stroke="none" 
	d="
M199.029144,242.555145 
	C199.700867,243.011032 200.783676,243.817184 200.924454,244.763474 
	C201.547318,248.950104 201.899384,253.177017 202.380188,257.676849 
	C200.935196,257.676849 199.261292,257.676849 196.921844,257.676849 
	C197.616150,252.778824 198.311371,247.874359 199.029144,242.555145 
z"/>
<path fill="#D6D1DA" opacity="1.000000" stroke="none" 
	d="
M200.111389,228.283600 
	C201.059204,227.004913 202.063034,226.019333 203.354721,224.932037 
	C202.609467,229.103012 202.571304,229.144150 200.111389,228.283600 
z"/>
<path fill="#E1DEE3" opacity="1.000000" stroke="none" 
	d="
M157.975311,121.949501 
	C160.254990,122.090775 162.309448,121.945351 161.994507,118.393600 
	C162.484848,117.000107 162.979202,116.001953 163.473572,115.003807 
	C163.669327,115.347939 163.865082,115.692062 164.060837,116.036194 
	C166.127655,114.951057 168.117203,113.653702 170.290970,112.862396 
	C171.544250,112.406174 173.825363,112.172447 174.388031,112.862541 
	C177.073608,116.156166 180.688934,119.146317 179.981934,124.571640 
	C178.865402,124.945740 177.762024,124.906563 176.237579,124.515831 
	C174.631821,121.813179 173.447113,119.462074 172.086746,116.959976 
	C171.572769,117.156288 171.234451,117.503609 170.568283,117.950073 
	C167.543747,120.512665 164.847076,122.976089 162.473160,125.144669 
	C164.225220,127.074471 165.087372,128.024094 165.949524,128.973709 
	C165.801697,130.990494 165.697861,133.011765 165.493469,135.022797 
	C165.296143,136.964127 164.995087,138.894913 164.368210,140.932449 
	C162.908966,140.380402 161.821121,139.726212 160.366699,139.038849 
	C160.000107,139.005676 159.947769,138.958649 159.947769,138.958649 
	C163.035309,136.886703 162.563675,134.356018 161.261490,131.386780 
	C160.017059,128.549286 159.290558,125.484642 158.163818,122.257835 
	C157.991211,121.995827 157.975311,121.949501 157.975311,121.949501 
z"/>
<path fill="#E1DEE3" opacity="1.000000" stroke="none" 
	d="
M181.785828,112.580597 
	C182.709061,115.832512 183.470215,118.763298 184.231369,121.694092 
	C183.747589,121.805122 183.263809,121.916153 182.780014,122.027184 
	C181.720886,118.293709 180.661758,114.560234 179.602631,110.826767 
	C179.935059,110.492775 180.267487,110.158783 180.599915,109.824799 
	C180.941193,110.636360 181.282471,111.447914 181.785828,112.580597 
z"/>
<path fill="#E1DEE3" opacity="1.000000" stroke="none" 
	d="
M177.537018,107.479988 
	C177.560577,107.523987 177.513474,107.435989 177.537018,107.479988 
z"/>
<path fill="#EDEFF4" opacity="1.000000" stroke="none" 
	d="
M160.863953,117.783409 
	C160.686523,117.859604 160.444122,117.670097 160.135773,117.215836 
	C160.312714,117.139824 160.555756,117.328697 160.863953,117.783409 
z"/>
<path fill="#E1DEE3" opacity="1.000000" stroke="none" 
	d="
M161.470459,113.521263 
	C161.444550,113.475533 161.496368,113.566994 161.470459,113.521263 
z"/>
<path fill="#EDEFF4" opacity="1.000000" stroke="none" 
	d="
M155.011505,98.991371 
	C155.021973,98.983070 155.409897,99.244850 155.409897,99.244850 
	C155.409897,99.244850 155.095520,99.239754 155.040070,99.130089 
	C154.984634,99.020424 155.001022,98.999672 155.011505,98.991371 
z"/>
<path fill="#259FD6" opacity="1.000000" stroke="none" 
	d="
M206.059113,188.078812 
	C206.474686,188.005417 206.890274,187.932022 207.908142,187.917419 
	C208.712296,188.001038 208.914139,188.025879 209.498444,188.054901 
	C211.331451,187.778183 212.781982,187.497269 214.519470,187.044418 
	C215.624466,186.536911 216.442520,186.201355 217.439957,185.928375 
	C217.619339,185.990936 217.956833,186.165497 217.956833,186.165497 
	C221.698227,190.900833 225.439606,195.636185 229.734512,201.072113 
	C226.872513,201.339081 224.436905,201.566269 221.650024,201.614288 
	C220.643631,200.606552 219.988525,199.778000 218.979828,198.502274 
	C216.583588,203.291168 213.316605,204.411728 208.618256,201.598969 
	C208.532761,200.544357 208.853943,199.293854 209.246399,199.271072 
	C213.113861,199.046600 214.457977,197.152725 213.995621,195.070999 
	C210.867050,193.293396 208.890732,192.170486 206.907852,190.735504 
	C206.620560,189.641907 206.339828,188.860352 206.059113,188.078812 
z"/>
<path fill="#DC143C" opacity="1.000000" stroke="none" 
	d="
M243.651382,207.310562 
	C242.922150,207.175995 242.192917,207.041443 241.463699,206.906876 
	C241.471100,206.723419 241.478516,206.539948 241.485916,206.356491 
	C242.264664,206.314728 243.043396,206.272964 243.905548,206.608978 
	C243.988968,206.986740 243.651382,207.310562 243.651382,207.310562 
z"/>
<path fill="#E8ECF2" opacity="1.000000" stroke="none" 
	d="
M219.300293,179.974060 
	C219.515564,179.619690 220.016724,179.234406 220.751862,178.947815 
	C220.519302,179.345398 220.052750,179.644287 219.300293,179.974060 
z"/>
<path fill="#DC143C" opacity="1.000000" stroke="none" 
	d="
M244.867447,208.138489 
	C244.364502,208.181015 244.082184,207.994415 243.725616,207.559204 
	C243.651382,207.310562 243.988968,206.986740 244.153275,206.819382 
	C244.667480,206.668640 244.965118,206.801926 245.365112,207.246979 
	C245.375854,207.597824 245.231964,207.753586 244.867447,208.138489 
z"/>
<path fill="#E8ECF2" opacity="1.000000" stroke="none" 
	d="
M217.856354,185.907074 
	C217.956833,186.165497 217.619339,185.990936 217.381409,185.706406 
	C217.143494,185.421875 216.998550,184.986343 216.998550,184.986343 
	C216.998550,184.986343 216.976471,184.911697 216.990662,184.874878 
	C217.255173,185.108261 217.505508,185.378464 217.856354,185.907074 
z"/>
<path fill="#DCD9E0" opacity="1.000000" stroke="none" 
	d="
M244.995667,111.995003 
	C244.594284,113.550415 244.638199,115.479401 243.706543,116.589943 
	C241.097107,119.700348 241.892807,122.244110 244.642700,124.919090 
	C245.003204,125.003052 245.024277,125.024216 245.024261,125.024216 
	C243.695557,126.463585 242.366852,127.902962 240.689240,129.677368 
	C239.927536,130.017319 239.514740,130.022217 238.973816,129.727936 
	C238.884079,127.702240 238.922455,125.975731 238.934967,123.865723 
	C237.578705,118.756523 234.492462,115.696617 229.939682,114.028061 
	C229.939682,114.028061 229.979065,113.990822 229.873413,113.803207 
	C229.571899,113.351692 229.326233,113.147797 229.030777,113.003906 
	C228.255524,116.114693 227.564758,119.250999 226.638809,122.316269 
	C226.436325,122.986534 225.394867,123.403351 224.244110,123.624168 
	C223.841599,121.234535 223.934753,119.157616 224.323639,116.900421 
	C225.093430,115.483170 225.567505,114.246193 226.243637,112.884918 
	C226.697021,112.556465 226.883621,112.304398 227.258835,111.886063 
	C228.007156,111.508369 228.502136,111.249008 229.147461,110.897675 
	C229.353424,110.703300 229.481918,110.560287 229.451553,110.505836 
	C229.343643,110.312286 229.181595,110.148911 229.032379,109.975647 
	C229.024719,109.977196 229.044205,109.952591 229.044067,109.738663 
	C229.043930,109.524742 229.026657,109.097244 229.026657,109.097244 
	C230.161057,108.829170 231.295441,108.561104 232.862579,108.352844 
	C233.479263,108.673615 233.707626,108.887054 233.980423,109.052971 
	C234.446777,113.397820 237.324478,112.995239 241.079041,112.135696 
	C242.867020,111.985260 243.931335,111.990128 244.995667,111.995003 
z"/>
<path fill="#F3F1F3" opacity="1.000000" stroke="none" 
	d="
M227.005508,112.004395 
	C226.883621,112.304398 226.697021,112.556465 225.887161,112.963928 
	C224.895065,114.471725 224.461487,115.776215 224.027924,117.080704 
	C223.934753,119.157616 223.841599,121.234535 223.906097,123.626984 
	C219.482666,123.881790 218.270767,121.234390 219.438492,117.354706 
	C220.957825,112.306816 222.917252,107.420723 228.404144,103.762512 
	C228.657944,105.677147 228.832306,106.992462 229.016663,108.702515 
	C229.026657,109.097244 229.043930,109.524742 228.721863,109.758423 
	C227.935043,110.662872 227.470276,111.333633 227.005508,112.004395 
z"/>
<path fill="#C8C3CE" opacity="1.000000" stroke="none" 
	d="
M229.941498,114.397736 
	C234.492462,115.696617 237.578705,118.756523 238.582184,123.786896 
	C236.504578,123.386429 234.753922,122.681282 233.003265,121.976135 
	C232.884064,121.670578 232.695969,121.415894 232.237167,121.082901 
	C231.337982,118.891617 230.640640,116.829514 229.941498,114.397736 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M239.019714,101.014725 
	C238.339645,102.404327 237.659592,103.793922 236.979523,105.183525 
	C236.387451,104.745575 235.795364,104.307632 235.203293,103.869690 
	C236.262238,103.003151 237.321182,102.136612 238.690338,101.135017 
	C239.000534,100.999954 239.019714,101.014725 239.019714,101.014725 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M244.997803,111.997498 
	C243.931335,111.990128 242.867020,111.985260 241.403870,111.975075 
	C242.031403,111.313454 243.057770,110.657150 244.476959,110.322479 
	C244.911545,111.095337 244.953293,111.546577 244.995026,111.997810 
	C244.995041,111.997810 244.999954,112.000000 244.997803,111.997498 
z"/>
<path fill="#DCD9E0" opacity="1.000000" stroke="none" 
	d="
M245.265442,111.795731 
	C244.953293,111.546577 244.911545,111.095337 244.803345,110.309921 
	C244.783386,109.790581 244.829865,109.605431 244.923294,109.136330 
	C245.159119,108.870293 245.347977,108.888206 245.819977,108.942963 
	C245.914017,109.851089 245.724930,110.722374 245.265442,111.795731 
z"/>
<path fill="#DCD9E0" opacity="1.000000" stroke="none" 
	d="
M246.689240,106.005417 
	C246.522293,106.330338 246.049988,106.668968 245.273544,107.045143 
	C245.440887,106.728165 245.912369,106.373642 246.689240,106.005417 
z"/>
<path fill="#C8C3CE" opacity="1.000000" stroke="none" 
	d="
M229.127350,113.230507 
	C229.326233,113.147797 229.571899,113.351692 229.880035,113.829498 
	C229.657471,113.951103 229.401337,113.755676 229.127350,113.230507 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M240.471497,108.516541 
	C240.454071,108.481583 240.488907,108.551491 240.471497,108.516541 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M233.880768,108.836349 
	C233.707626,108.887054 233.479263,108.673615 233.184875,108.205849 
	C233.367218,108.140785 233.602768,108.347679 233.880768,108.836349 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M234.482758,106.471191 
	C234.519928,106.452271 234.445572,106.490112 234.482758,106.471191 
z"/>
<path fill="#DCD9E0" opacity="1.000000" stroke="none" 
	d="
M247.774567,105.085464 
	C247.904861,105.315498 247.717300,105.581139 247.217682,105.889183 
	C247.071777,105.651802 247.255478,105.381630 247.774567,105.085464 
z"/>
<path fill="#DCD9E0" opacity="1.000000" stroke="none" 
	d="
M248.782532,104.084641 
	C248.900986,104.305946 248.707718,104.571938 248.210297,104.891556 
	C248.176117,104.732651 248.364334,104.460693 248.782532,104.084641 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M241.008347,104.006271 
	C241.008347,104.006271 240.758865,104.401047 240.758865,104.401047 
	C240.758865,104.401047 240.770142,104.094383 240.885071,104.047195 
	C241.000000,104.000000 241.008347,104.006271 241.008347,104.006271 
z"/>
<path fill="#DCD9E0" opacity="1.000000" stroke="none" 
	d="
M249.799347,103.047203 
	C249.822952,103.191414 249.626022,103.472061 249.205063,103.882751 
	C249.180283,103.736420 249.379547,103.460030 249.799347,103.047203 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M240.996887,103.995872 
	C240.993759,103.991745 241.242477,103.600883 241.242477,103.600883 
	C241.242477,103.600883 241.229645,103.903755 241.118988,103.955017 
	C241.008347,104.006271 241.000000,104.000000 240.996887,103.995872 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M244.018478,102.013420 
	C244.018478,102.013420 243.753860,102.406418 243.753860,102.406418 
	C243.753860,102.406418 243.760605,102.088341 243.880310,102.043938 
	C244.000000,101.999535 244.018478,102.013420 244.018478,102.013420 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M245.020554,101.014931 
	C244.885986,101.313972 244.689301,101.564156 244.224472,101.889450 
	C244.018478,102.013420 244.000000,101.999535 243.992828,101.990036 
	C244.119797,101.681610 244.315048,101.430122 244.785736,101.112755 
	C245.000092,100.999443 245.020554,101.014931 245.020554,101.014931 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M246.008301,100.012062 
	C245.879822,100.318054 245.683426,100.565712 245.224487,100.890900 
	C245.020554,101.014931 245.000092,100.999443 244.992126,100.988930 
	C245.119263,100.682877 245.314041,100.434021 245.771759,100.106888 
	C245.975037,99.981911 245.999023,100.000221 246.008301,100.012062 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M238.993103,100.990494 
	C238.985672,100.981033 239.246429,100.595703 239.246429,100.595703 
	C239.246429,100.595703 239.238495,100.905731 239.129105,100.960228 
	C239.019714,101.014725 239.000534,100.999954 238.993103,100.990494 
z"/>
<path fill="#259FD6" opacity="1.000000" stroke="none" 
	d="
M194.495377,187.215210 
	C194.825348,187.159149 195.155334,187.103088 195.716492,187.350952 
	C195.979416,188.104172 196.011185,188.553497 195.868851,189.299225 
	C193.755859,191.309982 191.824158,193.032578 189.874069,194.734100 
	C189.201050,195.321350 188.482254,195.856125 187.624130,196.598785 
	C187.642639,197.189728 187.821381,197.596741 188.096344,198.275909 
	C188.350708,198.657776 188.508835,198.767487 188.886734,199.168900 
	C190.857529,199.603516 192.608536,199.746414 194.359543,199.889313 
	C194.221329,200.267090 194.083115,200.644867 193.882156,201.317444 
	C190.410583,202.751129 187.199890,204.423981 183.555420,201.453201 
	C182.767319,200.810760 179.680771,202.987991 177.325500,204.025070 
	C175.660446,203.650742 174.322815,203.117813 171.888412,202.147888 
	C176.094070,197.071320 179.933884,192.436340 184.296509,187.461502 
	C186.600967,187.802200 188.382584,188.482742 189.874649,189.052704 
	C190.739151,187.732224 191.347031,186.803696 191.977661,186.192001 
	C192.029526,186.718567 192.058640,186.928314 192.250061,187.379959 
	C193.106720,187.486298 193.801041,187.350769 194.495377,187.215210 
z"/>
<path fill="#E0E1E9" opacity="1.000000" stroke="none" 
	d="
M191.954910,185.875183 
	C191.347031,186.803696 190.739151,187.732224 189.874649,189.052704 
	C188.382584,188.482742 186.600967,187.802200 184.463501,187.180069 
	C183.559402,184.263702 182.963974,181.348007 178.389557,182.952271 
	C178.975357,182.244400 179.981735,181.614746 180.859283,180.839279 
	C182.678009,179.232132 187.354324,180.119537 185.655579,175.410355 
	C188.118210,174.908508 190.580826,174.406647 193.347534,174.272919 
	C193.086044,178.385757 192.520477,182.130478 191.954910,185.875183 
z"/>
<path fill="#F9F9FB" opacity="1.000000" stroke="none" 
	d="
M183.278229,211.532654 
	C180.979614,205.626999 181.459885,204.952789 187.365051,204.961273 
	C189.306732,204.964066 191.249268,204.354126 193.593262,204.009735 
	C193.995117,203.995117 193.999924,203.999924 193.883087,204.244690 
	C193.550293,205.347275 193.334351,206.205093 192.973938,207.316376 
	C192.187744,208.508362 191.545990,209.446854 190.502106,210.556274 
	C187.826065,210.995712 185.552139,211.264191 183.278229,211.532654 
z"/>
<path fill="#DF3D57" opacity="1.000000" stroke="none" 
	d="
M183.419098,211.812164 
	C185.552139,211.264191 187.826065,210.995712 190.813065,210.682159 
	C191.719757,210.748764 191.913376,210.860474 192.107010,210.972198 
	C188.566147,215.780045 186.210220,216.088623 183.419098,211.812164 
z"/>
<path fill="#E8E1D9" opacity="1.000000" stroke="none" 
	d="
M192.454193,210.931839 
	C191.913376,210.860474 191.719757,210.748764 191.215195,210.511200 
	C191.545990,209.446854 192.187744,208.508362 193.286163,207.305054 
	C194.162170,207.027176 194.581482,207.014114 195.000397,207.000534 
	C195.000000,207.000000 194.999969,206.999969 194.999969,206.999969 
	C194.267120,208.297150 193.534256,209.594315 192.454193,210.931839 
z"/>
<path fill="#D6D1DA" opacity="1.000000" stroke="none" 
	d="
M201.606842,218.980774 
	C201.437988,218.719879 201.417328,218.352661 201.396683,217.985443 
	C201.516129,218.281784 201.635574,218.578125 201.606842,218.980774 
z"/>
<path fill="#E8E1D9" opacity="1.000000" stroke="none" 
	d="
M196.013184,206.002472 
	C196.013184,206.002472 196.001343,206.501160 196.001160,206.750595 
	C195.834122,207.000183 195.667297,207.000320 195.250229,207.000214 
	C194.999969,206.999969 195.000000,207.000000 195.121216,206.789642 
	C195.445694,206.315338 195.702621,206.123077 196.013184,206.002472 
z"/>
<path fill="#EDEFF4" opacity="1.000000" stroke="none" 
	d="
M206.914413,191.047577 
	C208.890732,192.170486 210.867050,193.293396 213.995621,195.070999 
	C214.457977,197.152725 213.113861,199.046600 209.246399,199.271072 
	C208.853943,199.293854 208.532761,200.544357 208.231903,201.554108 
	C207.648972,202.116364 207.012619,202.349640 206.150436,202.845032 
	C205.436249,199.231918 204.947906,195.356689 205.045715,191.232819 
	C206.059387,191.005325 206.486908,191.026459 206.914413,191.047577 
z"/>
<path fill="#EDEFF4" opacity="1.000000" stroke="none" 
	d="
M211.005676,205.992416 
	C211.610077,206.032379 212.214478,206.072327 212.818893,206.112289 
	C212.814682,206.262924 212.810486,206.413559 212.806274,206.564194 
	C212.317474,206.518326 211.828659,206.472443 211.169922,206.213287 
	C211.000000,206.000000 211.005676,205.992416 211.005676,205.992416 
z"/>
<path fill="#EDEFF4" opacity="1.000000" stroke="none" 
	d="
M210.996155,206.002914 
	C210.992310,206.005829 210.602219,205.759628 210.602219,205.759628 
	C210.602219,205.759628 210.903595,205.772018 210.954636,205.882217 
	C211.005676,205.992416 211.000000,206.000000 210.996155,206.002914 
z"/>
<path fill="#189DD5" opacity="1.000000" stroke="none" 
	d="
M255.778839,101.721039 
	C255.591660,102.317841 255.133057,102.655457 254.350311,102.984566 
	C254.519913,102.471329 255.013672,101.966591 255.778839,101.721039 
z"/>
<path fill="#F6F1F3" opacity="1.000000" stroke="none" 
	d="
M203.917328,198.699890 
	C202.918701,199.468109 201.907028,199.914673 200.301178,200.623489 
	C200.423630,199.333252 200.515732,198.362823 201.048828,197.054031 
	C201.732361,196.517426 201.906693,196.270905 202.012817,195.976120 
	C202.012817,195.976120 202.008301,195.999649 201.996490,195.996338 
	C202.624557,196.788101 203.264404,197.583160 203.917328,198.699890 
z"/>
<path fill="#D1D7E3" opacity="1.000000" stroke="none" 
	d="
M206.907852,190.735504 
	C206.486908,191.026459 206.059387,191.005325 205.312759,190.946991 
	C204.998825,189.855560 205.004013,188.801361 205.019012,187.348663 
	C205.301590,187.166946 205.574371,187.383713 205.953125,187.839645 
	C206.339828,188.860352 206.620560,189.641907 206.907852,190.735504 
z"/>
<path fill="#EDEDF1" opacity="1.000000" stroke="none" 
	d="
M170.013306,136.986572 
	C170.005905,136.240967 169.998520,135.495346 169.989685,134.042389 
	C169.987701,132.888947 169.987183,132.442871 169.986679,131.996796 
	C169.992996,131.553925 169.999298,131.111069 170.002808,130.334106 
	C170.000000,130.000000 170.003464,130.007004 170.003464,130.007004 
	C170.548004,130.321228 171.530060,130.586853 171.571167,130.957001 
	C172.151871,136.185730 176.140991,137.121078 180.611877,138.347168 
	C181.674576,139.467346 182.338303,140.230240 183.002014,140.993134 
	C185.789185,141.716766 188.576355,142.440384 192.713684,143.514542 
	C186.366165,146.271484 181.554459,143.663574 176.292801,141.809662 
	C173.936142,139.868942 171.974716,138.427765 170.013306,136.986572 
z"/>
<path fill="#F8F8FA" opacity="1.000000" stroke="none" 
	d="
M166.298126,129.022476 
	C165.087372,128.024094 164.225220,127.074471 162.473160,125.144669 
	C164.847076,122.976089 167.543747,120.512665 170.631042,118.320343 
	C171.060608,118.837555 171.099579,119.083656 171.129440,119.688904 
	C170.865158,121.630943 170.609985,123.213821 170.354797,124.796707 
	C170.236725,126.294182 170.118668,127.791664 170.002045,129.648071 
	C170.003464,130.007004 170.000000,130.000000 170.003510,130.001907 
	C168.886902,129.692963 167.766815,129.382111 166.298126,129.022476 
z"/>
<path fill="#48A5D7" opacity="1.000000" stroke="none" 
	d="
M214.232529,187.216370 
	C212.781982,187.497269 211.331451,187.778183 209.540558,187.717712 
	C208.875839,186.806595 208.551483,186.236847 208.227112,185.667099 
	C208.227112,185.667099 208.119568,185.348572 208.016937,184.877899 
	C207.319733,183.243256 206.725143,182.079269 206.130554,180.915283 
	C206.074341,180.511810 206.018127,180.108322 205.927917,179.029816 
	C205.910156,176.274261 205.926392,174.193741 205.942612,172.113205 
	C207.726639,175.854462 209.510666,179.595718 211.626343,183.167587 
	C211.958008,182.998199 211.853775,183.115631 211.853790,183.115631 
	C211.923950,183.541458 211.994125,183.967285 211.991150,185.074188 
	C212.618362,186.179688 213.318710,186.604080 214.074326,187.073303 
	C214.129578,187.118118 214.232529,187.216370 214.232529,187.216370 
z"/>
<path fill="#DBD8DF" opacity="1.000000" stroke="none" 
	d="
M233.002625,126.446609 
	C232.985001,125.846878 232.989624,125.678177 233.360260,125.273857 
	C234.564590,126.542244 235.841904,127.966866 236.131821,129.570038 
	C236.506683,131.642899 236.093063,133.858368 236.010559,136.007507 
	C236.002182,136.002609 236.015427,136.020706 236.015427,136.020721 
	C234.235214,136.975327 232.455002,137.929947 230.133438,138.829407 
	C229.386322,138.511459 229.180557,138.248688 228.974777,137.985916 
	C232.256470,134.987442 233.857758,131.376297 233.002625,126.446609 
z"/>
<path fill="#FAFAFB" opacity="1.000000" stroke="none" 
	d="
M191.039322,130.341522 
	C193.466324,128.814362 195.922882,127.571976 199.015869,126.164459 
	C200.089386,126.000549 200.526505,126.001785 200.963684,126.373009 
	C200.597000,128.171524 200.230255,129.600052 199.863495,131.028595 
	C199.450165,131.020554 199.036850,131.012527 198.078003,130.913544 
	C197.019424,132.549179 196.506348,134.275787 195.993286,136.002396 
	C195.993286,136.002396 195.497864,136.001328 195.109756,135.689728 
	C193.815247,134.252319 192.908844,133.126511 192.002441,132.000687 
	C191.691254,131.542557 191.380081,131.084442 191.039322,130.341522 
z"/>
<path fill="#C8C3CE" opacity="1.000000" stroke="none" 
	d="
M170.650726,124.901169 
	C170.609985,123.213821 170.865158,121.630943 171.344177,119.453415 
	C171.799484,118.276176 172.030945,117.693573 172.262421,117.110977 
	C173.447113,119.462074 174.631821,121.813179 175.826019,124.464554 
	C175.394577,125.955528 174.953613,127.146225 174.346069,128.786713 
	C173.098877,127.399490 172.022766,126.202568 170.650726,124.901169 
z"/>
<path fill="#E1DEE3" opacity="1.000000" stroke="none" 
	d="
M220.015625,157.940811 
	C219.966766,156.444153 220.052002,154.928696 219.845245,153.454178 
	C219.055847,147.824142 220.075714,146.595184 226.610077,146.319641 
	C227.005310,146.796494 227.004501,146.983597 226.849823,147.467621 
	C226.480347,148.853546 226.264694,149.942566 225.790222,151.016846 
	C225.359085,150.988892 225.186752,150.975677 224.945770,150.626373 
	C222.186295,147.972855 222.109970,150.006775 221.758224,152.266068 
	C221.006104,154.328445 220.510864,156.134628 220.015625,157.940811 
z"/>
<path fill="#CFD0DA" opacity="1.000000" stroke="none" 
	d="
M207.453461,154.857010 
	C204.159027,152.528625 207.249741,150.690567 207.821945,148.305023 
	C208.821716,147.509216 209.710114,147.020752 210.647842,146.859787 
	C210.803726,147.440903 210.910248,147.694504 211.016785,147.948105 
	C211.957153,148.420670 212.897522,148.893219 214.369675,149.633011 
	C213.177536,149.826889 212.404510,149.952621 211.104126,150.170166 
	C210.332733,150.431519 210.191193,150.663589 210.152130,150.958191 
	C209.358917,152.236588 208.565689,153.514984 207.453461,154.857010 
z"/>
<path fill="#189DD5" opacity="1.000000" stroke="none" 
	d="
M226.222855,174.713058 
	C224.423294,172.704315 222.885483,170.363297 221.066620,167.836609 
	C220.259277,166.989471 219.733002,166.328003 219.370499,165.311172 
	C219.534256,164.955826 219.981384,164.837692 219.981384,164.837692 
	C226.171585,165.277573 224.822006,170.855515 226.222855,174.713058 
z"/>
<path fill="#EBEBF0" opacity="1.000000" stroke="none" 
	d="
M228.607849,138.040176 
	C229.180557,138.248688 229.386322,138.511459 229.803986,138.911560 
	C226.615601,140.359390 223.215317,141.669891 219.411789,142.654449 
	C219.013657,141.889603 219.018768,141.450653 219.023880,141.011719 
	C222.096222,140.039291 225.168564,139.066864 228.607849,138.040176 
z"/>
<path fill="#D6D1DA" opacity="1.000000" stroke="none" 
	d="
M179.002823,155.028336 
	C179.324493,153.268158 179.646164,151.507996 179.993744,149.362183 
	C182.491653,149.467239 184.963654,149.957916 187.686188,150.716156 
	C182.657852,149.721207 181.631851,153.186584 180.775604,157.572220 
	C180.484894,157.980576 180.018707,157.993271 180.008575,157.661438 
	C179.666565,156.562531 179.334686,155.795441 179.002823,155.028336 
z"/>
<path fill="#DBD8DF" opacity="1.000000" stroke="none" 
	d="
M200.191406,131.009491 
	C200.230255,129.600052 200.597000,128.171524 200.981613,126.126709 
	C200.999466,125.510414 201.017197,125.016945 201.017197,125.016945 
	C206.486832,124.479988 204.365692,128.767670 205.005005,131.712891 
	C204.486877,131.373108 203.973129,130.618439 203.388763,129.760040 
	C202.449478,130.162796 201.484406,130.576614 200.191406,131.009491 
z"/>
<path fill="#DBD8DF" opacity="1.000000" stroke="none" 
	d="
M159.864456,146.862015 
	C159.064957,146.138062 158.376877,145.154297 157.439331,144.752274 
	C156.102036,144.178833 154.581894,144.031815 153.056641,143.347229 
	C156.052811,142.666840 159.132172,142.341888 162.628082,142.003601 
	C162.719498,143.096115 162.394394,144.201950 162.009766,145.649887 
	C161.493805,146.276474 161.037369,146.560974 160.283554,146.915466 
	C159.986160,146.985458 159.864456,146.862015 159.864456,146.862015 
z"/>
<path fill="#EBEBF0" opacity="1.000000" stroke="none" 
	d="
M192.602448,151.018143 
	C193.760468,152.097549 194.551483,153.176620 195.546371,154.533783 
	C192.802094,154.533783 190.360809,154.533783 187.919525,154.533783 
	C187.659821,154.110825 187.400116,153.687881 187.140411,153.264923 
	C188.058228,152.725952 188.976044,152.186981 189.963821,151.334442 
	C190.767670,151.019867 191.501556,151.018829 192.602448,151.018143 
z"/>
<path fill="#F8F8FA" opacity="1.000000" stroke="none" 
	d="
M169.847107,137.220764 
	C171.974716,138.427765 173.936142,139.868942 175.949219,141.654755 
	C173.850388,141.246323 171.671143,140.559235 169.588211,139.651199 
	C169.346008,139.545624 169.637100,138.216705 169.847107,137.220764 
z"/>
<path fill="#F8F8FA" opacity="1.000000" stroke="none" 
	d="
M210.645386,133.084518 
	C211.470551,134.857361 211.966263,136.700485 212.732040,138.778076 
	C213.002121,139.012543 213.001663,139.506577 212.667389,139.753510 
	C211.888550,140.000900 211.443970,140.001358 210.999390,140.001831 
	C210.007721,139.254868 209.016052,138.507889 208.006866,137.400742 
	C208.764862,135.745300 209.540390,134.450043 210.645386,133.084518 
z"/>
<path fill="#D1D7E3" opacity="1.000000" stroke="none" 
	d="
M205.930573,171.739136 
	C205.926392,174.193741 205.910156,176.274261 205.841690,178.736343 
	C201.037094,175.770187 204.044922,171.532852 204.709915,167.311096 
	C205.274017,168.475266 205.596283,169.920166 205.930573,171.739136 
z"/>
<path fill="#FAFAFB" opacity="1.000000" stroke="none" 
	d="
M220.068329,158.271118 
	C220.510864,156.134628 221.006104,154.328445 222.020325,152.486099 
	C223.028778,153.964676 223.518234,155.479431 224.003845,156.997086 
	C224.000000,157.000000 223.994431,157.007462 223.712631,156.914673 
	C222.980118,157.904526 222.529404,158.987183 222.078690,160.069839 
	C222.078690,160.069839 222.085815,160.109695 222.096527,160.130127 
	C221.445160,159.634186 220.783096,159.117813 220.068329,158.271118 
z"/>
<path fill="#CFD0DA" opacity="1.000000" stroke="none" 
	d="
M227.003677,147.170700 
	C227.004501,146.983597 227.005310,146.796494 227.016632,146.329376 
	C227.807388,145.705353 228.587601,145.361343 229.687958,145.000732 
	C230.906296,147.139496 231.804474,149.294876 232.474670,151.788269 
	C231.201355,151.162582 230.148468,150.206924 229.113281,149.232468 
	C228.397446,148.558640 227.706024,147.858871 227.003677,147.170700 
z"/>
<path fill="#F9F9FB" opacity="1.000000" stroke="none" 
	d="
M216.922699,153.549530 
	C216.368561,154.706573 215.773468,155.541840 215.178375,156.377106 
	C214.719589,155.342911 214.260803,154.308731 213.802032,153.274536 
	C214.828598,153.258942 215.855148,153.243332 216.922699,153.549530 
z"/>
<path fill="#F9F9FB" opacity="1.000000" stroke="none" 
	d="
M219.990814,164.630554 
	C219.981384,164.837692 219.534256,164.955826 219.306458,164.995514 
	C218.067383,163.014114 217.056107,160.993011 216.044846,158.971924 
	C216.524612,158.745499 217.004395,158.519073 217.484161,158.292648 
	C218.293930,159.965073 219.103699,161.637512 219.959167,163.659363 
	C220.004883,164.008774 220.000244,164.423431 219.990814,164.630554 
z"/>
<path fill="#CFD0DA" opacity="1.000000" stroke="none" 
	d="
M237.101624,141.667816 
	C236.616211,142.037308 236.148285,142.054779 235.331299,142.039185 
	C235.355286,140.270126 235.728348,138.534119 236.058411,136.409409 
	C236.015427,136.020706 236.002182,136.002609 236.375549,136.029724 
	C237.475632,136.013474 238.202332,135.970108 238.960693,135.957596 
	C238.992371,135.988464 239.057114,136.048752 239.057098,136.048752 
	C238.411118,137.804428 237.765121,139.560120 237.101624,141.667816 
z"/>
<path fill="#D6D1DA" opacity="1.000000" stroke="none" 
	d="
M168.966736,145.660049 
	C167.899780,146.971664 166.790543,147.943970 165.358124,148.955566 
	C166.384445,144.154480 166.384445,144.154480 168.966736,145.660049 
z"/>
<path fill="#F1F0F2" opacity="1.000000" stroke="none" 
	d="
M196.307037,136.032379 
	C196.506348,134.275787 197.019424,132.549179 197.767960,130.911316 
	C198.207794,132.102844 198.702438,133.258667 198.514099,134.289719 
	C198.389282,134.973068 197.286057,135.477707 196.307037,136.032379 
z"/>
<path fill="#F9F9FB" opacity="1.000000" stroke="none" 
	d="
M211.922668,183.067429 
	C212.423401,181.225845 212.959488,179.315048 213.495575,177.404236 
	C214.044205,177.633377 214.592834,177.862518 215.141464,178.091644 
	C214.280609,179.700623 213.419754,181.309586 212.206329,183.017090 
	C211.853775,183.115631 211.958008,182.998199 211.922668,183.067429 
z"/>
<path fill="#D6D1DA" opacity="1.000000" stroke="none" 
	d="
M179.762054,148.706757 
	C178.419678,149.710403 176.827240,150.436646 175.141525,151.205429 
	C175.116364,150.796768 175.051346,149.740921 175.000626,148.328247 
	C176.513931,148.124069 178.012955,148.276718 179.762054,148.706757 
z"/>
<path fill="#FAFAFB" opacity="1.000000" stroke="none" 
	d="
M218.665955,141.015808 
	C219.018768,141.450653 219.013657,141.889603 219.013947,142.657562 
	C217.918686,143.274399 216.818024,143.562210 215.717361,143.850037 
	C215.549957,143.423065 215.382538,142.996078 215.215134,142.569107 
	C216.246094,142.052704 217.277054,141.536301 218.665955,141.015808 
z"/>
<path fill="#F8F8FA" opacity="1.000000" stroke="none" 
	d="
M197.536774,140.714325 
	C198.045517,141.716873 198.306305,142.544556 198.567108,143.372238 
	C198.036118,143.411438 197.505112,143.450638 196.974121,143.489838 
	C197.079025,142.506378 197.183929,141.522903 197.536774,140.714325 
z"/>
<path fill="#CFD0DA" opacity="1.000000" stroke="none" 
	d="
M234.651031,142.028137 
	C233.571350,142.959534 232.133057,143.934982 230.339478,144.959915 
	C231.420258,144.030334 232.856323,143.051270 234.651031,142.028137 
z"/>
<path fill="#F8F8FA" opacity="1.000000" stroke="none" 
	d="
M192.045166,132.343140 
	C192.908844,133.126511 193.815247,134.252319 194.862045,135.689072 
	C194.030930,134.895203 193.059418,133.790405 192.045166,132.343140 
z"/>
<path fill="#FAFAFB" opacity="1.000000" stroke="none" 
	d="
M211.008820,140.333664 
	C211.443970,140.001358 211.888550,140.000900 212.666565,140.000519 
	C212.699646,140.796463 212.399307,141.592316 212.098969,142.388168 
	C211.738724,141.813950 211.378479,141.239716 211.008820,140.333664 
z"/>
<path fill="#D6D1DA" opacity="1.000000" stroke="none" 
	d="
M173.871277,146.704865 
	C172.891418,146.748917 171.749588,146.503708 170.275146,146.127548 
	C171.198135,146.136261 172.453735,146.275955 173.871277,146.704865 
z"/>
<path fill="#F8F8FA" opacity="1.000000" stroke="none" 
	d="
M182.964813,140.675659 
	C182.338303,140.230240 181.674576,139.467346 180.994415,138.358429 
	C181.627869,138.794342 182.277740,139.576263 182.964813,140.675659 
z"/>
<path fill="#48A5D7" opacity="1.000000" stroke="none" 
	d="
M216.695770,185.003067 
	C216.998550,184.986343 217.143494,185.421875 217.202026,185.643829 
	C216.442520,186.201355 215.624466,186.536911 214.519470,187.044418 
	C214.232529,187.216370 214.129578,187.118118 214.192535,186.867371 
	C214.255493,186.616623 214.351959,186.151627 214.351959,186.151611 
	C215.032288,185.774338 215.712631,185.397064 216.695770,185.003067 
z"/>
<path fill="#F9F9FB" opacity="1.000000" stroke="none" 
	d="
M211.592133,165.335052 
	C211.743591,164.996399 212.041321,164.811874 212.339050,164.627350 
	C212.138824,164.914612 211.938614,165.201889 211.592133,165.335052 
z"/>
<path fill="#F8F8FA" opacity="1.000000" stroke="none" 
	d="
M169.706024,132.046997 
	C169.987183,132.442871 169.987701,132.888947 169.984970,133.669586 
	C169.498642,133.683701 169.015579,133.363251 168.532501,133.042786 
	C168.830124,132.727585 169.127762,132.412399 169.706024,132.046997 
z"/>
<path fill="#F9F9FB" opacity="1.000000" stroke="none" 
	d="
M214.070297,186.026886 
	C214.351959,186.151627 214.255493,186.616623 214.137283,186.822540 
	C213.318710,186.604080 212.618362,186.179688 212.049255,185.392670 
	C212.716522,185.320755 213.252579,185.611465 214.070297,186.026886 
z"/>
<path fill="#F8F8FA" opacity="1.000000" stroke="none" 
	d="
M202.813461,143.729218 
	C202.949341,144.048843 202.902939,144.331116 202.856552,144.613388 
	C202.781433,144.306213 202.706314,143.999039 202.813461,143.729218 
z"/>
<path fill="#F1F0F2" opacity="1.000000" stroke="none" 
	d="
M202.010742,134.712677 
	C201.966919,134.712692 202.054565,134.712646 202.010742,134.712677 
z"/>
<path fill="#FAFAFB" opacity="1.000000" stroke="none" 
	d="
M215.516708,147.528381 
	C215.481552,147.545914 215.551865,147.510849 215.516708,147.528381 
z"/>
<path fill="#F9F9FB" opacity="1.000000" stroke="none" 
	d="
M210.320511,150.852081 
	C210.191193,150.663589 210.332733,150.431519 210.772171,150.189636 
	C210.857864,150.364807 210.698303,150.574371 210.320511,150.852081 
z"/>
<path fill="#FAFAFB" opacity="1.000000" stroke="none" 
	d="
M211.012405,147.715530 
	C210.910248,147.694504 210.803726,147.440903 210.851593,147.102509 
	C211.006012,147.017731 211.008041,147.482956 211.012405,147.715530 
z"/>
<path fill="#D6D1DA" opacity="1.000000" stroke="none" 
	d="
M174.915710,147.767654 
	C174.751175,147.805206 174.481323,147.613876 174.102570,147.195541 
	C174.265884,147.158630 174.538132,147.348694 174.915710,147.767654 
z"/>
<path fill="#F8F8FA" opacity="1.000000" stroke="none" 
	d="
M200.482742,144.471130 
	C200.518463,144.453217 200.447021,144.489029 200.482742,144.471130 
z"/>
<path fill="#F8F8FA" opacity="1.000000" stroke="none" 
	d="
M192.517517,139.528275 
	C192.482193,139.545868 192.552841,139.510681 192.517517,139.528275 
z"/>
<path fill="#CFD0DA" opacity="1.000000" stroke="none" 
	d="
M239.101929,130.027130 
	C239.514740,130.022217 239.927536,130.017319 240.649261,130.016083 
	C240.987274,136.888351 246.240967,132.988068 249.572998,133.982483 
	C249.269196,134.510574 248.513519,135.036270 247.487549,135.750000 
	C248.273972,136.365814 248.984116,136.921875 249.849213,137.737579 
	C250.004166,137.997208 249.976715,138.033356 249.976715,138.033356 
	C249.119385,138.188828 248.262039,138.344284 247.200897,138.761200 
	C244.545593,137.941544 242.094131,136.860428 239.349884,135.914032 
	C239.057114,136.048752 238.992371,135.988464 238.995819,135.633636 
	C239.033493,133.528244 239.067703,131.777695 239.101929,130.027130 
z"/>
<path fill="#E1DEE3" opacity="1.000000" stroke="none" 
	d="
M249.953766,120.964188 
	C250.333969,120.168213 250.714188,119.372246 251.094391,118.576271 
	C251.353516,118.720009 251.612656,118.863739 251.871780,119.007469 
	C251.461197,119.650864 251.050629,120.294250 250.320190,120.971558 
	C250.000320,121.005470 249.953766,120.964188 249.953766,120.964188 
z"/>
<path fill="#DCD9E0" opacity="1.000000" stroke="none" 
	d="
M244.994629,124.991356 
	C245.454559,124.658112 245.923080,124.336555 246.699341,124.003876 
	C247.007050,123.992752 247.055450,124.022652 247.055450,124.022659 
	C246.576294,124.339584 246.097137,124.656509 245.321121,124.998825 
	C245.024277,125.024216 245.003204,125.003052 244.994629,124.991356 
z"/>
<path fill="#E1DEE3" opacity="1.000000" stroke="none" 
	d="
M247.950668,122.961693 
	C248.075974,122.651741 248.271347,122.395134 248.771255,122.096184 
	C249.005722,122.000488 249.053955,122.041992 249.053955,122.041992 
	C248.938492,122.359291 248.746017,122.619659 248.238129,122.914131 
	C247.999756,123.005165 247.950668,122.961693 247.950668,122.961693 
z"/>
<path fill="#E1DEE3" opacity="1.000000" stroke="none" 
	d="
M250.020752,121.028931 
	C249.917419,121.354607 249.726135,121.605331 249.260651,121.923279 
	C249.053955,122.041992 249.005722,122.000488 248.983948,121.976242 
	C249.094101,121.655113 249.288162,121.406784 249.749054,121.085609 
	C249.953766,120.964188 250.000320,121.005470 250.020752,121.028931 
z"/>
<path fill="#E1DEE3" opacity="1.000000" stroke="none" 
	d="
M252.533432,116.558914 
	C252.477280,116.591995 252.589584,116.525833 252.533432,116.558914 
z"/>
<path fill="#E1DEE3" opacity="1.000000" stroke="none" 
	d="
M254.521576,115.535599 
	C254.476883,115.558556 254.566269,115.512634 254.521576,115.535599 
z"/>
<path fill="#E1DEE3" opacity="1.000000" stroke="none" 
	d="
M246.991959,123.968643 
	C247.096848,123.644073 247.286057,123.396523 247.747559,123.081787 
	C247.950668,122.961693 247.999756,123.005165 248.021973,123.030586 
	C247.919495,123.354691 247.727493,123.600868 247.261826,123.908600 
	C247.055450,124.022652 247.007050,123.992752 246.991959,123.968643 
z"/>
<path fill="#DBD8DF" opacity="1.000000" stroke="none" 
	d="
M241.005157,153.590454 
	C240.016159,150.857620 239.036133,147.727417 238.019531,144.173279 
	C239.338669,144.910187 240.694382,146.071060 242.027954,147.614899 
	C242.005798,147.997894 241.963776,148.045013 241.963776,148.045013 
	C241.647217,149.761047 241.330673,151.477066 241.005157,153.590454 
z"/>
<path fill="#CFD0DA" opacity="1.000000" stroke="none" 
	d="
M246.992798,139.283661 
	C247.300995,139.461258 247.624146,139.945755 247.978790,140.730072 
	C247.676117,140.550110 247.341934,140.070328 246.992798,139.283661 
z"/>
<path fill="#BCC4D5" opacity="1.000000" stroke="none" 
	d="
M249.996338,150.276260 
	C250.303925,150.456848 250.631729,150.942261 250.986191,151.730453 
	C250.680756,151.549179 250.348663,151.065140 249.996338,150.276260 
z"/>
<path fill="#DBD8DF" opacity="1.000000" stroke="none" 
	d="
M246.006195,153.991669 
	C245.684280,153.525192 245.362366,153.058731 245.020233,152.296127 
	C245.000000,152.000000 245.002899,151.996338 245.002899,151.996338 
	C245.321548,152.468750 245.640198,152.941162 245.979324,153.706848 
	C245.999817,154.000122 246.006195,153.991669 246.006195,153.991669 
z"/>
<path fill="#DBD8DF" opacity="1.000000" stroke="none" 
	d="
M245.995331,154.003632 
	C246.104019,154.126251 246.217194,154.245392 246.330353,154.364517 
	C246.255676,154.321411 246.181000,154.278290 246.056259,154.113434 
	C246.006195,153.991669 245.999817,154.000122 245.995331,154.003632 
z"/>
<path fill="#DBD8DF" opacity="1.000000" stroke="none" 
	d="
M244.998016,152.001556 
	C244.886505,151.871658 244.776993,151.740189 244.667496,151.608719 
	C244.746323,151.653412 244.825165,151.698105 244.953445,151.869568 
	C245.002899,151.996338 245.000000,152.000000 244.998016,152.001556 
z"/>
<path fill="#BCC4D5" opacity="1.000000" stroke="none" 
	d="
M249.088715,149.190094 
	C249.252426,149.157700 249.520782,149.365677 249.906738,149.802002 
	C249.747345,149.830383 249.470337,149.630432 249.088715,149.190094 
z"/>
<path fill="#DBD8DF" opacity="1.000000" stroke="none" 
	d="
M243.053558,148.934662 
	C243.157654,149.104874 243.261749,149.275101 243.365845,149.445328 
	C243.264923,149.407013 243.164017,149.368713 243.030151,149.163910 
	C242.997177,148.997406 243.053543,148.934662 243.053558,148.934662 
z"/>
<path fill="#DBD8DF" opacity="1.000000" stroke="none" 
	d="
M242.965912,149.025696 
	C242.619904,148.943420 242.367493,148.751083 242.070587,148.261002 
	C241.963776,148.045013 242.005798,147.997894 242.030441,147.976135 
	C242.381027,148.043549 242.639923,148.227219 242.942657,148.720032 
	C243.053543,148.934662 242.997177,148.997406 242.965912,149.025696 
z"/>
<path fill="#FBFBFC" opacity="1.000000" stroke="none" 
	d="
M226.849823,147.467621 
	C227.706024,147.858871 228.397446,148.558640 229.113281,149.232468 
	C230.148468,150.206924 231.201355,151.162582 232.632751,152.101593 
	C233.014984,152.440613 233.011139,152.804276 232.751190,153.602417 
	C232.233002,154.352936 231.970963,154.668991 231.708893,154.985031 
	C231.373459,154.982925 231.038025,154.980820 230.455002,154.963577 
	C227.735962,156.634186 225.264511,158.319916 222.435883,160.037750 
	C222.529404,158.987183 222.980118,157.904526 223.763901,157.024246 
	C224.096970,157.226608 224.396271,157.239456 224.396271,157.239456 
	C224.396271,157.239456 224.007690,156.994171 224.007690,156.994171 
	C223.518234,155.479431 223.028778,153.964676 222.277222,152.229904 
	C222.109970,150.006775 222.186295,147.972855 224.974915,150.942841 
	C225.452225,152.455109 225.831726,153.314819 226.211227,154.174515 
	C226.480316,154.089432 226.749405,154.004349 227.018494,153.919266 
	C226.695343,152.956696 226.372192,151.994141 226.049042,151.031570 
	C226.264694,149.942566 226.480347,148.853546 226.849823,147.467621 
z"/>
<path fill="#D3D2DC" opacity="1.000000" stroke="none" 
	d="
M233.696747,159.201797 
	C233.876511,160.261581 233.876511,161.114395 233.876511,161.967224 
	C233.588226,161.943924 233.299957,161.920609 233.011673,161.897308 
	C233.180099,160.929825 233.348541,159.962326 233.696747,159.201797 
z"/>
<path fill="#CFD0DA" opacity="1.000000" stroke="none" 
	d="
M231.819046,155.246933 
	C231.970963,154.668991 232.233002,154.352936 232.760895,153.875824 
	C232.660889,154.312775 232.295044,154.910797 231.819046,155.246933 
z"/>
<path fill="#CFD0DA" opacity="1.000000" stroke="none" 
	d="
M254.212296,139.428802 
	C254.160248,139.596222 254.032715,139.650436 253.905182,139.704651 
	C253.982391,139.574951 254.059601,139.445267 254.212296,139.428802 
z"/>
<path fill="#CFD0DA" opacity="1.000000" stroke="none" 
	d="
M250.019867,137.980759 
	C250.431015,138.095428 250.826462,138.226547 251.221924,138.357666 
	C250.889740,138.373596 250.557541,138.389542 250.101044,138.219421 
	C249.976715,138.033356 250.004166,137.997208 250.019867,137.980759 
z"/>
<path fill="#189DD5" opacity="1.000000" stroke="none" 
	d="
M256.972504,148.022034 
	C256.659332,147.878448 256.443604,147.638718 256.227844,147.399002 
	C256.471771,147.370361 256.715698,147.341736 257.111755,147.522964 
	C257.263916,147.732834 257.069916,147.925919 256.972504,148.022034 
z"/>
<path fill="#F3F4F6" opacity="1.000000" stroke="none" 
	d="
M254.001984,134.003632 
	C255.909515,133.581802 257.814545,133.155792 259.719574,132.729797 
	C259.757446,133.159409 259.795319,133.589020 259.833221,134.018631 
	C258.159271,134.018631 256.485352,134.018631 254.401154,134.004700 
	C253.990891,133.990784 253.999496,133.999451 254.001984,134.003632 
z"/>
<path fill="#F9F9FB" opacity="1.000000" stroke="none" 
	d="
M220.472717,170.473785 
	C220.511612,170.453888 220.433807,170.493683 220.472717,170.473785 
z"/>
<path fill="#EBEBF0" opacity="1.000000" stroke="none" 
	d="
M180.018707,157.993271 
	C180.018707,157.993271 180.484894,157.980576 180.716675,157.959473 
	C180.784210,159.023529 180.619934,160.108704 180.375946,161.720505 
	C181.940872,160.856110 183.106842,160.212082 184.272827,159.568054 
	C184.554016,159.770859 184.835205,159.973648 185.116394,160.176453 
	C183.571609,162.608261 182.026840,165.040070 180.267639,167.694061 
	C178.568085,169.161758 177.082947,170.407272 175.355423,171.908264 
	C175.494934,169.181305 175.876831,166.198868 176.648178,163.447296 
	C177.416885,164.283264 177.796173,164.888336 178.175446,165.493423 
	C178.652512,164.797165 179.414307,164.151718 179.549469,163.394440 
	C179.865677,161.622559 179.881348,159.797058 180.018707,157.993271 
z"/>
<path fill="#F6F1F3" opacity="1.000000" stroke="none" 
	d="
M187.784363,196.414856 
	C188.482254,195.856125 189.201050,195.321350 189.874069,194.734100 
	C191.824158,193.032578 193.755859,191.309982 196.113235,189.306641 
	C196.531708,189.017654 197.020462,189.034332 197.020462,189.034332 
	C197.020462,189.034332 197.012009,189.512924 197.007538,190.137268 
	C197.335129,192.172699 197.667206,193.583817 197.999283,194.994919 
	C197.831467,195.540634 197.663651,196.086349 197.054413,196.929550 
	C196.332077,197.420303 196.134140,197.677475 196.019226,197.998535 
	C196.019226,197.998535 196.004623,198.005325 195.593079,198.003143 
	C193.010010,198.293030 190.838470,198.585114 188.666946,198.877182 
	C188.508835,198.767487 188.350708,198.657776 188.058990,197.876434 
	C187.878403,196.941483 187.831375,196.678177 187.784363,196.414856 
z"/>
<path fill="#3CA4D7" opacity="1.000000" stroke="none" 
	d="
M191.977661,186.192001 
	C192.520477,182.130478 193.086044,178.385757 193.690918,174.279388 
	C193.730209,173.917740 193.982529,173.609924 194.299515,173.312286 
	C195.137054,173.366455 195.657593,173.718262 196.086609,174.457352 
	C195.332886,177.899719 194.670685,180.954819 194.008484,184.009903 
	C193.638687,184.770874 193.268875,185.531845 192.679077,186.642334 
	C192.459061,186.991882 192.087738,187.138077 192.087738,187.138077 
	C192.058640,186.928314 192.029526,186.718567 191.977661,186.192001 
z"/>
<path fill="#E0E1E9" opacity="1.000000" stroke="none" 
	d="
M196.178162,174.070068 
	C195.657593,173.718262 195.137054,173.366455 194.355164,173.121216 
	C194.512726,171.035660 194.931641,168.843536 195.582397,165.438141 
	C197.237823,170.324860 198.650574,173.898117 199.558487,177.595352 
	C199.785278,178.518860 198.385544,179.841782 197.367264,180.613922 
	C196.726822,178.187851 196.452484,176.128952 196.178162,174.070068 
z"/>
<path fill="#E8ECF2" opacity="1.000000" stroke="none" 
	d="
M196.086624,174.457352 
	C196.452484,176.128952 196.726822,178.187851 197.008316,180.666351 
	C196.233826,182.028275 195.452148,182.970581 194.339478,183.961395 
	C194.670685,180.954819 195.332886,177.899719 196.086624,174.457352 
z"/>
<path fill="#E8ECF2" opacity="1.000000" stroke="none" 
	d="
M188.886734,199.168900 
	C190.838470,198.585114 193.010010,198.293030 195.590607,198.010864 
	C195.600861,198.563293 195.202026,199.105804 194.581375,199.768814 
	C192.608536,199.746414 190.857529,199.603516 188.886734,199.168900 
z"/>
<path fill="#E8ECF2" opacity="1.000000" stroke="none" 
	d="
M198.281403,194.838913 
	C197.667206,193.583817 197.335129,192.172699 197.002136,190.376526 
	C199.498993,190.896912 200.744781,192.219284 198.281403,194.838913 
z"/>
<path fill="#F6F1F3" opacity="1.000000" stroke="none" 
	d="
M196.006104,206.001160 
	C195.702621,206.123077 195.445694,206.315338 195.121613,206.790161 
	C194.581482,207.014114 194.162170,207.027176 193.430634,207.051575 
	C193.334351,206.205093 193.550293,205.347275 193.884567,204.246231 
	C194.499954,203.743469 194.997009,203.483963 195.977478,203.295822 
	C196.645142,203.911453 196.829391,204.455719 197.013641,204.999985 
	C197.013626,204.999985 197.002899,205.001663 196.785980,205.117416 
	C196.301956,205.435837 196.112885,205.695374 196.001846,206.011765 
	C196.001846,206.011765 195.999023,205.999863 196.006104,206.001160 
z"/>
<path fill="#D1D7E3" opacity="1.000000" stroke="none" 
	d="
M205.884033,181.109940 
	C206.725143,182.079269 207.319733,183.243256 207.917496,184.742371 
	C207.159622,183.819870 206.398560,182.562241 205.884033,181.109940 
z"/>
<path fill="#E8ECF2" opacity="1.000000" stroke="none" 
	d="
M197.241180,188.821640 
	C197.020462,189.034332 196.531708,189.017654 196.287323,189.010223 
	C196.011185,188.553497 195.979416,188.104172 195.966629,187.316269 
	C196.551193,186.641891 197.116791,186.306091 197.682388,185.970291 
	C197.608887,186.849838 197.535385,187.729401 197.241180,188.821640 
z"/>
<path fill="#EBEBF0" opacity="1.000000" stroke="none" 
	d="
M184.220001,157.745331 
	C183.997726,157.224167 184.048096,156.762665 184.098465,156.301178 
	C184.506088,156.406311 184.913696,156.511459 185.321320,156.616592 
	C185.045105,157.012726 184.768875,157.408875 184.220001,157.745331 
z"/>
<path fill="#E8E1D9" opacity="1.000000" stroke="none" 
	d="
M197.274857,204.761566 
	C196.829391,204.455719 196.645142,203.911453 196.234497,203.183258 
	C196.495377,202.420547 196.982635,201.841797 197.734863,201.131409 
	C197.999817,200.999771 197.985474,201.014572 197.985474,201.014572 
	C197.835663,202.184097 197.685867,203.353607 197.274857,204.761566 
z"/>
<path fill="#EBEBF0" opacity="1.000000" stroke="none" 
	d="
M183.990479,152.291443 
	C184.033813,152.291290 183.947144,152.291580 183.990479,152.291443 
z"/>
<path fill="#F6F1F3" opacity="1.000000" stroke="none" 
	d="
M197.995605,201.008087 
	C198.173279,200.663910 198.355194,200.311401 198.537094,199.958893 
	C198.472397,200.228668 198.407715,200.498474 198.164246,200.891418 
	C197.985474,201.014572 197.999817,200.999771 197.995605,201.008087 
z"/>
<path fill="#E8ECF2" opacity="1.000000" stroke="none" 
	d="
M192.250061,187.379959 
	C192.087738,187.138077 192.459061,186.991882 192.656158,186.961197 
	C193.127579,186.971405 193.401901,187.012299 194.085815,187.134216 
	C193.801041,187.350769 193.106720,187.486298 192.250061,187.379959 
z"/>
<path fill="#D1D7E3" opacity="1.000000" stroke="none" 
	d="
M208.159180,186.015152 
	C208.551483,186.236847 208.875839,186.806595 209.158081,187.713531 
	C208.914139,188.025879 208.712296,188.001038 208.223541,187.872528 
	C207.988174,187.300293 208.039719,186.831741 208.159180,186.015152 
z"/>
<path fill="#E8ECF2" opacity="1.000000" stroke="none" 
	d="
M196.235962,197.885651 
	C196.134140,197.677475 196.332077,197.420303 196.837433,197.122208 
	C196.924423,197.322144 196.721375,197.573929 196.235962,197.885651 
z"/>
<path fill="#D6D1DA" opacity="1.000000" stroke="none" 
	d="
M201.804123,196.079300 
	C201.906693,196.270905 201.732361,196.517426 201.297485,196.835663 
	C201.184616,196.644699 201.348053,196.386978 201.804123,196.079300 
z"/>
<path fill="#E8E1D9" opacity="1.000000" stroke="none" 
	d="
M196.222733,205.905457 
	C196.112885,205.695374 196.301956,205.435837 196.785919,205.122467 
	C196.906830,205.338455 196.720459,205.600922 196.222733,205.905457 
z"/>
<path fill="#EDEFF4" opacity="1.000000" stroke="none" 
	d="
M147.992004,118.998596 
	C148.771835,118.667847 149.551682,118.337112 150.666779,118.002731 
	C151.001328,118.443893 151.000641,118.888710 150.999969,119.666763 
	C151.000000,120.000000 151.000626,119.999084 151.000626,119.999084 
	C148.190353,120.176437 145.380096,120.353790 142.282471,120.269791 
	C141.995102,120.008438 142.002167,119.997963 142.396317,119.994583 
	C144.524307,119.660332 146.258163,119.329468 147.992004,118.998596 
z"/>
<path fill="#EDEFF4" opacity="1.000000" stroke="none" 
	d="
M157.966797,121.998619 
	C157.348999,121.962379 156.755615,121.923355 156.162231,121.884323 
	C156.165512,121.733345 156.168808,121.582367 156.172104,121.431389 
	C156.660034,121.467239 157.147964,121.503082 157.805603,121.744217 
	C157.975311,121.949501 157.991211,121.995827 157.966797,121.998619 
z"/>
<path fill="#EDEFF4" opacity="1.000000" stroke="none" 
	d="
M154.251740,117.006058 
	C154.161484,116.616905 154.326645,116.226349 154.491806,115.835793 
	C154.648209,116.071030 154.804626,116.306267 154.989502,116.770706 
	C154.847687,117.001495 154.677414,117.003082 154.251740,117.006058 
z"/>
<path fill="#EDEFF4" opacity="1.000000" stroke="none" 
	d="
M150.999466,120.000359 
	C150.998932,120.000717 151.395889,120.238235 151.395889,120.238235 
	C151.395889,120.238235 151.098312,120.222534 151.049469,120.110809 
	C151.000626,119.999084 151.000000,120.000000 150.999466,120.000359 
z"/>
<path fill="#E1DEE3" opacity="1.000000" stroke="none" 
	d="
M157.543121,140.481781 
	C157.565781,140.522461 157.520462,140.441116 157.543121,140.481781 
z"/>
<path fill="#E1DEE3" opacity="1.000000" stroke="none" 
	d="
M160.023438,139.031982 
	C159.934082,139.068497 159.821396,139.078705 159.828232,139.023773 
	C159.947769,138.958649 160.000107,139.005676 160.023438,139.031982 
z"/>
<path fill="#F9F9FB" opacity="1.000000" stroke="none" 
	d="
M180.008575,157.661438 
	C179.881348,159.797058 179.865677,161.622559 179.549469,163.394440 
	C179.414307,164.151718 178.652512,164.797165 178.175446,165.493423 
	C177.796173,164.888336 177.416885,164.283264 177.026718,163.340027 
	C177.334702,161.564651 177.653580,160.127411 178.103973,158.019928 
	C178.501038,156.562592 178.766586,155.775497 179.032135,154.988419 
	C179.032135,154.988419 178.997726,154.992493 179.000275,155.010406 
	C179.334686,155.795441 179.666565,156.562531 180.008575,157.661438 
z"/>
<path fill="#EBEBF0" opacity="1.000000" stroke="none" 
	d="
M173.980530,161.967499 
	C173.582275,162.461578 173.184036,162.955673 172.785782,163.449753 
	C172.741669,163.070847 172.697556,162.691940 173.084015,162.147003 
	C173.514572,161.980957 173.980530,161.967499 173.980530,161.967499 
z"/>
<path fill="#D6D1DA" opacity="1.000000" stroke="none" 
	d="
M178.763184,155.113327 
	C178.766586,155.775497 178.501038,156.562592 178.095459,157.629608 
	C178.135010,157.019104 178.314621,156.128662 178.763184,155.113327 
z"/>
<path fill="#EBEBF0" opacity="1.000000" stroke="none" 
	d="
M171.857269,166.368683 
	C171.964630,166.653809 171.884552,166.963593 171.804474,167.273392 
	C171.759583,166.980042 171.714706,166.686691 171.857269,166.368683 
z"/>
<path fill="#EBEBF0" opacity="1.000000" stroke="none" 
	d="
M174.610123,173.236267 
	C174.823410,173.421738 174.725861,173.719299 174.306396,174.126801 
	C174.124191,173.949265 174.229126,173.653137 174.610123,173.236267 
z"/>
<path fill="#EBEBF0" opacity="1.000000" stroke="none" 
	d="
M170.528168,169.482971 
	C170.545502,169.518021 170.510818,169.447937 170.528168,169.482971 
z"/>
<path fill="#D6D1DA" opacity="1.000000" stroke="none" 
	d="
M173.888245,161.829346 
	C173.980530,161.967499 173.514572,161.980957 173.282104,161.982880 
	C173.216873,161.596573 173.465652,161.498688 173.888245,161.829346 
z"/>
<path fill="#D6D1DA" opacity="1.000000" stroke="none" 
	d="
M174.543732,159.557312 
	C174.492523,159.587753 174.594955,159.526871 174.543732,159.557312 
z"/>
<path fill="#EDEDF1" opacity="1.000000" stroke="none" 
	d="
M160.465973,151.956787 
	C160.811462,151.818130 161.153946,151.895569 161.496429,151.972992 
	C161.151947,152.039627 160.807449,152.106262 160.465973,151.956787 
z"/>
<path fill="#DBD8DF" opacity="1.000000" stroke="none" 
	d="
M160.047226,147.046967 
	C159.637543,147.725616 159.166794,148.342743 158.353348,148.987122 
	C158.010666,149.014374 157.926971,148.946930 157.926971,148.946930 
	C158.378235,148.312790 158.829498,147.678650 159.572601,146.953247 
	C159.864456,146.862015 159.986160,146.985458 160.047226,147.046967 
z"/>
<path fill="#DBD8DF" opacity="1.000000" stroke="none" 
	d="
M156.943619,150.954758 
	C157.123703,150.411392 157.303787,149.868011 157.705414,149.135788 
	C157.926971,148.946930 158.010666,149.014374 158.051895,149.051910 
	C157.894241,149.623230 157.695374,150.157028 157.244965,150.844437 
	C156.993423,150.998062 156.943619,150.954758 156.943619,150.954758 
z"/>
<path fill="#DBD8DF" opacity="1.000000" stroke="none" 
	d="
M153.543335,155.454041 
	C153.576050,155.510712 153.510620,155.397369 153.543335,155.454041 
z"/>
<path fill="#DBD8DF" opacity="1.000000" stroke="none" 
	d="
M155.038834,153.030609 
	C154.933563,153.049530 154.828293,153.068451 154.863098,153.043976 
	C155.003159,153.000565 155.038834,153.030609 155.038834,153.030609 
z"/>
<path fill="#DBD8DF" opacity="1.000000" stroke="none" 
	d="
M156.057587,152.045959 
	C155.941315,152.361221 155.747208,152.617538 155.257050,152.922745 
	C155.038834,153.030609 155.003159,153.000565 154.987457,152.982544 
	C155.080444,152.648544 155.263870,152.384460 155.761810,152.084290 
	C156.001587,151.996277 156.057587,152.045959 156.057587,152.045959 
z"/>
<path fill="#DBD8DF" opacity="1.000000" stroke="none" 
	d="
M157.015625,151.022491 
	C156.921860,151.354568 156.734421,151.609726 156.266556,151.929169 
	C156.057587,152.045959 156.001587,151.996277 155.975769,151.967499 
	C156.064758,151.628891 156.253433,151.373703 156.729797,151.063950 
	C156.943619,150.954758 156.993423,150.998062 157.015625,151.022491 
z"/>
<path fill="#D1D7E3" opacity="1.000000" stroke="none" 
	d="
M149.457932,148.517731 
	C149.436172,148.477539 149.479691,148.557907 149.457932,148.517731 
z"/>
<path fill="#F7F7F9" opacity="1.000000" stroke="none" 
	d="
M147.661743,118.998779 
	C146.258163,119.329468 144.524307,119.660332 142.400574,119.990631 
	C142.470657,119.362717 142.930664,118.735374 143.703583,118.053955 
	C144.016525,117.999870 144.498260,117.995872 144.865784,118.205498 
	C145.440582,118.679131 145.699524,118.874680 146.010178,119.001770 
	C146.450607,119.000839 146.891037,118.999901 147.661743,118.998779 
z"/>
<path fill="#EDEFF4" opacity="1.000000" stroke="none" 
	d="
M145.886658,118.788834 
	C145.699524,118.874680 145.440582,118.679131 145.106659,118.204468 
	C145.294556,118.115852 145.555603,118.309883 145.886658,118.788834 
z"/>
<path fill="#E8E1D9" opacity="1.000000" stroke="none" 
	d="
M194.404724,102.878418 
	C193.738953,102.272179 193.356400,101.508270 192.953369,100.407112 
	C193.899216,99.877853 194.865540,99.685844 196.085968,99.220352 
	C196.340088,98.946869 196.644424,98.945526 196.795456,98.961411 
	C196.193634,100.225105 195.440796,101.472923 194.404724,102.878418 
z"/>
<path fill="#F8F8FA" opacity="1.000000" stroke="none" 
	d="
M200.833313,124.813293 
	C201.017197,125.016945 200.999466,125.510414 200.981537,125.756714 
	C200.526505,126.001785 200.089386,126.000549 199.324036,125.998299 
	C199.546997,125.534729 200.098206,125.072182 200.833313,124.813293 
z"/>
<path fill="#FBFBFC" opacity="1.000000" stroke="none" 
	d="
M238.973816,129.727936 
	C239.067703,131.777695 239.033493,133.528244 238.964142,135.602768 
	C238.202332,135.970108 237.475632,136.013474 236.383942,136.034637 
	C236.093063,133.858368 236.506683,131.642899 236.131821,129.570038 
	C235.841904,127.966866 234.564590,126.542244 233.363129,125.020737 
	C233.001801,124.246674 233.003616,123.490120 233.004349,122.354851 
	C234.753922,122.681282 236.504578,123.386429 238.608032,124.170403 
	C238.922455,125.975731 238.884079,127.702240 238.973816,129.727936 
z"/>
<path fill="#F9F9FB" opacity="1.000000" stroke="none" 
	d="
M172.086731,116.959976 
	C172.030945,117.693573 171.799484,118.276176 171.353271,119.094269 
	C171.099579,119.083656 171.060608,118.837555 170.958893,118.221184 
	C171.234451,117.503609 171.572769,117.156288 172.086731,116.959976 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M224.323639,116.900421 
	C224.461487,115.776215 224.895065,114.471725 225.685120,113.088226 
	C225.567505,114.246193 225.093430,115.483170 224.323639,116.900421 
z"/>
<path fill="#F5F6F9" opacity="1.000000" stroke="none" 
	d="
M227.258835,111.886063 
	C227.470276,111.333633 227.935043,110.662872 228.722000,109.972351 
	C229.044205,109.952591 229.024719,109.977196 229.018433,110.229477 
	C229.007141,110.651054 229.002136,110.820351 228.997131,110.989647 
	C228.502136,111.249008 228.007156,111.508369 227.258835,111.886063 
z"/>
<path fill="#F3F1F3" opacity="1.000000" stroke="none" 
	d="
M229.147461,110.897675 
	C229.002136,110.820351 229.007141,110.651054 229.026093,110.227936 
	C229.181595,110.148911 229.343643,110.312286 229.451553,110.505836 
	C229.481918,110.560287 229.353424,110.703300 229.147461,110.897675 
z"/>
<path fill="#E8ECF2" opacity="1.000000" stroke="none" 
	d="
M187.624130,196.598785 
	C187.831375,196.678177 187.878403,196.941483 187.962769,197.604279 
	C187.821381,197.596741 187.642639,197.189728 187.624130,196.598785 
z"/>
<path fill="#FAFAFB" opacity="1.000000" stroke="none" 
	d="
M225.790222,151.016846 
	C226.372192,151.994141 226.695343,152.956696 227.018494,153.919266 
	C226.749405,154.004349 226.480316,154.089432 226.211227,154.174515 
	C225.831726,153.314819 225.452225,152.455109 225.043579,151.278946 
	C225.186752,150.975677 225.359085,150.988892 225.790222,151.016846 
z"/>
<path fill="#FAFAFB" opacity="1.000000" stroke="none" 
	d="
M224.003845,156.997086 
	C224.007690,156.994171 224.396271,157.239456 224.396271,157.239456 
	C224.396271,157.239456 224.096970,157.226608 224.045700,157.117035 
	C223.994431,157.007462 224.000000,157.000000 224.003845,156.997086 
z"/>
</svg>
--- END FILE: BLOX-TAK.svg ---

--- START FILE: CODE_OF_CONDUCT.md ---
## Contributor Covenant Code of Conduct

### Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, religion, or sexual identity
and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

### Our Standards

Examples of behavior that contributes to a positive environment for our
community include:

* Demonstrating empathy and kindness toward other people
* Being respectful of differing opinions, viewpoints, and experiences
* Giving and gracefully accepting constructive feedback
* Accepting responsibility and apologizing to those affected by our mistakes,
    and learning from the experience
* Focusing on what is best not just for us as individuals, but for the
    overall community

Examples of unacceptable behavior include:

* The use of sexualized language or imagery, and sexual attention or
    advances of any kind
* Trolling, insulting or derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information, such as a physical or email
    address, without their explicit permission
* Other conduct which could reasonably be considered inappropriate in a
    professional setting

### Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards and
will take appropriate and fair corrective action in response to any behavior
that they deem inappropriate, threatening, offensive, or harmful.

Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.

### Scope

This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official e-mail address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.

### Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement at
**luke.strider.gm@gmail.com**.
All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the
reporter of any incident.

### Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.

**Consequence**: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series
of actions.

**Consequence**: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interaction in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or
permanent ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including
sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior, harassment of an
individual, or aggression toward or disparagement of classes of individuals.

**Consequence**: A permanent ban from any sort of public interaction within
the community.

---
Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage],
version 2.1, available at
[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].

[homepage]: https://www.contributor-covenant.org
[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html
--- END FILE: CODE_OF_CONDUCT.md ---

--- START FILE: LICENSE ---
MIT License

Copyright (c) 2025 Łukasz "LukeStriderGM" Andruszkiewicz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
--- END FILE: LICENSE ---

--- START FILE: README.md ---
# BLOX-TAK-SERVER-IUCP

IUCP - Individual User Connection Profile

A suite of automation scripts designed to manage the entire lifecycle of user onboarding for a TAK (Team Awareness Kit) server from "Google Forms" or csv file. The project handles certificate generation, configuration packaging, email distribution, and various server maintenance tasks.

---

<details>
<summary>🇵🇱 Wersja Polska (kliknij, aby rozwinąć)</summary>

# BLOX-TAK-SERVER-IPPU

IPPU - Indywidualny Profil Połączeniowy Użytkownika

Zestaw skryptów automatyzujących, zaprojektowany do zarządzania całym cyklem wdrażania użytkowników na serwerze TAK (Team Awareness Kit) z "Formualrzy Google" lub pliku csv. Projekt obsługuje generowanie certyfikatów, pakowanie konfiguracji, dystrybucję e-mailem oraz różne zadania związane z konserwacją serwera.

---
</details>

## 🇺🇸 Features / 🇵🇱 Funkcjonalności

* **Automated User Onboarding**: Fetches user data from a Google Sheet to process multiple users in a batch.
* **Certificate Management**: Generates and revokes user-specific `.p12` client certificates for TAK server authentication.
* **Configuration Packaging**: Creates ATAK preference files (`.pref`) and packages all user-specific files into a single `.zip` archive.
* **Email Distribution**: Automatically sends the generated user package via email using the Gmail API.
* **Server Maintenance Scripts**: Includes helper scripts for updating server configurations like Mumble and WireGuard.
* **Flexible Execution Modes**: Can be run in `local` mode (if the script is on the same machine as the TAK server) or `remote` mode (controlling a remote server via SSH).
* **Bilingual Interface**: All scripts provide interactive prompts and status messages in both English and Polish.

---
* **Automatyczne Wdrażanie Użytkowników**: Pobiera dane użytkowników z Arkusza Google w celu wsadowego przetwarzania wielu użytkowników.
* **Zarządzanie Certyfikatami**: Generuje i odwołuje certyfikaty klienckie `.p12` specyficzne dla użytkownika, służące do uwierzytelniania na serwerze TAK.
* **Pakowanie Konfiguracji**: Tworzy pliki preferencji ATAK (`.pref`) i pakuje wszystkie pliki użytkownika w jedno archiwum `.zip`.
* **Dystrybucja E-mailem**: Automatycznie wysyła wygenerowaną paczkę dla użytkownika za pośrednictwem poczty e-mail przy użyciu Gmail API.
* **Skrypty Konserwacyjne**: Zawiera skrypty pomocnicze do aktualizacji konfiguracji serwerów, takich jak Mumble i WireGuard.
* **Elastyczne Tryby Pracy**: Może być uruchamiany w trybie `local` (gdy skrypt znajduje się na tej samej maszynie co serwer TAK) lub `remote` (sterując zdalnym serwerem przez SSH).
* **Dwujęzyczny Interfejs**: Wszystkie skrypty zapewniają interaktywne monity i komunikaty o stanie w języku angielskim i polskim.

## 🇺🇸 Prerequisites / 🇵🇱 Wymagania Wstępne

* Python 3.8+
* A working TAK Server installation.
* System dependencies: `yq`, `sshpass`, `zip`, `qrencode`.
    ```bash
    sudo apt-get update && sudo apt-get install yq sshpass zip qrencode
    ```
* A Google Cloud Platform project with the **Gmail API** enabled. You must download the `client_secret.json` credentials file.

Example "Google Form" and its sheet in "Google Sheets":
* https://forms.gle/sFrsnXiwdvajEnMw7
* https://docs.google.com/spreadsheets/d/1CM2LOH7eukbyAVMIsMpIQJ5oqltqE2DO8u90WjYsdDk

---
* Python 3.8+
* Działająca instalacja serwera TAK.
* Zależności systemowe: `yq`, `sshpass`, `zip`, `qrencode`.
    ```bash
    sudo apt-get update && sudo apt-get install yq sshpass zip qrencode
    ```
* Projekt w Google Cloud Platform z włączonym **Gmail API**. Musisz pobrać plik poświadczeń `client_secret.json`.

Przykładowy "Formularz Google" i jego arkusz w "Google Sheets":
* https://forms.gle/eXdWgruSUeK7bcXp8
* https://docs.google.com/spreadsheets/d/1RDjmTp9mFpW1pEMcim6r5MV7lYj1juzRuxsh3UYDvpU

## 🇺🇸 Setup / 🇵🇱 Konfiguracja

1.  **Clone the repository:**
    ```bash
    git clone https://github.com/LukeStriderGM/BLOX-TAK-SERVER-IUCP.git
    cd BLOX-TAK-SERVER-IUCP
    ```

2.  **Create and activate a Python virtual environment:**
    ```bash
    python3 -m venv .venv
    source .venv/bin/activate
    ```

3.  **Install Python dependencies:**
    ```bash
    pip install -r requirements.txt
    ```

4.  **Configure `config.yaml`:**
    Rename `config.example.yaml` to `config.yaml` and fill in all the required values. **This step is crucial.**

    ```yaml
    # ==============================================================================
    # === SECURITY - Sensitive data and credentials
    # === SECURITY - Wrażliwe dane i poświadczenia
    # ==============================================================================
    security:
      # WARNING: Storing a plaintext password is a significant security risk.
      # OSTRZEŻENIE: Przechowywanie hasła w postaci czystego tekstu jest znaczącym ryzykiem bezpieczeństwa.
      sudo_pswd: '*****'

      # Absolute path to the Google API client_secret.json file.
      # Absolutna ścieżka do pliku client_secret.json od Google API.
      api_creds_path: /home/*****/BLOX-TAK-SERVER-IUCP/client_secret.json

    # ==============================================================================
    # === PATHS - Paths to key project directories
    # === PATHS - Ścieżki do kluczowych katalogów projektu
    # ==============================================================================
    paths:
      # Directory where the final .zip packages for users will be saved.
      # Katalog, w którym będą zapisywane finalne paczki .zip dla użytkowników.
      attachment_output: /home/*****/BLOX-TAK-SERVER-IUCP/

      # Directory where generated .pref and certificate files are placed before packaging.
      # Katalog, w którym generowane są pliki .pref i certyfikaty przed spakowaniem.
      preferences_output: /home/*****/BLOX-TAK-SERVER-IUCP/IUCP-IPPU_PACKAGE/certs/

      # The absolute path to the project's root directory.
      # Absolutna ścieżka do głównego katalogu projektu.
      project_root: /home/*****/BLOX-TAK-SERVER-IUCP/

    # ==============================================================================
    # === USER MANAGEMENT - User data management
    # === USER MANAGEMENT - Zarządzanie danymi użytkowników
    # ==============================================================================
    user_management:
      # Public URLs to the Google Sheets (published as CSV) containing user data.
      # Publiczne URL-e do Arkuszy Google (opublikowanych jako CSV) z danymi użytkowników.
      data_sources:
        en: https://docs.google.com/spreadsheets/d/e/2PACX-1vR-r4HG3Qdelr4fqt9GxmA7pljbFRxwsQRddxF6qY6FChMMYlC_trLesLgF8ayjhWe00n7PeuUQ6TSp/pub?gid=754383885&single=true&output=csv
        pl: https://docs.google.com/spreadsheets/d/e/2PACX-1vRdndMsKWQbT6RtHunuyoizVTeNE60RTRBh8OSlGY9FDEwcmqKwPaTB96b-rBDR7aImSjHk3l9x4hV_/pub?gid=1887676185&single=true&output=csv

      # --- Runtime State ---
      # This section is managed automatically by the scripts. Do not edit manually.
      # Ta sekcja jest zarządzana automatycznie przez skrypty. Nie edytuj ręcznie.
      state:
        client_name: '*****'
        email_address: '*.*.*@gmail.com'
        registration_date: '*-*-* *:*:*'
        number_users: 0
        user_index: 0
        user_type: EN

    email:
      # Set the email address you want to send messages from.
      # Ustaw adres e-mail, z którego chcesz wysyłać wiadomości.
      sender_email: '*.*.*@gmail.com'

    # ==============================================================================
    # === NETWORK - Network configuration
    # === NETWORK - Konfiguracja sieciowa
    # ==============================================================================
    network:
      # The external IP of the server, automatically detected by check_ip.py.
      # Zewnętrzny adres IP serwera, automatycznie wykrywany przez check_ip.py.
      external_ip: '*.*.*.*'

      # Details for the remote server if 'remote' mode is used.
      # Dane zdalnego serwera, używane w trybie 'remote'.
      remote_server:
        host: '*.*.*.*'
        user: '*****'

    # ==============================================================================
    # === EXECUTION - Script execution mode
    # === EXECUTION - Tryb pracy skryptów
    # ==============================================================================
    execution:
      # The operating mode of the scripts: 'local' or 'remote'. Managed by set_mode.py.
      # Tryb pracy skryptów: 'local' lub 'remote'. Zarządzany przez set_mode.py.
      mode: remote
    ```
5.  **Make shell scripts executable:**
    ```bash
    chmod +x *.sh
    ```

---
1.  **Sklonuj repozytorium:**
    ```bash
    git clone https://github.com/LukeStriderGM/BLOX-TAK-SERVER-IUCP.git
    cd BLOX-TAK-SERVER-IUCP
    ```
2.  **Stwórz i aktywuj wirtualne środowisko Pythona:**
    ```bash
    python3 -m venv .venv
    source .venv/bin/activate
    ```
3.  **Zainstaluj zależności Pythona:**
    ```bash
    pip install -r requirements.txt
    ```
4.  **Skonfiguruj `config.yaml`:**
    Zmień nazwę `config.example.yaml` na `config.yaml` i uzupełnij wszystkie wymagane wartości. **Ten krok jest kluczowy.**
    *Powyżej znajduje się przykład struktury pliku.*

5.  **Nadaj skryptom powłoki uprawnienia do wykonania:**
    ```bash
    chmod +x *.sh
    ```

## 🇺🇸 Usage / 🇵🇱 Użycie

The project is designed to be run from a central orchestrator script (`start.py`) but also contains standalone helper scripts.

### Main Onboarding Process
This is the primary workflow for generating certificates and packages for new users.

1.  **Set the execution mode** (optional, as the script will ask if not set):
    ```bash
    python3 set_mode.py 
    ```
2.  **Run the main orchestrator:**
    ```bash
    python3 start.py
    ```
    The script will guide you through selecting a language and then automatically process all users from the configured Google Sheet.

### Other Scripts
* **`revoke.py`**: A master script to revoke certificates for all users in a Google Sheet.
* **`update_android_wg.sh`**: Updates the WireGuard configuration for the Android client and generates a new QR code.
* **`make_cert_mumble.sh`**: Generates and copies a certificate for a Mumble server.

---

Projekt jest zaprojektowany do uruchamiania z centralnego skryptu-orkiestratora (`start.py`), ale zawiera również samodzielne skrypty pomocnicze.

### Główny Proces Wdrażania
To główny przepływ pracy do generowania certyfikatów i paczek dla nowych użytkowników.

1.  **Ustaw tryb pracy** (opcjonalne, skrypt zapyta, jeśli nie jest ustawiony):
    ```bash
    python3 set_mode.py 
    ```
2.  **Uruchom główny skrypt-orkiestrator:**
    ```bash
    python3 start.py
    ```
    Skrypt poprowadzi Cię przez wybór języka, a następnie automatycznie przetworzy wszystkich użytkowników ze skonfigurowanego Arkusza Google.

### Inne Skrypty
* **`revoke.py`**: Główny skrypt do odwoływania certyfikatów dla wszystkich użytkowników z Arkusza Google.
* **`update_android_wg.sh`**: Aktualizuje konfigurację WireGuard dla klienta Android i generuje nowy kod QR.
* **`make_cert_mumble.sh`**: Generuje i kopiuje certyfikat dla serwera Mumble.


## 🇺🇸 License / 🇵🇱 Licencja

This project is licensed under the MIT License. See the `LICENSE` file for details.

---

Ten projekt jest udostępniany na licencji MIT. Zobacz plik `LICENSE`, aby uzyskać szczegółowe informacje.

Tłumaczenie [PL]:

Licencja MIT

Prawa autorskie (c) 2025 Łukasz "LukeStriderGM" Andruszkiewicz

Niniejszym udziela się bezpłatnej zgody każdej osobie wchodzącej w posiadanie kopii
tego oprogramowania i powiązanych z nim plików dokumentacji (dalej „Oprogramowanie”),
na obchodzenie się z Oprogramowaniem bez ograniczeń, włączając w to bez ograniczeń
prawa do używania, kopiowania, modyfikowania, łączenia, publikowania, dystrybucji,
sublicencjonowania i/lub sprzedaży kopii Oprogramowania, oraz na zezwolenie osobom,
którym Oprogramowanie jest dostarczane, aby to czyniły, pod następującymi warunkami:

Powyższa nota o prawach autorskich i ta nota o pozwoleniu muszą być dołączone do wszystkich
kopii lub istotnych części Oprogramowania.

OPROGRAMOWANIE JEST DOSTARCZANE "TAKIM, JAKIE JEST", BEZ JAKIEJKOLWIEK GWARANCJI,
WYRAŹNEJ LUB DOROZUMIANEJ, WŁĄCZAJĄC W TO, ALE NIE OGRANICZAJĄC SIĘ DO, GWARANCJI
PRZYDATNOŚCI HANDLOWEJ, PRZYDATNOŚCI DO OKREŚLONEGO CELU ORAZ NIENARUSZALNOŚCI PRAW.
W ŻADNYM WYPADKU AUTORZY LUB POSIADACZE PRAW AUTORSKICH NIE BĘDĄ ODPOWIEDZIALNI
ZA JAKIEKOLWIEK ROSZCZENIA, SZKODY LUB INNE ZOBOWIĄZANIA, CZY TO W WYNIKU DZIAŁANIA
UMOWY, DELIKTU CZY W INNY SPOSÓB, WYNIKAJĄCE Z, LUB W ZWIĄZKU Z OPROGRAMOWANIEM
LUB UŻYCIEM LUB INNYMI DZIAŁANIAMI W OPROGRAMOWANIU.


## 🇺🇸 Code of Conduct / 🇵🇱 Kodeks Postępowania

This project and everyone participating in it is governed by the Contributor Covenant. See the `CODE_OF_CONDUCT.md` file for details.

Ten projekt i wszyscy jego uczestnicy podlegają zasadom Contributor Covenant. Zobacz plik `CODE_OF_CONDUCT.md`, aby uzyskać szczegółowe informacje.

Tłumaczenie [PL]:


## Kodeks Postępowania - Contributor Covenant

### Nasza Obietnica

Jako członkinie i członkowie, współtwórczynie i współtwórcy oraz liderki i liderzy
zobowiązujemy się, że udział w naszej społeczności będzie wolny od nękania dla
każdego, bez względu na wiek, budowę ciała, widoczną lub niewidoczną
niepełnosprawność, pochodzenie etniczne, cechy płciowe, tożsamość i ekspresję
płciową, poziom doświadczenia, wykształcenie, status społeczno-ekonomiczny,
narodowość, wygląd, rasę, religię czy tożsamość i orientację seksualną.

Zobowiązujemy się do działania i interakcji w sposób, który przyczynia się do
tworzenia otwartej, przyjaznej, zróżnicowanej, inkluzywnej i zdrowej społeczności.

### Nasze Standardy

Przykłady zachowań, które przyczyniają się do tworzenia pozytywnego środowiska
dla naszej społeczności, obejmują:

* Okazywanie empatii i życzliwości wobec innych osób
* Szacunek dla odmiennych opinii, punktów widzenia i doświadczeń
* Udzielanie i taktowne przyjmowanie konstruktywnej informacji zwrotnej
* Przyjmowanie odpowiedzialności, przepraszanie osób dotkniętych naszymi
    błędami i wyciąganie z nich wniosków
* Skupianie się nie tylko na tym, co najlepsze dla nas jako jednostek, ale dla
    całej społeczności

Przykłady niedopuszczalnych zachowań obejmują:

* Używanie języka lub obrazów o charakterze seksualnym oraz wszelkiego rodzaju
    zaloty lub umizgi o charakterze seksualnym
* Trolling, obraźliwe lub uwłaczające komentarze oraz ataki osobiste lub
    polityczne
* Nękanie publiczne lub prywatne
* Publikowanie prywatnych informacji innych osób, takich jak adres fizyczny lub
    mailowy, bez ich wyraźnej zgody
* Inne zachowania, które można by uznać za niewłaściwe w środowisku
    profesjonalnym

### Obowiązki Egzekwowania Zasad

Liderki i liderzy społeczności są odpowiedzialni za wyjaśnianie i egzekwowanie
naszych standardów oraz podejmą odpowiednie i sprawiedliwe działania naprawcze w
odpowiedzi na każde zachowanie, które uznają za niestosowne, zagrażające,
obraźliwe lub szkodliwe.

Liderki i liderzy społeczności mają prawo i obowiązek usuwać, edytować lub
odrzucać komentarze, commity, kod, edycje wiki, zgłoszenia i inne formy wkładu,
które nie są zgodne z niniejszym Kodeksem Postępowania, i w razie potrzeby
przedstawią powody swoich decyzji moderacyjnych.

### Zakres

Niniejszy Kodeks Postępowania obowiązuje we wszystkich przestrzeniach
społeczności, a także wtedy, gdy dana osoba oficjalnie reprezentuje społeczność w
przestrzeni publicznej. Przykłady reprezentowania naszej społeczności obejmują
używanie oficjalnego adresu e-mail, publikowanie postów za pośrednictwem
oficjalnego konta w mediach społecznościowych lub występowanie w charakterze
wyznaczonej przedstawicielki lub przedstawiciela na wydarzeniu online lub offline.

### Egzekwowanie Zasad

Przypadki obraźliwego, nękającego lub w inny sposób niedopuszczalnego zachowania
mogą być zgłaszane liderkom i liderom społeczności odpowiedzialnym za egzekwowanie
zasad pod adresem **luke.strider.gm@gmail.com**.
Wszystkie skargi zostaną rozpatrzone i zbadane niezwłocznie i sprawiedliwie.

Wszystkie liderki i liderzy społeczności są zobowiązani do poszanowania prywatności i
bezpieczeństwa osoby zgłaszającej incydent.

### Wytyczne Dotyczące Egzekwowania Zasad

Liderki i liderzy społeczności będą postępować zgodnie z niniejszymi Wytycznymi
Dotyczącymi Wpływu na Społeczność przy określaniu konsekwencji za każde
działanie, które uznają za naruszenie niniejszego Kodeksu Postępowania:

### 1. Naprawienie

**Wpływ na Społeczność**: Używanie niestosownego języka lub inne zachowanie uznane
za nieprofesjonalne lub niemile widziane w społeczności.

**Konsekwencja**: Prywatne, pisemne upomnienie od liderek lub liderów społeczności,
wyjaśniające naturę naruszenia i powód, dla którego zachowanie było
niestosowne. Może zostać zażądane publiczne przeproszenie.

### 2. Ostrzeżenie

**Wpływ na Społeczność**: Naruszenie w wyniku pojedynczego incydentu lub serii
działań.

**Konsekwencja**: Ostrzeżenie z konsekwencjami za dalsze zachowanie. Zakaz
interakcji z osobami zaangażowanymi, w tym nieproszonych interakcji z osobami
egzekwującymi Kodeks Postępowania, przez określony czas. Obejmuje to unikanie
interakcji w przestrzeniach społeczności, jak i na kanałach zewnętrznych, takich
jak media społecznościowe. Naruszenie tych warunków może prowadzić do
tymczasowego lub stałego bana.

### 3. Tymczasowy Ban

**Wpływ na Społeczność**: Poważne naruszenie standardów społeczności, w tym
utrzymujące się niestosowne zachowanie.

**Konsekwencja**: Tymczasowy zakaz jakichkolwiek interakcji lub publicznej
komunikacji ze społecznością na określony czas. W tym okresie zabronione są
publiczne i prywatne interakcje z osobami zaangażowanymi, w tym nieproszone
interakcje z osobami egzekwującymi Kodeks Postępowania. Naruszenie tych
warunków może prowadzić do stałego bana.

### 4. Stały Ban

**Wpływ na Społeczność**: Wykazywanie wzorca naruszania standardów społeczności,
w tym utrzymujące się niestosowne zachowanie, nękanie danej osoby lub agresja
wobec lub oczernianie grup osób.

**Konsekwencja**: Stały zakaz jakichkolwiek publicznych interakcji w ramach
społeczności.

---
Atrybucja

Niniejszy Kodeks Postępowania jest adaptacją [Contributor Covenant][homepage],
wersja 2.1, dostępnej pod adresem
[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].

[homepage]: https://www.contributor-covenant.org
[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html

---
--- END FILE: README.md ---

--- START FILE: bundle_project.py ---
import os
import datetime

# =====================================================================================
# === CONFIGURATION ===
# === KONFIGURACJA ===
# =====================================================================================

# The name of the output file that will contain all the bundled files.
# Nazwa pliku wyjściowego, który będzie zawierał wszystkie spakowane pliki.
OUTPUT_FILENAME = "codebase_bundle.txt"

# List of directories to absolutely exclude from the bundling process.
# Lista katalogów do bezwzględnego wykluczenia z procesu pakowania.
DIRECTORIES_TO_EXCLUDE = {
    '.git',
    '.idea',
    '.venv',
    '__pycache__',
    # We exclude the directory with generated packages to avoid including certificates.
    # Wykluczamy katalog z wygenerowanymi paczkami, aby nie dołączyć certyfikatów.
    'IUCP-IPPU_PACKAGE'
}

# List of specific files to exclude (e.g., configuration files with passwords).
# Lista konkretnych plików do wykluczenia (np. pliki konfiguracyjne z hasłami).
FILES_TO_EXCLUDE = {
    OUTPUT_FILENAME,
    'token.json',  # Google API session token. / Token sesji Google API.
    'client_secret.json'  # Google API key. / Klucz Google API.
    'config.yaml'
}

# List of file extensions to be ignored.
# Lista rozszerzeń plików, które mają być ignorowane.
EXTENSIONS_TO_EXCLUDE = {
    '.p12',
    '.zip',
    '.png',
    '.log',
    '.tmp'
}


# =====================================================================================
# === MAIN SCRIPT LOGIC ===
# === GŁÓWNA LOGIKA SKRYPTU ===
# =====================================================================================

def bundle_project_files():
    """
    Walks through the project directory, collects the content of all allowed
    files, and saves them into a single, large text file.

    Przechodzi przez katalog projektu, zbiera zawartość wszystkich dozwolonych
    plików i zapisuje je w jednym, dużym pliku tekstowym.
    """
    project_root = os.path.abspath(os.path.dirname(__file__))

    print("Starting project bundling...")
    print("Rozpoczynam pakowanie projektu...")
    print(f"Root directory: {project_root}")
    print(f"Katalog główny: {project_root}")
    print(f"Output file: {OUTPUT_FILENAME}\n")
    print(f"Plik wyjściowy: {OUTPUT_FILENAME}\n")

    try:
        with open(OUTPUT_FILENAME, 'w', encoding='utf-8') as bundle_file:
            # Write a header to the output file
            # Zapisujemy nagłówek w pliku wyjściowym
            bundle_file.write(f"Project Bundle: {os.path.basename(project_root)}\n")
            bundle_file.write(f"Generated on: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            bundle_file.write("=" * 40 + "\n\n")

            # We use os.walk to recursively browse directories
            # Używamy os.walk do rekurencyjnego przeglądania katalogów
            for root, dirs, files in os.walk(project_root, topdown=True):
                # We modify the 'dirs' list in-place to exclude unwanted directories
                # Modyfikujemy listę 'dirs' w locie, aby wykluczyć niechciane katalogi
                dirs[:] = [d for d in dirs if d not in DIRECTORIES_TO_EXCLUDE]

                for filename in sorted(files):
                    # Check if the file or its extension are on the exclusion list
                    # Sprawdzamy, czy plik lub jego rozszerzenie nie są na liście wykluczonych
                    if filename in FILES_TO_EXCLUDE or any(filename.endswith(ext) for ext in EXTENSIONS_TO_EXCLUDE):
                        print(f"--- Skipping file: {filename}")
                        print(f"--- Pomijam plik: {filename}")
                        continue

                    file_path = os.path.join(root, filename)
                    relative_path = os.path.relpath(file_path, project_root)

                    print(f"+++ Adding file: {relative_path}")
                    print(f"+++ Dodaję plik: {relative_path}")

                    # Write a header for each file
                    # Zapisujemy nagłówek dla każdego pliku
                    bundle_file.write(f"--- START FILE: {relative_path} ---\n")

                    try:
                        with open(file_path, 'r', encoding='utf-8', errors='ignore') as source_file:
                            bundle_file.write(source_file.read())
                    except Exception as e:
                        bundle_file.write(f"\n[ERROR READING FILE / BŁĄD ODCZYTU PLIKU: {e}]\n")

                    # Write a footer for each file
                    # Zapisujemy stopkę dla każdego pliku
                    bundle_file.write(f"\n--- END FILE: {relative_path} ---\n\n")

        print("\nProject bundling completed successfully!")
        print("Pakowanie projektu zakończone pomyślnie!")
        print(f"The result has been saved to the file: {OUTPUT_FILENAME}")
        print(f"Wynik został zapisany w pliku: {OUTPUT_FILENAME}")

    except IOError as e:
        print(f"\nERROR: Could not write to the output file: {e}")
        print(f"BŁĄD: Nie można zapisać pliku wyjściowego: {e}")
    except Exception as e:
        print(f"\nERROR: An unexpected error occurred: {e}")
        print(f"BŁĄD: Wystąpił nieoczekiwany problem: {e}")


if __name__ == "__main__":
    bundle_project_files()
--- END FILE: bundle_project.py ---

--- START FILE: check_ip.py ---
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# =====================================================================================
# === SCRIPT TO CHECK AND UPDATE EXTERNAL IP ADDRESS ===
# === SKRYPT DO SPRAWDZANIA I AKTUALIZACJI ZEWNĘTRZNEGO ADRESU IP ===
# =====================================================================================

import os
import time
import requests
import yaml
import subprocess


# =====================================================================================
# === MAIN SCRIPT LOGIC ===
# === GŁÓWNA LOGIKA SKRYPTU ===
# =====================================================================================

def check_and_update_ip(config_path: str = "config.yaml"):
    """
    Checks the public IP of the local or remote machine depending on the mode
    set in the configuration file and updates that file accordingly.

    Sprawdza publiczny adres IP maszyny lokalnej lub zdalnej w zależności od trybu
    ustawionego w pliku konfiguracyjnym i aktualizuje ten plik.
    """
    # --- Step 1: Loading configuration and execution mode ---
    # --- Krok 1: Wczytanie konfiguracji i trybu pracy ---
    try:
        with open(config_path, 'r', encoding='utf-8') as file:
            config_data = yaml.safe_load(file)

        mode = config_data.get('execution', {}).get('mode')
        if not mode:
            raise KeyError("Execution mode 'mode' is not defined in the 'execution' section.")

        sudo_pswd = config_data['security']['sudo_pswd']
        remote_user = config_data['network']['remote_server']['user']
        remote_host = config_data['network']['remote_server']['host']

    except FileNotFoundError:
        print(f"ERROR: Configuration file '{config_path}' not found!")
        print(f"BŁĄD: Plik konfiguracyjny '{config_path}' nie został znaleziony!")
        return
    except KeyError as e:
        print(f"ERROR: Invalid structure in '{config_path}'. Check missing key: {e}")
        print(f"BŁĄD: Nieprawidłowa struktura pliku '{config_path}'. Sprawdź brakujący klucz: {e}")
        return

    # --- Step 2: Fetching the IP address according to the loaded mode ---
    # --- Krok 2: Pobranie adresu IP zgodnie z wczytanym trybem ---
    ip_address = None
    ip_service_url = "https://api.ipify.org"
    print("---")

    if mode == 'local':
        print("LOCAL mode read. Checking this machine's IP address...")
        print("Odczytano tryb LOKALNY. Sprawdzam adres IP tej maszyny...")
        try:
            response = requests.get(ip_service_url, timeout=10)
            response.raise_for_status()
            ip_address = response.text.strip()
        except requests.exceptions.RequestException as e:
            print(f"\nNETWORK ERROR: Could not get IP from {ip_service_url}. {e}")
            print(f"BŁĄD SIECIOWY: Nie można pobrać IP z {ip_service_url}. {e}")
            return

    elif mode == 'remote':
        print(f"REMOTE mode read. Checking server's IP address: {remote_host}...")
        print(f"Odczytano tryb ZDALNY. Sprawdzam adres IP serwera: {remote_host}...")
        try:
            command = f"sshpass -p '{sudo_pswd}' ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 {remote_user}@{remote_host} 'curl -s {ip_service_url}'"
            result = subprocess.run(command, shell=True, capture_output=True, text=True, check=True, timeout=15)
            ip_address = result.stdout.strip()
            if not ip_address:
                raise ValueError("Received an empty response from the remote server.")
        except subprocess.CalledProcessError as e:
            print("\nSSH ERROR: Problem executing command. Check password or connection.")
            print(f"BŁĄD SSH: Problem z wykonaniem polecenia. Sprawdź hasło lub połączenie.")
            print(f"Stderr: {e.stderr}")
            return
        except Exception as e:
            print(f"\nERROR: {e}")
            print(f"BŁĄD: {e}")
            return
    else:
        print(f"\nERROR: Unknown mode '{mode}' in the configuration file.")
        print(f"BŁĄD: Nieznany tryb '{mode}' w pliku konfiguracyjym.")
        return

    # --- Step 3: Displaying and saving the IP address ---
    # --- Krok 3: Wyświetlenie i zapis adresu IP ---
    print("********************************")
    print(f"* EXTERNAL-IP: {ip_address} *")
    print("********************************")
    time.sleep(3)
    os.system("clear || cls")

    try:
        print("---")
        print(f"Updating '{config_path}' with the new IP address...")
        print(f"Aktualizuję plik '{config_path}' nowym adresem IP...")

        config_data['network']['external_ip'] = ip_address

        with open(config_path, 'w', encoding='utf-8') as file:
            yaml.dump(config_data, file, default_flow_style=False, allow_unicode=True, sort_keys=False)

        print("The configuration file has been successfully updated.")
        print("Plik konfiguracyjny został pomyślnie zaktualizowany.")
        print("---\n")

    except Exception as e:
        print(f"\nERROR: An unexpected error occurred while writing to the file: {e}")
        print(f"BŁĄD: Wystąpił nieoczekiwany problem podczas zapisu do pliku: {e}")


if __name__ == "__main__":
    check_and_update_ip()
--- END FILE: check_ip.py ---

--- START FILE: clear.sh ---
#!/bin/bash
clear

--- END FILE: clear.sh ---

--- START FILE: config.example.yaml ---
# ==============================================================================
# === SECURITY - Sensitive data and credentials
# === SECURITY - Wrażliwe dane i poświadczenia
# ==============================================================================
security:
  # WARNING: Storing a plaintext password is a significant security risk.
  # OSTRZEŻENIE: Przechowywanie hasła w postaci czystego tekstu jest znaczącym ryzykiem bezpieczeństwa.
  sudo_pswd: '*****'

  # Absolute path to the Google API client_secret.json file.
  # Absolutna ścieżka do pliku client_secret.json od Google API.
  api_creds_path: /home/*****/BLOX-TAK-SERVER-IUCP/client_secret.json

# ==============================================================================
# === PATHS - Paths to key project directories
# === PATHS - Ścieżki do kluczowych katalogów projektu
# ==============================================================================
paths:
  # Directory where the final .zip packages for users will be saved.
  # Katalog, w którym będą zapisywane finalne paczki .zip dla użytkowników.
  attachment_output: /home/*****/BLOX-TAK-SERVER-IUCP/

  # Directory where generated .pref and certificate files are placed before packaging.
  # Katalog, w którym generowane są pliki .pref i certyfikaty przed spakowaniem.
  preferences_output: /home/*****/BLOX-TAK-SERVER-IUCP/IUCP-IPPU_PACKAGE/certs/

  # The absolute path to the project's root directory.
  # Absolutna ścieżka do głównego katalogu projektu.
  project_root: /home/*****/BLOX-TAK-SERVER-IUCP/

# ==============================================================================
# === USER MANAGEMENT - User data management
# === USER MANAGEMENT - Zarządzanie danymi użytkowników
# ==============================================================================
user_management:
  # Public URLs to the Google Sheets (published as CSV) containing user data.
  # Publiczne URL-e do Arkuszy Google (opublikowanych jako CSV) z danymi użytkowników.
  data_sources:
    en: https://docs.google.com/spreadsheets/d/e/2PACX-1vR-r4HG3Qdelr4fqt9GxmA7pljbFRxwsQRddxF6qY6FChMMYlC_trLesLgF8ayjhWe00n7PeuUQ6TSp/pub?gid=754383885&single=true&output=csv
    pl: https://docs.google.com/spreadsheets/d/e/2PACX-1vRdndMsKWQbT6RtHunuyoizVTeNE60RTRBh8OSlGY9FDEwcmqKwPaTB96b-rBDR7aImSjHk3l9x4hV_/pub?gid=1887676185&single=true&output=csv

  # --- Runtime State ---
  # This section is managed automatically by the scripts. Do not edit manually.
  # Ta sekcja jest zarządzana automatycznie przez skrypty. Nie edytuj ręcznie.
  state:
    client_name: '*****'
    email_address: '*.*.*@gmail.com'
    registration_date: '*-*-* *:*:*'
    number_users: 0
    user_index: 0
    user_type: EN

email:
  # Set the email address you want to send messages from.
  # Ustaw adres e-mail, z którego chcesz wysyłać wiadomości.
  sender_email: '*.*.*@gmail.com'

# ==============================================================================
# === NETWORK - Network configuration
# === NETWORK - Konfiguracja sieciowa
# ==============================================================================
network:
  # The external IP of the server, automatically detected by check_ip.py.
  # Zewnętrzny adres IP serwera, automatycznie wykrywany przez check_ip.py.
  external_ip: '*.*.*.*'

  # Details for the remote server if 'remote' mode is used.
  # Dane zdalnego serwera, używane w trybie 'remote'.
  remote_server:
    host: '*.*.*.*'
    user: '*****'

# ==============================================================================
# === EXECUTION - Script execution mode
# === EXECUTION - Tryb pracy skryptów
# ==============================================================================
execution:
  # The operating mode of the scripts: 'local' or 'remote'. Managed by set_mode.py.
  # Tryb pracy skryptów: 'local' lub 'remote'. Zarządzany przez set_mode.py.
  mode: remote
--- END FILE: config.example.yaml ---

--- START FILE: config_pref.py ---
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# =====================================================================================
# === PREFERENCE FILE (.pref) GENERATOR ===
# === GENERATOR PLIKU PREFERENCJI (.pref) ===
# =====================================================================================

import os
import time
import yaml


# =====================================================================================
# === HELPER FUNCTIONS ===
# === FUNKCJE POMOCNICZE ===
# =====================================================================================

def load_config(path="config.yaml"):
    """
    Loads and returns the configuration from a YAML file.

    Wczytuje i zwraca konfigurację z pliku YAML.
    """
    try:
        with open(path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    except FileNotFoundError:
        print(f"ERROR: Configuration file '{path}' not found!")
        print(f"BŁĄD: Plik konfiguracyjny '{path}' nie został znaleziony!")
        return None
    except Exception as e:
        print(f"ERROR: Failed to load config file: {e}")
        print(f"BŁĄD: Nie udało się wczytać pliku konfiguracyjnego: {e}")
        return None


# =====================================================================================
# === MAIN SCRIPT LOGIC ===
# === GŁÓWNA LOGIKA SKRYPTU ===
# =====================================================================================

def generate_pref_file():
    """
    The main function that generates the .pref file.

    Główna funkcja generująca plik .pref.
    """
    print("*********************************")
    print("* Generating: 'PREF' File       *")
    print("* Generowanie pliku 'PREF'      *")
    print("*********************************")
    time.sleep(2)

    # --- Step 1: Load configuration ---
    # --- Krok 1: Wczytanie konfiguracji ---
    config = load_config()
    if not config:
        return

    try:
        external_ip = config['network']['external_ip']
        pref_output_path = config['paths']['preferences_output']
    except KeyError as e:
        print(f"ERROR: Missing key in config.yaml: {e}")
        print(f"BŁĄD: Brakujący klucz w config.yaml: {e}")
        return

    # --- Step 2: Define XML content ---
    # --- Krok 2: Zdefiniowanie treści XML ---
    config_pref_content = f"""<?xml version="1.0" standalone="yes"?>
<preferences>
    <preference version="1" name="cot_streams">
        <entry key="count" class="class java.lang.Integer">1</entry>
        <entry key="description0" class="class java.lang.String">BLOX-TAK-SERVER</entry>
        <entry key="enabled0" class="class java.lang.Boolean">true</entry>
        <entry key="connectString0" class="class java.lang.String">{external_ip}:8089:ssl</entry>
    </preference>
    <preference version="1" name="com.atakmap.app_preferences">
        <entry key="displayServerConnectionWidget" class="class java.lang.Boolean">true</entry>
    </preference>
</preferences>
"""

    # --- Step 3: Build the full output path and save the file ---
    # --- Krok 3: Zbudowanie pełnej ścieżki i zapis pliku ---
    output_file_path = os.path.join(pref_output_path, "config.pref")

    try:
        # Ensure the output directory exists
        # Upewnij się, że katalog wyjściowy istnieje
        os.makedirs(pref_output_path, exist_ok=True)

        with open(output_file_path, "w", encoding='utf-8') as file:
            file.write(config_pref_content)

        print("*********************************")
        print("* 'PREF' File Generated         *")
        print("* Plik 'PREF' wygenerowany      *")
        print("*********************************")
        print(f"File saved to: {output_file_path}")
        print(f"Plik zapisano w: {output_file_path}")
        time.sleep(3)
        os.system("clear || cls")

    except Exception as e:
        print(f"ERROR: Failed to write .pref file: {e}")
        print(f"BŁĄD: Nie udało się zapisać pliku .pref: {e}")


if __name__ == "__main__":
    generate_pref_file()
--- END FILE: config_pref.py ---

--- START FILE: email_sender.py ---
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# =====================================================================================
# === E-MAIL SENDER SCRIPT ===
# === SKRYPT DO WYSYŁANIA WIADOMOŚCI E-MAIL ===
# =====================================================================================

import os
import mimetypes
import base64
import yaml
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders

# --- Google Libraries ---
# --- Biblioteki Google ---
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError


# =====================================================================================
# === HELPER FUNCTIONS ===
# === FUNKCJE POMOCNICZE ===
# =====================================================================================

def load_config(path="config.yaml"):
    """
    Loads and returns the configuration from a YAML file.

    Wczytuje i zwraca konfigurację z pliku YAML.
    """
    try:
        with open(path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    except FileNotFoundError:
        print(f"ERROR: Configuration file '{path}' not found!")
        print(f"BŁĄD: Plik konfiguracyjny '{path}' nie został znaleziony!")
        return None
    except Exception as e:
        print(f"ERROR: Failed to load config file: {e}")
        print(f"BŁĄD: Nie udało się wczytać pliku konfiguracyjnego: {e}")
        return None


def google_api_authenticate(credentials_file, scopes):
    """
    Performs the Google API authentication process and returns credentials.

    Przeprowadza proces autentykacji Google API i zwraca dane uwierzytelniające.
    """
    creds = None
    token_file = "token.json"

    if os.path.exists(token_file):
        creds = Credentials.from_authorized_user_file(token_file, scopes)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            print("Refreshing access token...")
            print("Odświeżam token dostępu...")
            creds.refresh(Request())
        else:
            print("Performing new authentication...")
            print("Przeprowadzam nową autoryzację...")
            flow = InstalledAppFlow.from_client_secrets_file(credentials_file, scopes)
            creds = flow.run_local_server(port=0)

        with open(token_file, "w") as token:
            token.write(creds.to_json())
            print(f"Credentials saved to {token_file}")
            print(f"Dane uwierzytelniające zapisano w {token_file}")

    return creds


def create_message_with_attachment(sender, to, subject, message_text, file_path):
    """
    Creates an email message object with an attachment.

    Tworzy obiekt wiadomości e-mail z załącznikiem.
    """
    message = MIMEMultipart()
    message['to'] = to
    message['from'] = sender
    message['subject'] = subject
    message.attach(MIMEText(message_text))

    try:
        content_type, _ = mimetypes.guess_type(file_path)
        if content_type is None:
            content_type = 'application/octet-stream'
        main_type, sub_type = content_type.split('/', 1)

        with open(file_path, 'rb') as fp:
            attachment = MIMEBase(main_type, sub_type)
            attachment.set_payload(fp.read())

        encoders.encode_base64(attachment)
        filename = os.path.basename(file_path)
        attachment.add_header('Content-Disposition', 'attachment', filename=filename)
        message.attach(attachment)

        # Return the message formatted for the Gmail API
        # Zwróć wiadomość sformatowaną dla Gmail API
        return {'raw': base64.urlsafe_b64encode(message.as_bytes()).decode()}

    except FileNotFoundError:
        print(f"ERROR: Attachment file not found: {file_path}")
        print(f"BŁĄD: Plik załącznika nie został znaleziony: {file_path}")
        return None
    except Exception as e:
        print(f"ERROR: Failed to create attachment: {e}")
        print(f"BŁĄD: Nie udało się utworzyć załącznika: {e}")
        return None


# =====================================================================================
# === MAIN SCRIPT LOGIC ===
# === GŁÓWNA LOGIKA SKRYPTU ===
# =====================================================================================

def main():
    """
    The main orchestrating function for sending emails.
    Główna funkcja orkiestrująca wysyłanie e-maili.
    """
    print("---")
    print("Starting e-mail sender script...")
    print("Uruchamiam skrypt wysyłania e-mail...")

    # --- Step 1: Load configuration ---
    # --- Krok 1: Wczytanie konfiguracji ---
    config = load_config()
    if not config:
        return

    try:
        user_state = config['user_management']['state']
        client_name = user_state['client_name']
        email_address = user_state['email_address']
        registration_date = user_state['registration_date']
        user_type = user_state['user_type']

        attachment_output_path = config['paths']['attachment_output']
        api_creds_path = config['security']['api_creds_path']
        sender_email = config['email']['sender_email']
    except KeyError as e:
        print(f"ERROR: Missing key in config.yaml: {e}")
        print(f"BŁĄD: Brakujący klucz w config.yaml: {e}")
        return

    # --- Step 2: Authenticate with Google API ---
    # --- Krok 2: Autoryzacja w Google API ---
    scopes = ["https://www.googleapis.com/auth/gmail.send"]
    creds = google_api_authenticate(api_creds_path, scopes)
    if not creds:
        print("ERROR: Failed to obtain credentials.")
        print("BŁĄD: Nie udało się uzyskać danych uwierzytelniających.")
        return

    # --- Step 3: Define email content based on user type ---
    # --- Krok 3: Zdefiniowanie treści maila na podstawie typu użytkownika ---
    if user_type == "EN":
        subject = "BLOX-TAK-SERVER-IUCP"
        message_text = f"""Hello, {client_name}!

Thank you for registering on {registration_date}:
https://forms.gle/VcUSKJ5bvuJ1nuBB6

This message was generated automatically by the BLOX-TAK-SERVER-IUCP software (Individual User Connection Profile).

This is a test message - the certificates in the ZIP package were revoked immediately after generation and will not work at this stage.
Up to an hour from sending this message, I will prepare an instructional video titled '#Instruction1' in the "featured" section on my LinkedIn profile:
https://www.linkedin.com/in/lukebluelox/details/featured

Best wishes from the "Giant Mountains" in Poland (in Polish: "Karkonosze"),
Łukasz "LukeBlueLOx" Andruszkiewicz
"""
    elif user_type == "PL":
        subject = "BLOX-TAK-SERVER-IPPU"
        message_text = f"""Witaj, {client_name}!

Dziękuję za rejestrację w dniu {registration_date}:
https://forms.gle/mrz8zPWiootVLYet8

Wiadomość została wygenerowana automatycznie przy pomocy oprogramowania BLOX-TAK-SERVER-IPPU (Indywidualny Profil Połączeniowy Użytkownika).

To jest wiadomość testowa - certyfikaty w paczce ZIP zostały odwołane tuż po wygenerowaniu i nie będą działać na tym etapie.
Do godziny czasu od rozesłania wiadomości, przygotuję film instruktarzowy o tytule "#Instrukcja1" w moich "wyróżnionych" na profilu LinkedIn:
https://www.linkedin.com/in/lukebluelox/details/featured

Pozdrowienia z Karkonoszy,
Łukasz "LukeBlueLOx" Andruszkiewicz
"""
    else:
        print(f"ERROR: Unknown user type: '{user_type}'")
        print(f"BŁĄD: Nieznany typ użytkownika: '{user_type}'")
        return

    # --- Step 4: Create and send the message ---
    # --- Krok 4: Utworzenie i wysłanie wiadomości ---
    try:
        service = build("gmail", "v1", credentials=creds)

        attachment_filename = f"IUCP-IPPU_PACKAGE_{client_name}.zip"
        attachment_path = os.path.join(attachment_output_path, attachment_filename)

        print(f"Creating message for: {email_address}")
        print(f"Tworzę wiadomość dla: {email_address}")
        message_body = create_message_with_attachment(sender_email, email_address, subject, message_text,
                                                      attachment_path)

        if message_body:
            print("Sending message...")
            print("Wysyłam wiadomość...")
            message = service.users().messages().send(userId='me', body=message_body).execute()
            print(f"Message sent successfully, ID: {message['id']}")
            print(f"Wiadomość pomyślnie wysłana, ID: {message['id']}")

    except HttpError as error:
        print(f"ERROR: An API error occurred: {error}")
        print(f"BŁĄD: Wystąpił błąd API: {error}")
    except Exception as e:
        print(f"ERROR: An unexpected error occurred: {e}")
        print(f"BŁĄD: Wystąpił nieoczekiwany błąd: {e}")


if __name__ == "__main__":
    main()
    print("---")
    print("E-mail sender script finished.")
    print("Skrypt wysyłania e-mail zakończył działanie.")
--- END FILE: email_sender.py ---

--- START FILE: make_cert.sh ---
#!/bin/bash

# =====================================================================================
# === GENERATING TAK CLIENT CERTIFICATE - Handling local/remote mode ===
# === GENEROWANIE CERTYFIKATU KLIENTA TAK - Obsługa trybu local/remote ===
# =====================================================================================

set -e
# Stop the script on any error
# Zatrzymaj skrypt w przypadku błędu

# --- Configuration ---
# --- Konfiguracja ---
config_file="config.yaml"
echo "---"
echo "Wczytuję konfigurację..."
echo "Loading configuration..."

# Read data from the nested YAML structure
# Odczyt danych z zagnieżdżonej struktury YAML
sudo_pswd=$(yq '.security.sudo_pswd' "$config_file")
client_name=$(yq '.user_management.state.client_name' "$config_file")
mode=$(yq '.execution.mode' "$config_file")
remote_user=$(yq '.network.remote_server.user' "$config_file")
remote_host=$(yq '.network.remote_server.host' "$config_file")

# Use the path from config.yaml as the destination
# Użyj ścieżki z config.yaml jako docelowej
destination_dir=$(yq -r '.paths.preferences_output' "$config_file")

# --- Paths and Commands Definitions ---
# --- Definicje Ścieżek i Poleceń ---
tak_certs_dir="/home/tak/tak-server/tak/certs"
tak_certs_files_dir="${tak_certs_dir}/files"

# Define paths for the client certificate
# Zdefiniuj ścieżki dla certyfikatu klienta
remote_temp_cert_path="/home/${remote_user}/${client_name}.p12"
local_final_cert_path="${destination_dir}${client_name}.p12"

# Define paths for the root certificate
# Zdefiniuj ścieżki dla certyfikatu roota
remote_temp_root_path="/home/${remote_user}/truststore-root.p12"
local_final_root_path="${destination_dir}truststore-root.p12"


# Commands to be executed on the server (remote or local)
# Polecenia do wykonania na serwerze (zdalnym lub lokalnym)
commands_to_execute="
    set -e;
    echo '--- (REMOTE/LOCAL) Generating client certificate for: ${client_name} ---';
    echo '--- (ZDALNY/LOKALNY) Generowanie certyfikatu klienta dla: ${client_name} ---';
    cd ${tak_certs_dir};
    ./makeCert.sh client \"${client_name}\";
"

# ======================================================
# === MAIN SCRIPT LOGIC ===
# === GŁÓWNA LOGIKA SKRYPTU ===
# ======================================================

echo "---"
if [ "$mode" == "remote" ]; then
    # ### REMOTE MODE ###
    # ### TRYB ZDALNY ###
    echo "Odczytano TRYB ZDALNY."
    echo "Wykonuję operacje na hoście: $remote_host"
    echo "REMOTE MODE read."
    echo "Executing operations on host: $remote_host"
    echo "---"

    # Additional commands for remote mode (copying to /home)
    # Dodatkowe komendy dla trybu zdalnego (kopiowanie do /home)
    remote_commands="
        ${commands_to_execute}
        echo '--- (REMOTE) Copying certificates (client and root) to /home for download ---';
        echo '--- (ZDALNY) Kopiowanie certyfikatów (klient i root) do /home w celu pobrania ---';
        cp ${tak_certs_files_dir}/${client_name}.p12 ${remote_temp_cert_path};
        chown ${remote_user}:${remote_user} ${remote_temp_cert_path};
        cp ${tak_certs_files_dir}/truststore-root.p12 ${remote_temp_root_path};
        chown ${remote_user}:${remote_user} ${remote_temp_root_path};
    "
    # Execute remote commands
    # Wykonaj zdalne komendy
    sshpass -p "$sudo_pswd" ssh -t "$remote_user@$remote_host" "echo '$sudo_pswd' | sudo -S bash -c \"$remote_commands\""

    # Copy files from the server to the local machine
    # Kopiuj pliki z serwera na maszynę lokalną
    echo "---"
    echo "Kopiuję certyfikat klienta (.p12) na maszynę lokalną..."
    echo "Copying client certificate (.p12) to the local machine..."
    sshpass -p "$sudo_pswd" scp -o StrictHostKeyChecking=no "$remote_user@$remote_host:$remote_temp_cert_path" "$local_final_cert_path"

    echo "Kopiuję certyfikat roota (truststore-root.p12) na maszynę lokalną..."
    echo "Copying root certificate (truststore-root.p12) to the local machine..."
    sshpass -p "$sudo_pswd" scp -o StrictHostKeyChecking=no "$remote_user@$remote_host:$remote_temp_root_path" "$local_final_root_path"

    # Cleanup on the remote server
    # Sprzątanie na serwerze zdalnym
    echo "---"
    echo "Sprzątam pliki tymczasowe na serwerze zdalnym..."
    echo "Cleaning up temporary files on the remote server..."
    sshpass -p "$sudo_pswd" ssh "$remote_user@$remote_host" "rm ${remote_temp_cert_path} ${remote_temp_root_path}"

elif [ "$mode" == "local" ]; then
    # ### LOCAL MODE ###
    # ### TRYB LOKALNY ###
    echo "Odczytano TRYB LOKALNY."
    echo "Wykonuję operacje na tej maszynie."
    echo "LOCAL MODE read."
    echo "Executing operations on this machine."
    echo "---"

    # Additional commands for local mode (copying to the project directory)
    # Dodatkowe komendy dla trybu lokalnego (kopiowanie do katalogu projektu)
    local_commands="
        ${commands_to_execute}
        echo '--- (LOCAL) Copying certificates (client and root) to the project directory... ---';
        echo '--- (LOKALNY) Kopiowanie certyfikatów (klient i root) do katalogu projektu... ---';
        cp ${tak_certs_files_dir}/${client_name}.p12 ${local_final_cert_path};
        cp ${tak_certs_files_dir}/truststore-root.p12 ${local_final_root_path};
    "
    # Execute commands locally with sudo
    # Wykonaj komendy lokalnie z sudo
    echo "$sudo_pswd" | sudo -S bash -c "$local_commands"

else
    echo "BŁĄD: Nieprawidłowy tryb '$mode' w pliku konfiguracyjnym. Użyj 'local' lub 'remote'." >&2
    echo "ERROR: Invalid mode '$mode' in config.yaml. Use 'local' or 'remote'." >&2
    exit 1
fi

# --- Finalization ---
# --- Finalizacja ---
echo "---"
echo "Ustawiam uprawnienia dla pobranych plików..."
echo "Setting permissions for the downloaded files..."
chmod 644 "$local_final_cert_path"
chmod 644 "$local_final_root_path"

echo "---"
echo "Proces generowania certyfikatów zakończony pomyślnie!"
echo "Certificate generation process completed successfully!"
--- END FILE: make_cert.sh ---

--- START FILE: make_cert_mumble.sh ---
#!/bin/bash

# =====================================================================================
# === GENERATE AND COPY MUMBLE CERTIFICATE ===
# === GENEROWANIE I KOPIOWANIE CERTYFIKATU MUMBLE ===
#
# This script generates an SSL certificate for the Mumble server. It operates
# automatically in local or remote mode. In remote mode, it copies the certificate
# to the local machine.
#
# Skrypt generuje certyfikat SSL dla serwera Mumble. Działa automatycznie
# w trybie lokalnym lub zdalnym. W trybie zdalnym kopiuje certyfikat na maszynę lokalną.
# =====================================================================================

# --- Path Definitions ---
# --- Definicje ścieżek ---
config_file="config.yaml"
# Target directory on the local machine
# Docelowy katalog na lokalnej maszynie
cert_dir="/home/luke_blue_lox/PycharmProjects/BLOX-TAK-SERVER-IUCP/IUCP-IPPU_PACKAGE/certs"
mkdir -p "$cert_dir"

# --- Loading configuration ---
# --- Wczytanie konfiguracji ---
echo "---"
echo "Loading configuration from '$config_file'..."
echo "Wczytuję konfigurację z pliku '$config_file'..."
sudo_pswd=$(yq '.security.sudo_pswd' "$config_file")
ex_ip=$(yq '.network.external_ip' "$config_file")
mode=$(yq '.execution.mode' "$config_file")
remote_host=$(yq '.network.remote_server.host' "$config_file")
remote_user=$(yq '.network.remote_server.user' "$config_file")

# --- Definition of commands to be executed on the server ---
# --- Definicja poleceń do wykonania na serwerze ---
commands_to_execute="
    echo '---'
    echo 'Starting certificate and key generation...'
    echo 'Rozpoczynam generowanie certyfikatu i klucza...'
    openssl req -x509 -sha256 -nodes -days 1080 -newkey rsa:2048 \
        -keyout /etc/mumble.key \
        -out /etc/mumble.cer \
        -subj \\"/CN=$ex_ip\\" \
        -addext \\"subjectAltName=IP:$ex_ip,IP:192.168.1.17,IP:10.0.0.1\\" \
        -addext \\"extendedKeyUsage=serverAuth\\" &&

    echo 'Setting permissions for the generated files...'
    echo 'Ustawiam uprawnienia dla wygenerowanych plików...'
    chmod 755 /etc/mumble.key
    chmod 755 /etc/mumble.cer &&

    echo 'Restarting the mumble-server service...'
    echo 'Restartuję usługę mumble-server...'
    systemctl restart mumble-server &&

    echo 'Checking the mumble-server service status...'
    echo 'Sprawdzam status usługi mumble-server...'
    systemctl status mumble-server
"

# ======================================================
# === MAIN SCRIPT LOGIC ===
# === GŁÓWNA LOGIKA SKRYPTU ===
# ======================================================
echo "---"
if [ "$mode" == "remote" ]; then
    # ---------- REMOTE MODE ----------
    # ---------- TRYB ZDALNY ----------
    echo "REMOTE MODE read. Executing operations on host: $remote_host"
    echo "Odczytano TRYB ZDALNY. Wykonuję operacje na hoście: $remote_host"
    echo "---"

    # Execute certificate generation commands on the remote server
    # Wykonanie poleceń generujących certyfikat na zdalnym serwerze
    sshpass -p "$sudo_pswd" ssh -t "$remote_user@$remote_host" "
        echo '$sudo_pswd' | sudo -S bash -c \"$commands_to_execute\"
    "

    # <<< ADDED COPY LOGIC >>>
    # <<< DODANA LOGIKA KOPIOWANIA >>>
    echo "---"
    echo "Copying mumble.cer certificate from the remote server..."
    echo "Kopiuję certyfikat mumble.cer z serwera zdalnego..."

    sshpass -p "$sudo_pswd" scp -o StrictHostKeyChecking=no "$remote_user@$remote_host:/etc/mumble.cer" "$cert_dir/mumble.cer"

    echo "Certificate copied to '$cert_dir'."
    echo "Certyfikat skopiowany do '$cert_dir'."
    chmod 755 "$cert_dir/mumble.cer"


elif [ "$mode" == "local" ]; then
    # ---------- LOCAL MODE ----------
    # ---------- TRYB LOKALNY ----------
    echo "LOCAL MODE read. Executing operations on this machine."
    echo "Odczytano TRYB LOKALNY. Wykonuję operacje na tej maszynie."
    echo "---"

    # Execute commands locally
    # Wykonanie poleceń lokalnie
    echo "$sudo_pswd" | sudo -S bash -c "$commands_to_execute"

    # Copy the certificate from /etc/ to the project directory
    # Kopiowanie certyfikatu z /etc/ do katalogu projektu
    echo "---"
    echo "Copying local mumble.cer certificate..."
    echo "Kopiuję lokalny certyfikat mumble.cer..."
    echo "$sudo_pswd" | sudo -S cp "/etc/mumble.cer" "$cert_dir/mumble.cer"
    echo "$sudo_pswd" | sudo -S chmod 755 "$cert_dir/mumble.cer"
    echo "Certificate copied to '$cert_dir'."
    echo "Certyfikat skopiowany do '$cert_dir'."

else
    echo "ERROR: Invalid mode '$mode' in the configuration file."
    echo "BŁĄD: Nieprawidłowy tryb '$mode' w pliku konfiguracyjnym."
    exit 1
fi

echo "---"
echo "Process completed successfully!"
echo "Proces zakończony pomyślnie!"
sleep 5
--- END FILE: make_cert_mumble.sh ---

--- START FILE: modify_android_conf.py ---
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# =====================================================================================
# === SCRIPT TO MODIFY THE 'ENDPOINT' IN A CONFIGURATION FILE ===
# === SKRYPT DO MODYFIKACJI 'ENDPOINT' W PLIKU KONFIGURACYJNYM ===
# =====================================================================================

import re
import argparse


# =====================================================================================
# === MAIN SCRIPT LOGIC ===
# === GŁÓWNA LOGIKA SKRYPTU ===
# =====================================================================================

def modify_endpoint_in_file(file_path: str, new_ip: str):
    """
    Reads a file, replaces the IP address in the 'Endpoint' line, and saves the file.

    Wczytuje plik, zamienia adres IP w linii 'Endpoint' i zapisuje plik.

    Args:
        file_path (str): The path to the configuration file to modify.
                         Ścieżka do pliku konfiguracyjnego do modyfikacji.
        new_ip (str):    The new IP address to set for the Endpoint.
                         Nowy adres IP do ustawienia dla Endpoint.
    """
    try:
        # --- Step 1: Read the original content ---
        # --- Krok 1: Odczyt oryginalnej zawartości ---
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # --- Step 2: Use regex to find and replace the endpoint IP ---
        # --- Krok 2: Użycie regex do znalezienia i zamiany IP endpointu ---
        # The regex finds a line starting with 'Endpoint', followed by '=',
        # and captures the IP address to replace it.
        # Regex znajduje linię zaczynającą się od 'Endpoint', po której jest '=',
        # i przechwytuje adres IP w celu jego zamiany.
        modified_content, num_replacements = re.subn(
            r'(^\s*Endpoint\s*=\s*)[\d\.]+',
            fr'\g<1>{new_ip}',
            content,
            flags=re.MULTILINE
        )

        if num_replacements == 0:
            print(f"Warning: 'Endpoint' line not found in {file_path}. File was not changed.")
            print(f"Ostrzeżenie: Nie znaleziono linii 'Endpoint' w {file_path}. Plik nie został zmieniony.")
            return

        # --- Step 3: Write the modified content back to the file ---
        # --- Krok 3: Zapisanie zmodyfikowanej treści z powrotem do pliku ---
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(modified_content)

        print(f"Success: File '{file_path}' updated with new IP: {new_ip}")
        print(f"Sukces: Plik '{file_path}' zaktualizowany nowym adresem IP: {new_ip}")

    except FileNotFoundError:
        print(f"Error: The file '{file_path}' was not found.")
        print(f"Błąd: Plik '{file_path}' nie został znaleziony.")
    except Exception as e:
        print(f"Error: An unexpected error occurred while modifying the file: {e}")
        print(f"Błąd: Wystąpił nieoczekiwany błąd podczas modyfikacji pliku: {e}")


if __name__ == "__main__":
    # --- Argument Parser Setup ---
    # --- Konfiguracja parsera argumentów ---
    parser = argparse.ArgumentParser(
        description="A simple script to modify the Endpoint IP in a config file.",
        epilog="Example: python3 modify_android_conf.py /path/to/android.conf 192.168.1.100"
    )
    parser.add_argument(
        "file_path",
        help="Path to the configuration file. (Ścieżka do pliku konfiguracyjnego)"
    )
    parser.add_argument(
        "new_ip",
        help="The new IP address to set. (Nowy adres IP do ustawienia)"
    )
    args = parser.parse_args()

    # --- Run the main function ---
    # --- Uruchomienie głównej funkcji ---
    modify_endpoint_in_file(args.file_path, args.new_ip)
--- END FILE: modify_android_conf.py ---

--- START FILE: package.sh ---
#!/bin/bash

# =====================================================================================
# === PACKAGE USER BUNDLE AND CLEANUP ===
# === PAKOWANIE PACZKI UŻYTKOWNIKA I SPRZĄTANIE ===
# =====================================================================================

set -e
# Stop the script on any error
# Zatrzymaj skrypt w przypadku błędu

# --- Configuration ---
# --- Konfiguracja ---
CONFIG_FILE="config.yaml"
if [ ! -f "$CONFIG_FILE" ]; then
    echo "Error: Configuration file '$CONFIG_FILE' not found!"
    echo "BŁĄD: Plik konfiguracyjny '$CONFIG_FILE' nie został znaleziony!"
    exit 1
fi

echo "---"
echo "Loading configuration..."
echo "Wczytuję konfigurację..."

# Read data from the nested YAML structure
# Odczyt danych z zagnieżdżonej struktury YAML
client_name=$(yq '.user_management.state.client_name' "$CONFIG_FILE")
project_root=$(yq -r '.paths.project_root' "$CONFIG_FILE")
certs_dir=$(yq -r '.paths.preferences_output' "$CONFIG_FILE")
# Define the source directory for the package from the project root
# Zdefiniuj katalog źródłowy paczki na podstawie katalogu głównego projektu
package_source_dir="${project_root}IUCP-IPPU_PACKAGE"


# =====================================================================================
# --- MAIN SCRIPT LOGIC ===
# === GŁÓWNA LOGIKA SKRYPTU ===
# =====================================================================================

# --- Step 1: Create the .zip archive ---
# --- Krok 1: Tworzenie archiwum .zip ---
echo "---"
echo "Creating .zip archive for client: $client_name"
echo "Tworzę archiwum .zip dla klienta: $client_name"

if [ ! -d "$package_source_dir" ]; then
    echo "Error: Source directory for packaging does not exist: $package_source_dir"
    echo "BŁĄD: Katalog źródłowy do spakowania nie istnieje: $package_source_dir"
    exit 1
fi

# Navigate to the source directory to create a clean archive
# Przejdź do katalogu źródłowego, aby utworzyć czyste archiwum
cd "$package_source_dir"

archive_name="../IUCP-IPPU_PACKAGE_${client_name}.zip"

# Remove the old archive if it exists to avoid issues
# Usuń stare archiwum, jeśli istnieje, aby uniknąć problemów
rm -f "$archive_name"

# Zip the contents, excluding logs and temporary files
# Spakuj zawartość, wykluczając logi i pliki tymczasowe
zip -r "$archive_name" . -x \*.log \*.tmp

# Return to the previous directory
# Wróć do poprzedniego katalogu
cd - > /dev/null

echo "Archive '$archive_name' has been created successfully."
echo "Archiwum '$archive_name' zostało pomyślnie utworzone."


# --- Step 2: Cleanup the .p12 certificate after packaging ---
# --- Krok 2: Sprzątanie certyfikatu .p12 po spakowaniu ---
echo "---"
echo "Cleaning up the .p12 certificate from the packaging directory..."
echo "Sprzątam certyfikat .p12 z katalogu pakowania..."

certificate_path="${certs_dir}${client_name}.p12"

if [[ -f "$certificate_path" ]]; then
    rm -f "$certificate_path"
    echo "Certificate $client_name.p12 removed from: $certs_dir"
    echo "Certyfikat $client_name.p12 usunięty z katalogu: $certs_dir"
else
    echo "Warning: No certificate file found for $client_name at $certs_dir. Nothing to clean up."
    echo "Ostrzeżenie: Nie znaleziono pliku certyfikatu dla $client_name w katalogu $certs_dir. Nic do posprzątania."
fi

echo "---"
echo "Packaging process completed successfully!"
echo "Proces pakowania zakończony pomyślnie!"
--- END FILE: package.sh ---

--- START FILE: requirements.txt ---
cachetools==5.5.2
certifi==2025.1.31
charset-normalizer==3.4.1
DateTime==5.5
google-api-core==2.24.1
google-api-python-client==2.163.0
google-auth==2.38.0
google-auth-httplib2==0.2.0
google-auth-oauthlib==1.2.1
googleapis-common-protos==1.69.1
httplib2==0.22.0
idna==3.10
numpy==2.2.3
oauthlib==3.2.2
pandas==2.2.3
proto-plus==1.26.0
protobuf==5.29.3
pyasn1==0.6.1
pyasn1_modules==0.4.1
pyparsing==3.2.1
python-dateutil==2.9.0.post0
pytz==2025.1
PyYAML==6.0.2
requests==2.32.3
requests-oauthlib==2.0.0
rsa==4.9
six==1.17.0
tzdata==2025.1
uritemplate==4.1.1
urllib3==2.3.0
zope.interface==7.2

--- END FILE: requirements.txt ---

--- START FILE: revoke.py ---
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# =====================================================================================
# === CERTIFICATE REVOCATION ORCHESTRATOR ===
# === ORKIESTRATOR ODWOŁYWANIA CERTYFIKATÓW ===
# =====================================================================================

import os
import time
import pandas as pd
import yaml


# =====================================================================================
# === HELPER FUNCTIONS ===
# === FUNKCJE POMOCNICZE ===
# =====================================================================================

def load_config(path="config.yaml"):
    """
    Loads and returns the configuration from a YAML file.

    Wczytuje i zwraca konfigurację z pliku YAML.
    """
    try:
        with open(path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    except FileNotFoundError:
        print("ERROR: Configuration file '{path}' not found!")
        print(f"BŁĄD: Plik konfiguracyjny '{path}' nie został znaleziony!")
        return None
    except Exception as e:
        print(f"ERROR: Failed to load config file: {e}")
        print(f"BŁĄD: Nie udało się wczytać pliku konfiguracyjnego: {e}")
        return None


def save_config(data, path="config.yaml"):
    """
    Saves the configuration dictionary to a YAML file.

    Zapisuje słownik konfiguracyjny do pliku YAML.
    """
    try:
        with open(path, 'w', encoding='utf-8') as f:
            yaml.dump(data, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
        return True
    except Exception as e:
        print(f"ERROR: Failed to save config file: {e}")
        print(f"BŁĄD: Nie udało się zapisać pliku konfiguracyjnego: {e}")
        return False


def set_language():
    """
    Prompts the user to select a language and saves the choice to config.yaml.

    Pyta użytkownika o wybór języka i zapisuje go w pliku config.yaml.
    """
    while True:
        print("---")
        print("Select User Type:")
        print("Wybierz Typ Użytkownika:")
        print("[1] English")
        print("[2] Polski")
        print("---")

        prompt = "Choose and press Enter: "
        prompt_pl = "Wybierz i naciśnij Enter: "
        print(prompt)
        choice = input(prompt_pl).strip()

        if choice == "1":
            user_type = "EN"
            break
        elif choice == "2":
            user_type = "PL"
            break
        else:
            os.system("clear || cls")
            print("Invalid Choice")
            print("Niepoprawny Wybór")

    os.system("clear || cls")
    print(f"Selected: {user_type}")
    print(f"Wybrano: {user_type}")
    time.sleep(2)
    os.system("clear || cls")

    config = load_config()
    if config:
        config['user_management']['state']['user_type'] = user_type
        if save_config(config):
            return True
    return False


# =====================================================================================
# === MAIN SCRIPT LOGIC ===
# === GŁÓWNA LOGIKA SKRYPTU ===
# =====================================================================================

def run_revocation_process():
    """
    The main function that orchestrates the entire certificate revocation process.

    Główna funkcja orkiestrująca całym procesem odwoływania certyfikatów.
    """
    if not set_language():
        exit(1)

    config = load_config()
    if not config:
        exit(1)

    user_type = config['user_management']['state']['user_type']
    data_sources = config['user_management']['data_sources']
    csv_path = data_sources.get(user_type.lower())

    if not csv_path:
        print(f"ERROR: No data source defined for language '{user_type}'.")
        print(f"BŁĄD: Brak zdefiniowanego źródła danych dla języka '{user_type}'.")
        exit(1)

    print("Loading user list for certificate revocation...")
    print("Wczytuję listę użytkowników do odwołania certyfikatów...")
    try:
        df = pd.read_csv(csv_path)
    except Exception as e:
        print(f"ERROR: Failed to load data from CSV: {e}")
        print(f"BŁĄD: Nie udało się wczytać danych z CSV: {e}")
        exit(1)

    if user_type == "EN":
        column_name = 'Username:'
        print("\n--- Users to revoke ---")
    else:  # PL
        column_name = 'Nazwa Użytkownika:'
        print("\n--- Lista użytkowników do odwołania ---")

    print(df[column_name].to_string(index=False))
    print(f"\nNumber Of Users: {len(df)}")
    print(f"Liczba Użytkowników: {len(df)}")
    time.sleep(4)
    os.system("clear || cls")

    # --- Main revocation loop ---
    # --- Główna pętla odwoływania ---
    for index, row in df.iterrows():
        client_name = row[column_name]

        print(f"Revoking certificate for: {client_name} ({index + 1} of {len(df)})...")
        print(f"Odwołuję certyfikat dla: {client_name} ({index + 1} z {len(df)})...")

        # Save the current user's name to config.yaml so that revoke_cert.sh
        # knows who to act upon.
        # Zapisz nazwę bieżącego użytkownika do config.yaml, aby skrypt revoke_cert.sh
        # wiedział, dla kogo ma działać.
        current_config = load_config()
        if not current_config:
            print("CRITICAL ERROR: Lost access to config file during loop. Skipping user.")
            print("BŁĄD KRYTYCZNY: Utracono dostęp do pliku konfiguracyjnego w trakcie pętli. Pomijam użytkownika.")
            continue

        current_config['user_management']['state']['client_name'] = str(client_name)
        save_config(current_config)

        # Call the shell script to perform the revocation
        # Wywołaj skrypt powłoki, aby przeprowadzić odwołanie
        os.system("./revoke_cert.sh")
        os.system("clear || cls")
        time.sleep(1)

    print("---")
    print("Certificate revocation process finished.")
    print("Proces odwoływania certyfikatów zakończony.")


if __name__ == "__main__":
    run_revocation_process()
--- END FILE: revoke.py ---

--- START FILE: revoke_cert.sh ---
#!/bin/bash

# =====================================================================================
# === REVOKE TAK CLIENT CERTIFICATE - Handles local/remote mode ===
# === ODWOŁYWANIE CERTYFIKATU KLIENTA TAK - Obsługa trybu local/remote ===
# =====================================================================================

set -e
# Stop the script on any error
# Zatrzymaj skrypt w przypadku błędu

# --- Configuration ---
# --- Konfiguracja ---
CONFIG_FILE="config.yaml"
if [ ! -f "$CONFIG_FILE" ]; then
    echo "Error: Configuration file '$CONFIG_FILE' not found!"
    echo "BŁĄD: Plik konfiguracyjny '$CONFIG_FILE' nie został znaleziony!"
    exit 1
fi

echo "---"
echo "Loading configuration..."
echo "Wczytuję konfigurację..."

# Read data from the nested YAML structure
# Odczyt danych z zagnieżdżonej struktury YAML
sudo_pswd=$(yq '.security.sudo_pswd' "$CONFIG_FILE")
client_name=$(yq '.user_management.state.client_name' "$CONFIG_FILE")
mode=$(yq '.execution.mode' "$CONFIG_FILE")
remote_user=$(yq '.network.remote_server.user' "$CONFIG_FILE")
remote_host=$(yq '.network.remote_server.host' "$CONFIG_FILE")

# --- Command Definitions ---
# --- Definicje Poleceń ---
# The same set of commands is used for local and remote mode
# Ten sam zestaw komend jest używany dla trybu lokalnego i zdalnego
commands_to_execute="
    set -e;
    echo '--- (REMOTE/LOCAL) Revoking certificate for: ${client_name} ---';
    echo '--- (ZDALNY/LOKALNY) Odwoływanie certyfikatu dla: ${client_name} ---';

    echo '--> Changing directory to /home/tak/tak-server/tak/certs';
    echo '--> Zmiana katalogu na /home/tak/tak-server/tak/certs';
    cd /home/tak/tak-server/tak/certs;

    echo '--> Running revokeCert.sh...';
    echo '--> Uruchamiam revokeCert.sh...';
    ./revokeCert.sh '${client_name}' root-ca-do-not-share root-ca;

    echo '--> Changing directory to .../certs/files';
    echo '--> Zmiana katalogu na .../certs/files';
    cd /home/tak/tak-server/tak/certs/files;

    echo '--> Deleting client certificate files (.p12, .pem, .key)...';
    echo '--> Usuwanie plików certyfikatów (.p12, .pem, .key) dla klienta...';
    rm -f '${client_name}'.*;

    echo '--- Operation finished successfully. ---';
    echo '--- Operacja zakończona pomyślnie. ---';
"

# ======================================================
# === MAIN SCRIPT LOGIC ===
# === GŁÓWNA LOGIKA SKRYPTU ===
# ======================================================

echo "---"
if [ "$mode" == "remote" ]; then
    # --- REMOTE MODE ---
    # --- TRYB ZDALNY ---
    echo "REMOTE MODE read. Executing operations on host: $remote_host"
    echo "Odczytano TRYB ZDALNY. Wykonuję operacje na hoście: $remote_host"
    echo "---"

    # Execute remote commands using the established pattern
    # Wykonaj zdalne komendy, używając ustalonego wzorca
    sshpass -p "$sudo_pswd" ssh -t "${remote_user}@${remote_host}" "echo '$sudo_pswd' | sudo -S bash -c \"$commands_to_execute\""

elif [ "$mode" == "local" ]; then
    # --- LOCAL MODE ---
    # --- TRYB LOKALNY ---
    echo "LOCAL MODE read. Executing operations on this machine."
    echo "Odczytano TRYB LOKALNY. Wykonuję operacje na tej maszynie."
    echo "---"

    # Execute the same commands locally with sudo
    # Wykonaj te same komendy lokalnie z sudo
    echo "$sudo_pswd" | sudo -S bash -c "$commands_to_execute"

else
    echo "ERROR: Invalid mode '$mode' in config.yaml. Use 'local' or 'remote'." >&2
    echo "BŁĄD: Nieprawidłowy tryb '$mode' w pliku konfiguracyjnym. Użyj 'local' lub 'remote'." >&2
    exit 1
fi

echo "---"
echo "Certificate revocation process completed successfully!"
echo "Proces odwoływania certyfikatu zakończony pomyślnie!"
--- END FILE: revoke_cert.sh ---

--- START FILE: set_mode.py ---
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# =====================================================================================
# === SCRIPT TO INTERACTIVELY SET THE EXECUTION MODE (local/remote) ===
# === SKRYPT DO INTERAKTYWNEGO USTAWIANIA TRYBU PRACY (local/remote) ===
# =====================================================================================

import os
import yaml

# =====================================================================================
# === MAIN SCRIPT LOGIC ===
# === GŁÓWNA LOGIKA SKRYPTU ===
# =====================================================================================

def set_execution_mode(config_path: str = "config.yaml"):
    """
    Interactively prompts the user to select an execution mode ('local' or 'remote')
    and updates the corresponding value in the YAML configuration file.

    Interaktywnie pyta użytkownika o wybór trybu wykonania ('local' lub 'remote')
    i aktualizuje odpowiednią wartość w pliku konfiguracyjnym YAML.
    """
    # --- Step 1: Check for the existence of the configuration file ---
    # --- Krok 1: Sprawdzenie dostępności pliku konfiguracyjnego ---
    if not os.path.exists(config_path):
        print(f"ERROR: Configuration file '{config_path}' not found!")
        print(f"BŁĄD: Plik konfiguracyjny '{config_path}' nie został znaleziony!")
        return

    # --- Step 2: Interactive loop for user mode selection ---
    # --- Krok 2: Pętla interaktywnego wyboru trybu przez użytkownika ---
    while True:
        print("\n" + "="*60)
        print("=== SCRIPT EXECUTION MODE SELECTION ===")
        print("=== WYBÓR TRYBU PRACY SKRYPTÓW ===")
        print("="*60)
        print("  [1] Local Mode - Operations will be performed on this machine.")
        print("      Tryb LOKALNY - Operacje będą wykonywane na tej maszynie.\n")
        print("  [2] Remote Mode - Operations will be performed on a remote server via SSH.")
        print("      Tryb ZDALNY - Operacje będą wykonywane na zdalnym serwerze przez SSH.")
        print("="*60)

        print("Choose mode [1 or 2]:")
        choice = input("Wybierz tryb [1 lub 2]: ").strip()

        if choice == '1':
            selected_mode = 'local'
            break
        elif choice == '2':
            selected_mode = 'remote'
            break
        else:
            print("\nINVALID CHOICE! Please enter '1' or '2'.")
            print("BŁĘDNY WYBÓR! Proszę wprowadzić '1' lub '2'.")

    # --- Step 3: Load, update, and save the YAML file ---
    # --- Krok 3: Wczytanie, aktualizacja i zapis pliku YAML ---
    try:
        with open(config_path, 'r', encoding='utf-8') as file:
            config_data = yaml.safe_load(file)

        # Update the value in the dictionary
        # Aktualizacja wartości w słowniku
        if 'execution' in config_data and isinstance(config_data['execution'], dict):
            config_data['execution']['mode'] = selected_mode
        else:
            # If the 'execution' section does not exist, it can be added
            # Jeśli sekcja 'execution' nie istnieje, można ją dodać
            config_data['execution'] = {'mode': selected_mode}
            print(f"\nWARNING: 'execution' section missing in the file. It has been added.")
            print(f"OSTRZEŻENIE: Brak sekcji 'execution' w pliku. Została ona dodana.")

        # Save the updated configuration back to the file
        # Zapisanie zaktualizowanej konfiguracji z powrotem do pliku
        with open(config_path, 'w', encoding='utf-8') as file:
            yaml.dump(config_data, file, default_flow_style=False, allow_unicode=True, sort_keys=False)

        print("\n" + "*"*60)
        print(f"SUCCESS! Execution mode has been set to: '{selected_mode}'.")
        print(f"SUKCES! Tryb pracy został ustawiony na: '{selected_mode}'.")
        print("*"*60 + "\n")

    except yaml.YAMLError as e:
        print(f"\nERROR: Problem parsing the file '{config_path}': {e}")
        print(f"BŁĄD: Problem z parsowaniem pliku '{config_path}': {e}")
    except Exception as e:
        print(f"\nERROR: An unexpected error occurred during the file operation: {e}")
        print(f"BŁĄD: Wystąpił nieoczekiwany problem podczas operacji na pliku: {e}")


if __name__ == "__main__":
    # Call the main function of the script
    # Wywołanie głównej funkcji skryptu
    set_execution_mode()
--- END FILE: set_mode.py ---

--- START FILE: start.py ---
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# =====================================================================================
# === MAIN ORCHESTRATION SCRIPT ===
# === GŁÓWNY SKRYPT ORKIESTRUJĄCY ===
# =====================================================================================

import os
import time
import pandas as pd
import yaml


# =====================================================================================
# === HELPER FUNCTIONS ===
# === FUNKCJE POMOCNICZE ===
# =====================================================================================

def load_config(path="config.yaml"):
    """
    Loads and returns the configuration from a YAML file.
    Wczytuje i zwraca konfigurację z pliku YAML.
    """
    try:
        with open(path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    except FileNotFoundError:
        print("ERROR: Configuration file '{path}' not found!")
        print(f"BŁĄD: Plik konfiguracyjny '{path}' nie został znaleziony!")
        return None
    except Exception as e:
        print(f"ERROR: Failed to load config file: {e}")
        print(f"BŁĄD: Nie udało się wczytać pliku konfiguracyjnego: {e}")
        return None


def save_config(data, path="config.yaml"):
    """
    Saves the configuration dictionary to a YAML file.
    Zapisuje słownik konfiguracyjny do pliku YAML.
    """
    try:
        with open(path, 'w', encoding='utf-8') as f:
            yaml.dump(data, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
        return True
    except Exception as e:
        print(f"ERROR: Failed to save config file: {e}")
        print(f"BŁĄD: Nie udało się zapisać pliku konfiguracyjnego: {e}")
        return False


def set_language():
    """
    Prompts the user to select a language and saves the choice to config.yaml.
    Pyta użytkownika o wybór języka i zapisuje go w pliku config.yaml.
    """
    while True:
        print("---")
        print("Select User Type:")
        print("Wybierz Typ Użytkownika:")
        print("[1] English")
        print("[2] Polski")
        print("---")

        print("Choose and press Enter:")
        choice = input("Wybierz i naciśnij Enter: ").strip()

        if choice == "1":
            user_type = "EN"
            break
        elif choice == "2":
            user_type = "PL"
            break
        else:
            os.system("clear || cls")
            print("Invalid Choice")
            print("Niepoprawny Wybór")

    os.system("clear || cls")
    print(f"Selected: {user_type}")
    print(f"Wybrano: {user_type}")
    time.sleep(2)
    os.system("clear || cls")

    config = load_config()
    if config:
        config['user_management']['state']['user_type'] = user_type
        if save_config(config):
            return True
    return False


# =====================================================================================
# === MAIN EXECUTION FUNCTION ===
# === GŁÓWNA FUNKCJA WYKONAWCZA ===
# =====================================================================================

def run_orchestration():
    """
    The main function that orchestrates the entire process.
    Główna funkcja orkiestrująca całym procesem.
    """
    # --- Step 1: Configuration questions for the user ---
    # --- Krok 1: Pytania konfiguracyjne do użytkownika ---
    if not set_language():
        exit(1)

    print("---")
    print("Select the operating mode (local/remote)...")
    print("Wybierz tryb pracy (local/remote)...")
    os.system("python3 set_mode.py")
    os.system("clear || cls")

    # --- Step 2: Running preparation scripts ---
    # --- Krok 2: Uruchomienie skryptów przygotowawczych ---
    print("---")
    print("Running preparation scripts...")
    print("Uruchamiam skrypty przygotowawcze...")
    os.system("python3 check_ip.py")
    os.system("python3 config_pref.py")
    os.system("clear || cls")

    # --- Step 3: Loading data and preparing for the loop ---
    # --- Krok 3: Wczytanie danych i przygotowanie do pętli ---
    config = load_config()
    if not config:
        exit(1)

    user_type = config['user_management']['state']['user_type']
    data_sources = config['user_management']['data_sources']
    csv_path = data_sources.get(user_type.lower())

    if not csv_path:
        print(f"ERROR: No data source for language '{user_type}'.")
        print(f"BŁĄD: Brak źródła danych dla języka '{user_type}'.")
        exit(1)

    print("---")
    print("Loading user list...")
    print("Wczytuję listę użytkowników...")
    try:
        df = pd.read_csv(csv_path)
    except Exception as e:
        print(f"ERROR: Failed to load data from CSV: {e}")
        print(f"BŁĄD: Nie udało się wczytać danych z CSV: {e}")
        exit(1)

    if user_type == "EN":
        column_name = 'Username:'
        column_name1 = 'E-Mail Address:'
        column_name2 = 'Timestamp:'
        print("\n--- Users List ---")
    else:  # PL
        column_name = 'Nazwa Użytkownika:'
        column_name1 = 'Adres E-Mail:'
        column_name2 = 'Sygnatura czasowa:'
        print("\n--- Lista Użytkowników ---")

    number_users = len(df)
    print(df[column_name].to_string(index=False))
    print(f"\nNumber Of Users: {number_users}")
    print(f"Liczba Użytkowników: {number_users}")
    time.sleep(3)
    os.system("clear || cls")

    config['user_management']['state']['number_users'] = number_users
    save_config(config)

    # --- Step 4: Main processing loop ---
    # --- Krok 4: Główna pętla przetwarzania ---
    for index, row in df.iterrows():
        print("---")
        print(f"Processing user {index + 1} of {number_users}...")
        print(f"Przetwarzam użytkownika {index + 1} z {number_users}...")

        client_name = row[column_name]
        email_address = row[column_name1]
        registration_date = row[column_name2]

        print(f"Client: {client_name}")
        print(f"Klient: {client_name}")
        time.sleep(2)

        config['user_management']['state']['client_name'] = str(client_name)
        config['user_management']['state']['email_address'] = str(email_address)
        config['user_management']['state']['registration_date'] = str(registration_date)
        save_config(config)

        # Call scripts for the current user
        # Wywołanie skryptów dla bieżącego użytkownika
        os.system("./make_cert.sh")
        os.system("clear || cls")
        os.system("./package.sh")
        time.sleep(3)
        os.system("clear || cls")
        os.system("python3 email_sender.py")
        time.sleep(6)
        os.system("clear || cls")

    print("---")
    print("Script has finished.")
    print("Skrypt zakończył działanie.")


# =====================================================================================
# === SCRIPT ENTRY POINT ===
# === PUNKT WEJŚCIA DO SKRYPTU ===
# =====================================================================================

if __name__ == "__main__":
    run_orchestration()
--- END FILE: start.py ---

--- START FILE: update_wireguard_android_endpoint.sh ---
#!/bin/bash

# =====================================================================================
# === UNIFIED WIREGUARD UPDATE (ANDROID) - Handles local/remote mode ===
# === ZUNIFIKOWANA AKTUALIZACJA WIREGUARD (ANDROID) - Obsługa trybu local/remote ===
# =====================================================================================

set -e
# Stop the script on any error
# Zatrzymaj skrypt w przypadku błędu

# --- Configuration ---
# --- Konfiguracja ---
CONFIG_FILE="config.yaml"
if [ ! -f "$CONFIG_FILE" ]; then
    echo "Error: Configuration file '$CONFIG_FILE' not found!"
    echo "BŁĄD: Plik konfiguracyjny '$CONFIG_FILE' nie został znaleziony!"
    exit 1
fi

echo "---"
echo "Loading configuration..."
echo "Wczytuję konfigurację..."

# Read data from the nested YAML structure
# Odczyt danych z zagnieżdżonej struktury YAML
sudo_pswd=$(yq '.security.sudo_pswd' "$CONFIG_FILE")
new_ip=$(yq '.network.external_ip' "$CONFIG_FILE")
remote_user=$(yq '.network.remote_server.user' "$CONFIG_FILE")
remote_host=$(yq '.network.remote_server.host' "$CONFIG_FILE")
local_project_root=$(yq -r '.paths.project_root' "$CONFIG_FILE")
mode=$(yq '.execution.mode' "$CONFIG_FILE")
modifier_script="modify_android_conf.py"

# --- Path Definitions ---
# --- Definicje Ścieżek ---
wg_config_path="/etc/wireguard/android.conf"
local_qr_destination="${local_project_root}android_wireguard_qr.png"

# =====================================================================================
# --- MAIN SCRIPT LOGIC ===
# === GŁÓWNA LOGIKA SKRYPTU ===
# =====================================================================================

echo "---"
if [ "$mode" == "remote" ]; then
    # ####################
    # ### REMOTE MODE ###
    # ####################
    echo "REMOTE MODE read. Executing operations on host: $remote_host"
    echo "Odczytano TRYB ZDALNY. Wykonuję operacje na hoście: $remote_host"

    # --- Path definitions for remote mode ---
    # --- Definicje ścieżek dla trybu zdalnego ---
    local_temp_conf="./android.conf.temp"
    remote_temp_conf="/tmp/android.conf.temp"

    # --- Step 1 (Remote): Download the original config file ---
    # --- Krok 1 (Zdalny): Pobranie oryginalnego pliku konfiguracyjnego ---
    echo "---"
    echo "Downloading original config file from the server..."
    echo "Pobieram oryginalny plik konfiguracyjny z serwera..."
    sshpass -p "$sudo_pswd" ssh "${remote_user}@${remote_host}" "echo '$sudo_pswd' | sudo -S cat $wg_config_path" > "$local_temp_conf"

    if [ ! -s "$local_temp_conf" ]; then
        echo "ERROR: Failed to download the config file content." >&2
        echo "BŁĄD: Nie udało się pobrać treści pliku konfiguracyjnego." >&2
        exit 1
    fi

    # --- Step 2 (Remote): Modify the file locally ---
    # --- Krok 2 (Zdalny): Modyfikacja pliku lokalnie ---
    echo "---"
    echo "Modifying config file locally..."
    echo "Modyfikuję plik konfiguracyjny lokalnie..."
    python3 "$modifier_script" "$local_temp_conf" "$new_ip"

    # --- Step 3 (Remote): Generate QR code LOCALLY ---
    # --- Krok 3 (Zdalny): Generowanie kodu QR LOKALNIE ---
    echo "---"
    echo "Generating QR code from the local, modified file..."
    echo "Generuję kod QR z lokalnego, zmodyfikowanego pliku..."
    qrencode -o "$local_qr_destination" < "$local_temp_conf"
    echo "QR code PNG image successfully saved to: $local_qr_destination"
    echo "Obraz PNG z kodem QR został pomyślnie zapisany w: $local_qr_destination"

    # --- Step 4 (Remote): Upload the modified file back to the server ---
    # --- Krok 4 (Zdalny): Wysłanie zmodyfikowanego pliku z powrotem na serwer ---
    echo "---"
    echo "Uploading modified file to the server..."
    echo "Wysyłam zmodyfikowany plik na serwer..."
    sshpass -p "$sudo_pswd" scp "$local_temp_conf" "${remote_user}@${remote_host}:${remote_temp_conf}"

    # --- Step 5 (Remote): Perform final operations on the server ---
    # --- Krok 5 (Zdalny): Wykonanie finalnych operacji na serwerze ---
    echo "---"
    echo "Performing final operations on the server..."
    echo "Wykonuję finalne operacje na serwerze..."
    # CORRECTED BLOCK - with standard spaces
    # POPRAWIONY BLOK - ze standardowymi spacjami
    remote_commands="
        set -e;
        echo '--- (REMOTE) Replacing the configuration file... ---';
        echo '--- (ZDALNY) Podmiana pliku konfiguracyjnego... ---';
        mv ${remote_temp_conf} ${wg_config_path};
        chown root:root ${wg_config_path};
        chmod 600 ${wg_config_path};
        echo '--- (REMOTE) Restarting WireGuard interface (wg0)... ---';
        echo '--- (ZDALNY) Restart interfejsu WireGuard (wg0)... ---';
        wg-quick down wg0 || true;
        wg-quick up wg0;
    "
    sshpass -p "$sudo_pswd" ssh -t "${remote_user}@${remote_host}" "echo '$sudo_pswd' | sudo -S bash -c \"$remote_commands\""

    # --- Step 6 (Remote): Cleanup ---
    # --- Krok 6 (Zdalny): Sprzątanie ---
    echo "---"
    echo "Cleaning up local temporary file..."
    echo "Sprzątam lokalny plik tymczasowy..."
    rm "$local_temp_conf"

elif [ "$mode" == "local" ]; then
    # ###################
    # ### LOCAL MODE ###
    # ###################
    echo "LOCAL MODE read. Executing operations on this machine."
    echo "Odczytano TRYB LOKALNY. Wykonuję operacje na tej maszynie."

    # --- Commands to be executed LOCALLY ---
    # --- Polecenia do wykonania LOKALNIE ---
    local_commands="
        set -e;
        echo '--- (LOCAL) Modifying the configuration file... ---';
        echo '--- (LOKALNY) Modyfikacja pliku konfiguracyjnego... ---';
        echo '$sudo_pswd' | sudo -S python3 '$modifier_script' '$wg_config_path' '$new_ip';

        echo '--- (LOCAL) Restarting WireGuard interface (wg0)... ---';
        echo '--- (LOKALNY) Restart interfejsu WireGuard (wg0)... ---';
        echo '$sudo_pswd' | sudo -S wg-quick down wg0 || true;
        echo '$sudo_pswd' | sudo -S wg-quick up wg0;
    "

    # --- Execute local commands without a new sudo pipe for each ---
    # --- Wykonanie poleceń lokalnych bez nowego potoku sudo dla każdego ---
    echo "---"
    bash -c "$local_commands"

    # --- Generate QR code locally ---
    # --- Generowanie kodu QR lokalnie ---
    echo "---"
    echo "Generating QR code locally..."
    echo "Generuję kod QR lokalnie..."
    echo "$sudo_pswd" | sudo -S cat "$wg_config_path" | qrencode -o "$local_qr_destination"
    echo "QR code PNG image successfully saved to: $local_qr_destination"
    echo "Obraz PNG z kodem QR został pomyślnie zapisany w: $local_qr_destination"

else
    echo "ERROR: Invalid mode '$mode' in config.yaml. Use 'local' or 'remote'." >&2
    echo "BŁĄD: Nieprawidłowy tryb '$mode' w pliku konfiguracyjnym. Użyj 'local' lub 'remote'." >&2
    exit 1
fi

echo "---"
echo "Process completed successfully!"
echo "Proces zakończony pomyślnie!"
--- END FILE: update_wireguard_android_endpoint.sh ---

--- START FILE: update_wireguard_endpoint_MDC2.py ---
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# =====================================================================================
# === SCRIPT TO UPDATE WIREGUARD ENDPOINT AND RESTART THE SERVICE ===
# === SKRYPT DO AKTUALIZACJI ENDPOINTU WIREGUARD I RESTARTU USŁUGI ===
# =====================================================================================

import os
import re
import subprocess
import yaml

# =====================================================================================
# === HELPER FUNCTIONS ===
# === FUNKCJE POMOCNICZE ===
# =====================================================================================

def load_config(path="config.yaml"):
    """
    Loads and returns the configuration from a YAML file.
    Wczytuje i zwraca konfigurację z pliku YAML.
    """
    try:
        with open(path, 'r', encoding='utf-8') as file:
            return yaml.safe_load(file)
    except FileNotFoundError:
        print(f"ERROR: Configuration file '{path}' not found!")
        print(f"BŁĄD: Plik konfiguracyjny '{path}' nie został znaleziony!")
        return None
    except Exception as e:
        print(f"ERROR: Failed to load config file: {e}")
        print(f"BŁĄD: Nie udało się wczytać pliku konfiguracyjnego: {e}")
        return None

def run_sudo_command(command: str, password: str) -> bool:
    """
    Runs a command with sudo, piping the password to it.
    Uruchamia komendę z sudo, przekazując do niej hasło.

    Returns:
        bool: True if the command was successful, False otherwise.
              True, jeśli polecenie się powiodło, w przeciwnym razie False.
    """
    print(f"Executing: sudo {command}")
    print(f"Wykonuję: sudo {command}")
    try:
        # We use a pipe to safely pass the password to 'sudo -S'
        # Używamy potoku, aby bezpiecznie przekazać hasło do 'sudo -S'
        process = subprocess.run(
            ['sudo', '-S'] + command.split(),
            input=password + '\n',
            text=True,
            capture_output=True,
            check=True  # Will raise an exception if the command fails
        )
        if process.stdout:
            print(process.stdout)
        if process.stderr:
            print(f"Stderr: {process.stderr}")
        return True
    except subprocess.CalledProcessError as e:
        print("\nERROR: An error occurred while executing a sudo command.")
        print("BŁĄD: Wystąpił błąd podczas wykonywania komendy sudo.")
        print(f"Command / Polecenie: {e.cmd}")
        print(f"Exit Code / Kod wyjścia: {e.returncode}")
        print(f"Stderr: {e.stderr}")
        return False
    except FileNotFoundError:
        print(f"\nERROR: Command '{command.split()[0]}' not found. Make sure it is installed.")
        print(f"BŁĄD: Polecenie '{command.split()[0]}' nie zostało znalezione. Upewnij się, że jest zainstalowane.")
        return False

# =====================================================================================
# === MAIN SCRIPT LOGIC ===
# === GŁÓWNA LOGIKA SKRYPTU ===
# =====================================================================================

def update_wireguard_endpoint(config_path: str = "config.yaml"):
    """
    Updates the Endpoint in the WireGuard configuration file and restarts the service.
    Aktualizuje Endpoint w pliku konfiguracyjnym WireGuard i restartuje usługę.
    """
    wg_config_path = "/etc/wireguard/wg0-client.conf"
    temp_wg_config_path = "/tmp/wg0-client.conf.temp"

    # --- Step 1: Load configuration from YAML ---
    # --- Krok 1: Wczytanie konfiguracji z YAML ---
    print("---")
    print("Loading configuration from YAML file...")
    print("Wczytuję konfigurację z pliku YAML...")
    config_data = load_config(config_path)
    if not config_data:
        return

    try:
        sudo_pswd = config_data['security']['sudo_pswd']
        new_ip = config_data['network']['external_ip']
    except KeyError as e:
        print(f"ERROR: Missing key in config.yaml: {e}")
        print(f"BŁĄD: Brakujący klucz w config.yaml: {e}")
        return

    # --- Step 2: Read WireGuard configuration using sudo ---
    # --- Krok 2: Odczytanie konfiguracji WireGuard za pomocą sudo ---
    print(f"\nReading WireGuard configuration file: {wg_config_path}")
    print(f"Odczytuję plik konfiguracyjny WireGuard: {wg_config_path}")
    try:
        read_process = subprocess.run(
            ['sudo', '-S', 'cat', wg_config_path],
            input=sudo_pswd + '\n', text=True, capture_output=True, check=True
        )
        original_content = read_process.stdout
    except Exception:
        print(f"\nERROR: Failed to read {wg_config_path}. Check permissions and password.")
        print(f"BŁĄD: Nie udało się odczytać pliku {wg_config_path}. Sprawdź uprawnienia i hasło.")
        return

    # --- Step 3: Modify the IP address in memory ---
    # --- Krok 3: Modyfikacja adresu IP w pamięci ---
    print("\nReplacing the IP address in the 'Endpoint' line...")
    print("Podmieniam adres IP w linii 'Endpoint'...")
    modified_content = re.sub(
        r'(^\s*Endpoint\s*=\s*)[\d\.]+',
        fr'\g<1>{new_ip}',
        original_content,
        flags=re.MULTILINE
    )

    if original_content == modified_content:
        print("\nWarning: 'Endpoint' line not found for update, or the IP address is already current.")
        print("Ostrzeżenie: Nie znaleziono linii 'Endpoint' do aktualizacji lub adres IP jest już aktualny.")
        # We can continue to the restart just in case
        # Możemy kontynuować do restartu na wszelki wypadek

    # --- Step 4: Write to a temporary file and move it into place with sudo ---
    # --- Krok 4: Zapis do pliku tymczasowego i przeniesienie go z sudo ---
    print(f"\nSaving changes and updating {wg_config_path}...")
    print(f"Zapisuję zmiany i aktualizuję plik {wg_config_path}...")
    try:
        with open(temp_wg_config_path, "w") as f:
            f.write(modified_content)
    except IOError as e:
        print(f"ERROR: Could not write to temporary file {temp_wg_config_path}: {e}")
        print(f"BŁĄD: Nie można było zapisać do pliku tymczasowego {temp_wg_config_path}: {e}")
        return

    # We use sudo to move the file, set the owner, and set permissions
    # Używamy sudo do przeniesienia pliku, ustawienia właściciela i uprawnień
    if not run_sudo_command(f"mv {temp_wg_config_path} {wg_config_path}", sudo_pswd): return
    if not run_sudo_command(f"chown root:root {wg_config_path}", sudo_pswd): return
    if not run_sudo_command(f"chmod 600 {wg_config_path}", sudo_pswd): return

    # --- Step 5: Restart the WireGuard service ---
    # --- Krok 5: Restart usługi WireGuard ---
    print("\nRestarting WireGuard interface (wg0-client)...")
    print("Restartuję interfejs WireGuard (wg0-client)...")
    if not run_sudo_command("wg-quick down wg0-client", sudo_pswd):
        print("\nWarning: Failed to bring the interface down (it may have already been down). Continuing...")
        print("Ostrzeżenie: Nie udało się wyłączyć interfejsu (możliwe, że był już wyłączony). Kontynuuję...")

    if not run_sudo_command("wg-quick up wg0-client", sudo_pswd):
        print("\nCRITICAL ERROR: Failed to bring up the WireGuard interface! Check the configuration.")
        print("BŁĄD KRYTYCZNY: Nie udało się podnieść interfejsu WireGuard! Sprawdź konfigurację.")
        return

    # --- Step 6: Verification ---
    # --- Krok 6: Weryfikacja ---
    print("\nVerifying connection status...")
    print("Weryfikuję status połączenia...")
    run_sudo_command("wg show wg0-client", sudo_pswd)

    print("\n---")
    print("Process completed successfully!")
    print("Proces zakończony pomyślnie!")
    print("---")

if __name__ == "__main__":
    update_wireguard_endpoint()
--- END FILE: update_wireguard_endpoint_MDC2.py ---

